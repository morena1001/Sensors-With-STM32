
Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000929c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009430  08009430  0000a430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a8  080098a8  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098a8  080098a8  0000a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b0  080098b0  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098b4  080098b4  0000a8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080098b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001d4  08009a8c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08009a8c  0000b4ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a1  00000000  00000000  000189cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0001ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085c  00000000  00000000  0001b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceb5  00000000  00000000  0001bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef15  00000000  00000000  00038e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5dc6  00000000  00000000  00047d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  000edba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f1cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009414 	.word	0x08009414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009414 	.word	0x08009414

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fc71 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f857 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f98f 	bl	8001024 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d06:	f000 f96f 	bl	8000fe8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0a:	f000 f8a9 	bl	8000e60 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d0e:	f000 f93b 	bl	8000f88 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000d12:	f000 f90f 	bl	8000f34 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
//  int color = 1000;
  HAL_DAC_Init(&hdac);
 8000d16:	481d      	ldr	r0, [pc, #116]	@ (8000d8c <main+0x98>)
 8000d18:	f001 fbfb 	bl	8002512 <HAL_DAC_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	481b      	ldr	r0, [pc, #108]	@ (8000d8c <main+0x98>)
 8000d20:	f001 fc19 	bl	8002556 <HAL_DAC_Start>

  HAL_ADC_Start_DMA(&hadc1, raws, 2);
 8000d24:	2202      	movs	r2, #2
 8000d26:	491a      	ldr	r1, [pc, #104]	@ (8000d90 <main+0x9c>)
 8000d28:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <main+0xa0>)
 8000d2a:	f000 fe63 	bl	80019f4 <HAL_ADC_Start_DMA>
//		  sprintf(message, "%d\r\n", color);
//		  HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
//		  HAL_Delay(5);
//	  }

	  if (HAL_GPIO_ReadPin (CTB1_GPIO_Port, CTB1_Pin)) {
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <main+0xa4>)
 8000d32:	f001 ff9d 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00c      	beq.n	8000d56 <main+0x62>
		  if (!pressed) {
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <main+0xa8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10b      	bne.n	8000d5c <main+0x68>
			  count++;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <main+0xac>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <main+0xac>)
 8000d4c:	6013      	str	r3, [r2, #0]
			  pressed = 1;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <main+0xa8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e002      	b.n	8000d5c <main+0x68>
		  }
//		  sprintf(message, "WOAH\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
	  } else {
		  pressed = 0;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <main+0xa8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
//	    val1=val/3.9;
//	    val5=(int)val1;
//	    val3=val5/100;
//	    val2=(val5%100)/10;
//	    val4=val5%10;
HAL_ADC_Start_DMA(&hadc1, raws, 2);
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <main+0x9c>)
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <main+0xa0>)
 8000d62:	f000 fe47 	bl	80019f4 <HAL_ADC_Start_DMA>
//	  sprintf(message, "%f\r\n", (raw / 4095) * 16.5);
	  sprintf(message, "%d  %d  %d\r\n", count, raws[0], raws[1]);
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <main+0xac>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <main+0x9c>)
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <main+0x9c>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	460b      	mov	r3, r1
 8000d76:	490b      	ldr	r1, [pc, #44]	@ (8000da4 <main+0xb0>)
 8000d78:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <main+0xb4>)
 8000d7a:	f004 ff13 	bl	8005ba4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) message, 40, 100);
 8000d7e:	2364      	movs	r3, #100	@ 0x64
 8000d80:	2228      	movs	r2, #40	@ 0x28
 8000d82:	4909      	ldr	r1, [pc, #36]	@ (8000da8 <main+0xb4>)
 8000d84:	4809      	ldr	r0, [pc, #36]	@ (8000dac <main+0xb8>)
 8000d86:	f003 fc05 	bl	8004594 <HAL_UART_Transmit>
	  if (HAL_GPIO_ReadPin (CTB1_GPIO_Port, CTB1_Pin)) {
 8000d8a:	e7d0      	b.n	8000d2e <main+0x3a>
 8000d8c:	20000284 	.word	0x20000284
 8000d90:	2000034c 	.word	0x2000034c
 8000d94:	200001f0 	.word	0x200001f0
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	20000348 	.word	0x20000348
 8000da0:	20000354 	.word	0x20000354
 8000da4:	08009430 	.word	0x08009430
 8000da8:	20000320 	.word	0x20000320
 8000dac:	20000298 	.word	0x20000298

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09c      	sub	sp, #112	@ 0x70
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dba:	2228      	movs	r2, #40	@ 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 ff53 	bl	8005c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2234      	movs	r2, #52	@ 0x34
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 ff45 	bl	8005c6a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 ff8a 	bl	8002d18 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e0a:	f000 f97b 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e20:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000e24:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 ffb1 	bl	8003d94 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e38:	f000 f964 	bl	8001104 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e44:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 f9c3 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e54:	f000 f956 	bl	8001104 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3770      	adds	r7, #112	@ 0x70
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed0:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000ed2:	f000 fc09 	bl	80016e8 <HAL_ADC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000edc:	f000 f912 	bl	8001104 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000efe:	f000 fe15 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f08:	f000 f8fc 	bl	8001104 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_ADC1_Init+0xd0>)
 8000f1a:	f000 fe07 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f24:	f000 f8ee 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001f0 	.word	0x200001f0

08000f34 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_DAC_Init+0x4c>)
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <MX_DAC_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_DAC_Init+0x4c>)
 8000f4c:	f001 fae1 	bl	8002512 <HAL_DAC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000f56:	f000 f8d5 	bl	8001104 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_DAC_Init+0x4c>)
 8000f6a:	f001 fb2b 	bl	80025c4 <HAL_DAC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000f74:	f000 f8c6 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000284 	.word	0x20000284
 8000f84:	40007400 	.word	0x40007400

08000f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_USART2_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f94:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f003 fa94 	bl	80044f8 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f895 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000298 	.word	0x20000298
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_DMA_Init+0x38>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200b      	movs	r0, #11
 800100c:	f001 fa4b 	bl	80024a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001010:	200b      	movs	r0, #11
 8001012:	f001 fa64 	bl	80024de <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a2e      	ldr	r2, [pc, #184]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001040:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <MX_GPIO_Init+0xd4>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108a:	f001 fe09 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CTB1_Pin */
  GPIO_InitStruct.Pin = CTB1_Pin;
 800108e:	2302      	movs	r3, #2
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTB1_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	4816      	ldr	r0, [pc, #88]	@ (80010fc <MX_GPIO_Init+0xd8>)
 80010a2:	f001 fc73 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f001 fc64 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTB_Pin */
  GPIO_InitStruct.Pin = CTB_Pin;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTB_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	4809      	ldr	r0, [pc, #36]	@ (8001100 <MX_GPIO_Init+0xdc>)
 80010da:	f001 fc57 	bl	800298c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2006      	movs	r0, #6
 80010e4:	f001 f9df 	bl	80024a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010e8:	2006      	movs	r0, #6
 80010ea:	f001 f9f8 	bl	80024de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000400 	.word	0x48000400

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <Error_Handler+0x8>

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_MspInit+0x44>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_MspInit+0x44>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001178:	d164      	bne.n	8001244 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a33      	ldr	r2, [pc, #204]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b31      	ldr	r3, [pc, #196]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a2d      	ldr	r2, [pc, #180]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 8001198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_ADC_MspInit+0xf4>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c2:	2308      	movs	r3, #8
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	481e      	ldr	r0, [pc, #120]	@ (8001250 <HAL_ADC_MspInit+0xf8>)
 80011d6:	f001 fbd9 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011de:	2303      	movs	r3, #3
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f0:	f001 fbcc 	bl	800298c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_ADC_MspInit+0x100>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 8001208:	2280      	movs	r2, #128	@ 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 800120e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 8001216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800121c:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 800121e:	2220      	movs	r2, #32
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480a      	ldr	r0, [pc, #40]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 800122a:	f001 fa18 	bl	800265e <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001234:	f7ff ff66 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 800123c:	639a      	str	r2, [r3, #56]	@ 0x38
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <HAL_ADC_MspInit+0xfc>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	48000800 	.word	0x48000800
 8001254:	20000240 	.word	0x20000240
 8001258:	40020008 	.word	0x40020008

0800125c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_DAC_MspInit+0x74>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d124      	bne.n	80012c8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_DAC_MspInit+0x78>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ae:	2310      	movs	r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f001 fb62 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40007400 	.word	0x40007400
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_UART_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_UART_MspInit+0x80>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_UART_MspInit+0x80>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_UART_MspInit+0x80>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_UART_MspInit+0x80>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_UART_MspInit+0x80>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_UART_MspInit+0x80>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800133a:	2307      	movs	r3, #7
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001348:	f001 fb20 	bl	800298c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b2:	f000 f95b 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}

080013ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
//	if (HAL_GPIO_ReadPin (CTB_GPIO_Port, CTB_Pin)) {
//		sprintf(message_2, "YIPPE\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t *) message_2, 20, 100);
//	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTB_Pin);
 80013be:	2001      	movs	r0, #1
 80013c0:	f001 fc86 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Channel1_IRQHandler+0x10>)
 80013ce:	f001 f9ec 	bl	80027aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000240 	.word	0x20000240

080013dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_kill>:

int _kill(int pid, int sig)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013f6:	f004 fc8b 	bl	8005d10 <__errno>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2216      	movs	r2, #22
 80013fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_exit>:

void _exit (int status)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ffe7 	bl	80013ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800141e:	bf00      	nop
 8001420:	e7fd      	b.n	800141e <_exit+0x12>

08001422 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e00a      	b.n	800144a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001434:	f3af 8000 	nop.w
 8001438:	4601      	mov	r1, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	60ba      	str	r2, [r7, #8]
 8001440:	b2ca      	uxtb	r2, r1
 8001442:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbf0      	blt.n	8001434 <_read+0x12>
  }

  return len;
 8001452:	687b      	ldr	r3, [r7, #4]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e009      	b.n	8001482 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	dbf1      	blt.n	800146e <_write+0x12>
  }
  return len;
 800148a:	687b      	ldr	r3, [r7, #4]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_close>:

int _close(int file)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014bc:	605a      	str	r2, [r3, #4]
  return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_isatty>:

int _isatty(int file)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f004 fbf0 	bl	8005d10 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20004000 	.word	0x20004000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000358 	.word	0x20000358
 8001564:	200004b0 	.word	0x200004b0

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	@ (80015cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <LoopForever+0xe>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <LoopForever+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f004 fbaf 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7ff fb99 	bl	8000cf4 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015d0:	080098b8 	.word	0x080098b8
  ldr r2, =_sbss
 80015d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015d8:	200004ac 	.word	0x200004ac

080015dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 ff4d 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	200f      	movs	r0, #15
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fd88 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 ff65 	bl	80024fa <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 ff2d 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000000 	.word	0x20000000
 8001664:	20000008 	.word	0x20000008
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	2000035c 	.word	0x2000035c

08001694 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;  
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000035c 	.word	0x2000035c

080016ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09a      	sub	sp, #104	@ 0x68
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e169      	b.n	80019dc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d176      	bne.n	8001808 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d152      	bne.n	80017c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fd0b 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13b      	bne.n	80017c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fd67 	bl	8002224 <ADC_Disable>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12f      	bne.n	80017c8 <HAL_ADC_Init+0xe0>
 8001768:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800176c:	2b00      	cmp	r3, #0
 800176e:	d12b      	bne.n	80017c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001778:	f023 0302 	bic.w	r3, r3, #2
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001792:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017a4:	4b8f      	ldr	r3, [pc, #572]	@ (80019e4 <HAL_ADC_Init+0x2fc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a8f      	ldr	r2, [pc, #572]	@ (80019e8 <HAL_ADC_Init+0x300>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9a      	lsrs	r2, r3, #18
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ba:	e002      	b.n	80017c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017e4:	d110      	bne.n	8001808 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f023 0312 	bic.w	r3, r3, #18
 80017ee:	f043 0210 	orr.w	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 80d6 	bne.w	80019c2 <HAL_ADC_Init+0x2da>
 8001816:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 80d1 	bne.w	80019c2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 80c9 	bne.w	80019c2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001838:	f043 0202 	orr.w	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001840:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_ADC_Init+0x304>)
 8001842:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_ADC_Init+0x180>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_Init+0x180>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_ADC_Init+0x182>
 8001868:	2300      	movs	r3, #0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11c      	bne.n	80018a8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d010      	beq.n	8001896 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_ADC_Init+0x1a8>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Init+0x1a8>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_ADC_Init+0x1aa>
 8001890:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e5b      	ldrb	r3, [r3, #25]
 80018ac:	035b      	lsls	r3, r3, #13
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018b2:	2a01      	cmp	r2, #1
 80018b4:	d002      	beq.n	80018bc <HAL_ADC_Init+0x1d4>
 80018b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018ba:	e000      	b.n	80018be <HAL_ADC_Init+0x1d6>
 80018bc:	2200      	movs	r2, #0
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018ce:	4313      	orrs	r3, r2
 80018d0:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11b      	bne.n	8001914 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7e5b      	ldrb	r3, [r3, #25]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	3b01      	subs	r3, #1
 80018ea:	045a      	lsls	r2, r3, #17
 80018ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80018f6:	e00d      	b.n	8001914 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	4313      	orrs	r3, r2
 8001926:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001928:	4313      	orrs	r3, r2
 800192a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d114      	bne.n	8001964 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001948:	f023 0302 	bic.w	r3, r3, #2
 800194c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e1b      	ldrb	r3, [r3, #24]
 8001952:	039a      	lsls	r2, r3, #14
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4313      	orrs	r3, r2
 800195e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001960:	4313      	orrs	r3, r2
 8001962:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_ADC_Init+0x308>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001974:	430b      	orrs	r3, r1
 8001976:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10c      	bne.n	800199a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f023 010f 	bic.w	r1, r3, #15
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
 8001998:	e007      	b.n	80019aa <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 020f 	bic.w	r2, r2, #15
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f023 0303 	bic.w	r3, r3, #3
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c0:	e00a      	b.n	80019d8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f023 0312 	bic.w	r3, r3, #18
 80019ca:	f043 0210 	orr.w	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3768      	adds	r7, #104	@ 0x68
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	50000300 	.word	0x50000300
 80019f0:	fff0c007 	.word	0xfff0c007

080019f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d17e      	bne.n	8001b10 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_Start_DMA+0x2c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e07a      	b.n	8001b16 <HAL_ADC_Start_DMA+0x122>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fb97 	bl	800215c <ADC_Enable>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d166      	bne.n	8001b06 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f023 0206 	bic.w	r2, r3, #6
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b20 <HAL_ADC_Start_DMA+0x12c>)
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aac:	4a1d      	ldr	r2, [pc, #116]	@ (8001b24 <HAL_ADC_Start_DMA+0x130>)
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <HAL_ADC_Start_DMA+0x134>)
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	221c      	movs	r2, #28
 8001abe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0210 	orr.w	r2, r2, #16
 8001ace:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3340      	adds	r3, #64	@ 0x40
 8001aea:	4619      	mov	r1, r3
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f000 fdfc 	bl	80026ec <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0204 	orr.w	r2, r2, #4
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
 8001b12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08002091 	.word	0x08002091
 8001b24:	0800210b 	.word	0x0800210b
 8001b28:	08002127 	.word	0x08002127

08001b2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b09b      	sub	sp, #108	@ 0x6c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e295      	b.n	800207a <HAL_ADC_ConfigChannel+0x54e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 8279 	bne.w	8002058 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d81c      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	461a      	mov	r2, r3
 8001b82:	231f      	movs	r3, #31
 8001b84:	4093      	lsls	r3, r2
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ba6:	e063      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d81e      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	4019      	ands	r1, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	3b1e      	subs	r3, #30
 8001be0:	fa00 f203 	lsl.w	r2, r0, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bec:	e040      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b0e      	cmp	r3, #14
 8001bf4:	d81e      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	3b3c      	subs	r3, #60	@ 0x3c
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3b3c      	subs	r3, #60	@ 0x3c
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c32:	e01d      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	3b5a      	subs	r3, #90	@ 0x5a
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4019      	ands	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	3b5a      	subs	r3, #90	@ 0x5a
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80e5 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	d91c      	bls.n	8001cc2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6999      	ldr	r1, [r3, #24]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	3b1e      	subs	r3, #30
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4019      	ands	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6898      	ldr	r0, [r3, #8]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b1e      	subs	r3, #30
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	e019      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6959      	ldr	r1, [r3, #20]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4019      	ands	r1, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6898      	ldr	r0, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d84f      	bhi.n	8001db8 <HAL_ADC_ConfigChannel+0x28c>
 8001d18:	a201      	add	r2, pc, #4	@ (adr r2, 8001d20 <HAL_ADC_ConfigChannel+0x1f4>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d53 	.word	0x08001d53
 8001d28:	08001d75 	.word	0x08001d75
 8001d2c:	08001d97 	.word	0x08001d97
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d36:	4b97      	ldr	r3, [pc, #604]	@ (8001f94 <HAL_ADC_ConfigChannel+0x468>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	0691      	lsls	r1, r2, #26
 8001d40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d42:	430a      	orrs	r2, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d4e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d50:	e07b      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d58:	4b8e      	ldr	r3, [pc, #568]	@ (8001f94 <HAL_ADC_ConfigChannel+0x468>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	0691      	lsls	r1, r2, #26
 8001d62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d70:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d72:	e06a      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d7a:	4b86      	ldr	r3, [pc, #536]	@ (8001f94 <HAL_ADC_ConfigChannel+0x468>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	0691      	lsls	r1, r2, #26
 8001d84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d86:	430a      	orrs	r2, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d92:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d94:	e059      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f94 <HAL_ADC_ConfigChannel+0x468>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	0691      	lsls	r1, r2, #26
 8001da6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001da8:	430a      	orrs	r2, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001db4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001db6:	e048      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dda:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	069b      	lsls	r3, r3, #26
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dfe:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e22:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e46:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001e48:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x33e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x33e>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x340>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 80fe 	bne.w	800206e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00f      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	400a      	ands	r2, r1
 8001e94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001e98:	e049      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d91c      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6999      	ldr	r1, [r3, #24]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1b      	subs	r3, #27
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1b      	subs	r3, #27
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
 8001ef4:	e01b      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	4019      	ands	r1, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6898      	ldr	r0, [r3, #8]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <HAL_ADC_ConfigChannel+0x46c>)
 8001f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d014      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d105      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	f040 8085 	bne.w	800206e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d17e      	bne.n	800206e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10c      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x470>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x470>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x472>
 8001f94:	83fff000 	.word	0x83fff000
 8001f98:	50000300 	.word	0x50000300
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d150      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x498>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x498>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x49a>
 8001fc4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d13c      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d11d      	bne.n	800200e <HAL_ADC_ConfigChannel+0x4e2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fda:	d118      	bne.n	800200e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe8:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <HAL_ADC_ConfigChannel+0x55c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_ADC_ConfigChannel+0x560>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9a      	lsrs	r2, r3, #18
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffe:	e002      	b.n	8002006 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800200c:	e02e      	b.n	800206c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b11      	cmp	r3, #17
 8002014:	d10b      	bne.n	800202e <HAL_ADC_ConfigChannel+0x502>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800201e:	d106      	bne.n	800202e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800202a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800202c:	e01e      	b.n	800206c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d11a      	bne.n	800206c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800203e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002040:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002042:	e013      	b.n	800206c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002056:	e00a      	b.n	800206e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800206a:	e000      	b.n	800206e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800206c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002076:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800207a:	4618      	mov	r0, r3
 800207c:	376c      	adds	r7, #108	@ 0x6c
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d126      	bne.n	80020f8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d115      	bne.n	80020f0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fadb 	bl	80016ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020f6:	e004      	b.n	8002102 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fad1 	bl	80016c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff fac1 	bl	80016d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <ADC_Enable+0x2c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <ADC_Enable+0x2c>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <ADC_Enable+0x2e>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d143      	bne.n	8002216 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <ADC_Enable+0xc4>)
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e02f      	b.n	8002218 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021c8:	f7ff fa64 	bl	8001694 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ce:	e01b      	b.n	8002208 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d0:	f7ff fa60 	bl	8001694 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d914      	bls.n	8002208 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d00d      	beq.n	8002208 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d1dc      	bne.n	80021d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	8000003f 	.word	0x8000003f

08002224 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <ADC_Disable+0x2c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <ADC_Disable+0x2c>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <ADC_Disable+0x2e>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d047      	beq.n	80022e6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030d 	and.w	r3, r3, #13
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10f      	bne.n	8002284 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0202 	orr.w	r2, r2, #2
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2203      	movs	r2, #3
 800227a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800227c:	f7ff fa0a 	bl	8001694 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002282:	e029      	b.n	80022d8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0210 	orr.w	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e023      	b.n	80022e8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022a0:	f7ff f9f8 	bl	8001694 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d914      	bls.n	80022d8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10d      	bne.n	80022d8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d0dc      	beq.n	80022a0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800231c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	@ (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	@ (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	@ (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	@ 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	@ (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff29 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff3e 	bl	8002338 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff8e 	bl	80023e4 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5d 	bl	8002390 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e014      	b.n	800254e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7fe fe91 	bl	800125c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	795b      	ldrb	r3, [r3, #5]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_DAC_Start+0x16>
 8002568:	2302      	movs	r3, #2
 800256a:	e025      	b.n	80025b8 <HAL_DAC_Start+0x62>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	409a      	lsls	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002596:	2b3c      	cmp	r3, #60	@ 0x3c
 8002598:	d107      	bne.n	80025aa <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	795b      	ldrb	r3, [r3, #5]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_DAC_ConfigChannel+0x20>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e036      	b.n	8002652 <HAL_DAC_ConfigChannel+0x8e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2202      	movs	r2, #2
 80025ee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025f8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4013      	ands	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	22c0      	movs	r2, #192	@ 0xc0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e037      	b.n	80026e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800268a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800268e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f940 	bl	800294c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_DMA_Start_IT+0x20>
 8002708:	2302      	movs	r3, #2
 800270a:	e04a      	b.n	80027a2 <HAL_DMA_Start_IT+0xb6>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800271a:	2b01      	cmp	r3, #1
 800271c:	d13a      	bne.n	8002794 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8d4 	bl	80028f0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 020e 	orr.w	r2, r2, #14
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e00f      	b.n	8002782 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 020a 	orr.w	r2, r2, #10
 8002770:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0204 	bic.w	r2, r2, #4
 8002780:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e005      	b.n	80027a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800279c:	2302      	movs	r3, #2
 800279e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d024      	beq.n	800281c <HAL_DMA_IRQHandler+0x72>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01f      	beq.n	800281c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0204 	bic.w	r2, r2, #4
 80027f8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002802:	2104      	movs	r1, #4
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800281a:	e065      	b.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	2202      	movs	r2, #2
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02c      	beq.n	8002886 <HAL_DMA_IRQHandler+0xdc>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d027      	beq.n	8002886 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020a 	bic.w	r2, r2, #10
 8002852:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	2102      	movs	r1, #2
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d035      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002884:	e030      	b.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d028      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d023      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020e 	bic.w	r2, r2, #14
 80028ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
    }
  }
}
 80028e6:	e7ff      	b.n	80028e8 <HAL_DMA_IRQHandler+0x13e>
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002906:	2101      	movs	r1, #1
 8002908:	fa01 f202 	lsl.w	r2, r1, r2
 800290c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b10      	cmp	r3, #16
 800291c:	d108      	bne.n	8002930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292e:	e007      	b.n	8002940 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <DMA_CalcBaseAndBitshift+0x34>)
 800295c:	4413      	add	r3, r2
 800295e:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <DMA_CalcBaseAndBitshift+0x38>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <DMA_CalcBaseAndBitshift+0x3c>)
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	bffdfff8 	.word	0xbffdfff8
 8002984:	cccccccd 	.word	0xcccccccd
 8002988:	40020000 	.word	0x40020000

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299a:	e14e      	b.n	8002c3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8140 	beq.w	8002c34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d005      	beq.n	80029cc <HAL_GPIO_Init+0x40>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d130      	bne.n	8002a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a02:	2201      	movs	r2, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0201 	and.w	r2, r3, #1
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d017      	beq.n	8002a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d123      	bne.n	8002abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	6939      	ldr	r1, [r7, #16]
 8002aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0203 	and.w	r2, r3, #3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 809a 	beq.w	8002c34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b00:	4b55      	ldr	r3, [pc, #340]	@ (8002c58 <HAL_GPIO_Init+0x2cc>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	4a54      	ldr	r2, [pc, #336]	@ (8002c58 <HAL_GPIO_Init+0x2cc>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6193      	str	r3, [r2, #24]
 8002b0c:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <HAL_GPIO_Init+0x2cc>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b18:	4a50      	ldr	r2, [pc, #320]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b42:	d013      	beq.n	8002b6c <HAL_GPIO_Init+0x1e0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a46      	ldr	r2, [pc, #280]	@ (8002c60 <HAL_GPIO_Init+0x2d4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_GPIO_Init+0x1dc>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a45      	ldr	r2, [pc, #276]	@ (8002c64 <HAL_GPIO_Init+0x2d8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <HAL_GPIO_Init+0x1d8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a44      	ldr	r2, [pc, #272]	@ (8002c68 <HAL_GPIO_Init+0x2dc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_GPIO_Init+0x1d4>
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e006      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b60:	2305      	movs	r3, #5
 8002b62:	e004      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e002      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_GPIO_Init+0x1e2>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	f002 0203 	and.w	r2, r2, #3
 8002b74:	0092      	lsls	r2, r2, #2
 8002b76:	4093      	lsls	r3, r2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b7e:	4937      	ldr	r1, [pc, #220]	@ (8002c5c <HAL_GPIO_Init+0x2d0>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8c:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bda:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be0:	4b22      	ldr	r3, [pc, #136]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c04:	4a19      	ldr	r2, [pc, #100]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <HAL_GPIO_Init+0x2e0>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3301      	adds	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f aea9 	bne.w	800299c <HAL_GPIO_Init+0x10>
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	48000400 	.word	0x48000400
 8002c64:	48000800 	.word	0x48000800
 8002c68:	48000c00 	.word	0x48000c00
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e001      	b.n	8002c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce6:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f806 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f001 b823 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 817d 	beq.w	800304e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d54:	4bbc      	ldr	r3, [pc, #752]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d00c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d60:	4bb9      	ldr	r3, [pc, #740]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d15c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x10e>
 8002d6c:	4bb6      	ldr	r3, [pc, #728]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d78:	d155      	bne.n	8002e26 <HAL_RCC_OscConfig+0x10e>
 8002d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d7e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x94>
 8002da6:	4ba8      	ldr	r3, [pc, #672]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	e015      	b.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002dac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002dc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002dc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002dd4:	4b9c      	ldr	r3, [pc, #624]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ddc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002de0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002de4:	fa92 f2a2 	rbit	r2, r2
 8002de8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002dec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 811f 	beq.w	800304c <HAL_RCC_OscConfig+0x334>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8116 	bne.w	800304c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f000 bfaf 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12e>
 8002e38:	4b83      	ldr	r3, [pc, #524]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a82      	ldr	r2, [pc, #520]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e036      	b.n	8002eb4 <HAL_RCC_OscConfig+0x19c>
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x158>
 8002e56:	4b7c      	ldr	r3, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7b      	ldr	r2, [pc, #492]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b79      	ldr	r3, [pc, #484]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a78      	ldr	r2, [pc, #480]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e021      	b.n	8002eb4 <HAL_RCC_OscConfig+0x19c>
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x184>
 8002e82:	4b71      	ldr	r3, [pc, #452]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a70      	ldr	r2, [pc, #448]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6d      	ldr	r2, [pc, #436]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x19c>
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b67      	ldr	r3, [pc, #412]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a66      	ldr	r2, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb4:	4b64      	ldr	r3, [pc, #400]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f023 020f 	bic.w	r2, r3, #15
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	495f      	ldr	r1, [pc, #380]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d059      	beq.n	8002f92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe fbd9 	bl	8001694 <HAL_GetTick>
 8002ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fbd4 	bl	8001694 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	@ 0x64
 8002ef6:	d902      	bls.n	8002efe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	f000 bf43 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 8002efe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f02:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002f12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0x218>
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e015      	b.n	8002f5c <HAL_RCC_OscConfig+0x244>
 8002f30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f34:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002f44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f48:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002f4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f60:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002f64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002f70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002f74:	fab2 f282 	clz	r2, r2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f002 021f 	and.w	r2, r2, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ab      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1d0>
 8002f90:	e05d      	b.n	800304e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe fb7f 	bl	8001694 <HAL_GetTick>
 8002f96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fb7a 	bl	8001694 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	@ 0x64
 8002faa:	d902      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	f000 bee9 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 8002fb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002fc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2cc>
 8002fde:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e015      	b.n	8003010 <HAL_RCC_OscConfig+0x2f8>
 8002fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ffc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003000:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_RCC_OscConfig+0x330>)
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003014:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003018:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003024:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f042 0220 	orr.w	r2, r2, #32
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ab      	bne.n	8002f9c <HAL_RCC_OscConfig+0x284>
 8003044:	e003      	b.n	800304e <HAL_RCC_OscConfig+0x336>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 817d 	beq.w	800335e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003064:	4ba6      	ldr	r3, [pc, #664]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003070:	4ba3      	ldr	r3, [pc, #652]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d172      	bne.n	8003162 <HAL_RCC_OscConfig+0x44a>
 800307c:	4ba0      	ldr	r3, [pc, #640]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d16c      	bne.n	8003162 <HAL_RCC_OscConfig+0x44a>
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800309a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0x3a0>
 80030b2:	4b93      	ldr	r3, [pc, #588]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e013      	b.n	80030e0 <HAL_RCC_OscConfig+0x3c8>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80030d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80030dc:	4b88      	ldr	r3, [pc, #544]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2202      	movs	r2, #2
 80030e2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80030e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80030f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f042 0220 	orr.w	r2, r2, #32
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCC_OscConfig+0x410>
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f000 be2e 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b75      	ldr	r3, [pc, #468]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	21f8      	movs	r1, #248	@ 0xf8
 800313e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003146:	fa91 f1a1 	rbit	r1, r1
 800314a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800314e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003152:	fab1 f181 	clz	r1, r1
 8003156:	b2c9      	uxtb	r1, r1
 8003158:	408b      	lsls	r3, r1
 800315a:	4969      	ldr	r1, [pc, #420]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003160:	e0fd      	b.n	800335e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8088 	beq.w	8003284 <HAL_RCC_OscConfig+0x56c>
 8003174:	2301      	movs	r3, #1
 8003176:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003186:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003194:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	461a      	mov	r2, r3
 800319c:	2301      	movs	r3, #1
 800319e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fa78 	bl	8001694 <HAL_GetTick>
 80031a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031aa:	f7fe fa73 	bl	8001694 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	f000 bde2 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80031d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4d8>
 80031ea:	4b45      	ldr	r3, [pc, #276]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e013      	b.n	8003218 <HAL_RCC_OscConfig+0x500>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003202:	2302      	movs	r3, #2
 8003204:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003208:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003214:	4b3a      	ldr	r3, [pc, #232]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	2202      	movs	r2, #2
 800321a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800321e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003222:	fa92 f2a2 	rbit	r2, r2
 8003226:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800322a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0af      	beq.n	80031aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	21f8      	movs	r1, #248	@ 0xf8
 8003260:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003268:	fa91 f1a1 	rbit	r1, r1
 800326c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003270:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003274:	fab1 f181 	clz	r1, r1
 8003278:	b2c9      	uxtb	r1, r1
 800327a:	408b      	lsls	r3, r1
 800327c:	4920      	ldr	r1, [pc, #128]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
 8003282:	e06c      	b.n	800335e <HAL_RCC_OscConfig+0x646>
 8003284:	2301      	movs	r3, #1
 8003286:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe f9f0 	bl	8001694 <HAL_GetTick>
 80032b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe f9eb 	bl	8001694 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d902      	bls.n	80032d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	f000 bd5a 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 80032d0:	2302      	movs	r3, #2
 80032d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80032e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d104      	bne.n	8003304 <HAL_RCC_OscConfig+0x5ec>
 80032fa:	4b01      	ldr	r3, [pc, #4]	@ (8003300 <HAL_RCC_OscConfig+0x5e8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x614>
 8003300:	40021000 	.word	0x40021000
 8003304:	2302      	movs	r3, #2
 8003306:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003316:	2302      	movs	r3, #2
 8003318:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800331c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003328:	4bc8      	ldr	r3, [pc, #800]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	2202      	movs	r2, #2
 800332e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003332:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003336:	fa92 f2a2 	rbit	r2, r2
 800333a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800333e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003342:	fab2 f282 	clz	r2, r2
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f002 021f 	and.w	r2, r2, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ad      	bne.n	80032ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8110 	beq.w	8003594 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003378:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d079      	beq.n	8003478 <HAL_RCC_OscConfig+0x760>
 8003384:	2301      	movs	r3, #1
 8003386:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	4bab      	ldr	r3, [pc, #684]	@ (8003650 <HAL_RCC_OscConfig+0x938>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe f971 	bl	8001694 <HAL_GetTick>
 80033b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe f96c 	bl	8001694 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d902      	bls.n	80033ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f000 bcdb 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 80033ce:	2302      	movs	r3, #2
 80033d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800340c:	2202      	movs	r2, #2
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fa93 f2a3 	rbit	r2, r3
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003426:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003428:	4b88      	ldr	r3, [pc, #544]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 800342a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003434:	2102      	movs	r1, #2
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f1a3 	rbit	r1, r3
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800344e:	6019      	str	r1, [r3, #0]
  return result;
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0a0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x6a0>
 8003476:	e08d      	b.n	8003594 <HAL_RCC_OscConfig+0x87c>
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fa93 f2a3 	rbit	r2, r3
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800349a:	601a      	str	r2, [r3, #0]
  return result;
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b68      	ldr	r3, [pc, #416]	@ (8003650 <HAL_RCC_OscConfig+0x938>)
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe f8eb 	bl	8001694 <HAL_GetTick>
 80034be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe f8e6 	bl	8001694 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d902      	bls.n	80034da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f000 bc55 	b.w	8003d84 <HAL_RCC_OscConfig+0x106c>
 80034da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003502:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003506:	2202      	movs	r2, #2
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800352a:	2202      	movs	r2, #2
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003544:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003546:	4b41      	ldr	r3, [pc, #260]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 8003548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003552:	2102      	movs	r1, #2
 8003554:	6019      	str	r1, [r3, #0]
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f1a3 	rbit	r1, r3
 8003564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003568:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800356c:	6019      	str	r1, [r3, #0]
  return result;
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d197      	bne.n	80034c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 81a1 	beq.w	80038ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b0:	4b26      	ldr	r3, [pc, #152]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b23      	ldr	r3, [pc, #140]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
 80035c8:	4b20      	ldr	r3, [pc, #128]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80035d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035de:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <HAL_RCC_OscConfig+0x93c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11a      	bne.n	800362c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <HAL_RCC_OscConfig+0x93c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <HAL_RCC_OscConfig+0x93c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe f847 	bl	8001694 <HAL_GetTick>
 8003606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	e009      	b.n	8003620 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe f842 	bl	8001694 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	@ 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e3b1      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <HAL_RCC_OscConfig+0x93c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10d      	bne.n	8003658 <HAL_RCC_OscConfig+0x940>
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a02      	ldr	r2, [pc, #8]	@ (800364c <HAL_RCC_OscConfig+0x934>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e03c      	b.n	80036c4 <HAL_RCC_OscConfig+0x9ac>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	10908120 	.word	0x10908120
 8003654:	40007000 	.word	0x40007000
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10c      	bne.n	8003682 <HAL_RCC_OscConfig+0x96a>
 8003668:	4bc1      	ldr	r3, [pc, #772]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4ac0      	ldr	r2, [pc, #768]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	4bbe      	ldr	r3, [pc, #760]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4abd      	ldr	r2, [pc, #756]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	e020      	b.n	80036c4 <HAL_RCC_OscConfig+0x9ac>
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x994>
 8003692:	4bb7      	ldr	r3, [pc, #732]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4ab6      	ldr	r2, [pc, #728]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4bb4      	ldr	r3, [pc, #720]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4ab3      	ldr	r2, [pc, #716]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0x9ac>
 80036ac:	4bb0      	ldr	r3, [pc, #704]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4aaf      	ldr	r2, [pc, #700]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	4bad      	ldr	r3, [pc, #692]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4aac      	ldr	r2, [pc, #688]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8081 	beq.w	80037d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fd ffdd 	bl	8001694 <HAL_GetTick>
 80036da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fd ffd8 	bl	8001694 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e345      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003700:	2202      	movs	r2, #2
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fa93 f2a3 	rbit	r2, r3
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800373e:	601a      	str	r2, [r3, #0]
  return result;
 8003740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003744:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003748:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d102      	bne.n	8003764 <HAL_RCC_OscConfig+0xa4c>
 800375e:	4b84      	ldr	r3, [pc, #528]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	e013      	b.n	800378c <HAL_RCC_OscConfig+0xa74>
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800376c:	2202      	movs	r2, #2
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	4b79      	ldr	r3, [pc, #484]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003790:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003794:	2102      	movs	r1, #2
 8003796:	6011      	str	r1, [r2, #0]
 8003798:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800379c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	fa92 f1a2 	rbit	r1, r2
 80037a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80037ae:	6011      	str	r1, [r2, #0]
  return result;
 80037b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037b4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	fab2 f282 	clz	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f002 021f 	and.w	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d084      	beq.n	80036e0 <HAL_RCC_OscConfig+0x9c8>
 80037d6:	e07f      	b.n	80038d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fd ff5c 	bl	8001694 <HAL_GetTick>
 80037dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fd ff57 	bl	8001694 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e2c4      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
 80037fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003802:	2202      	movs	r2, #2
 8003804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003818:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003822:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003826:	2202      	movs	r2, #2
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003840:	601a      	str	r2, [r3, #0]
  return result;
 8003842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003846:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800384a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d102      	bne.n	8003866 <HAL_RCC_OscConfig+0xb4e>
 8003860:	4b43      	ldr	r3, [pc, #268]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	e013      	b.n	800388e <HAL_RCC_OscConfig+0xb76>
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800386e:	2202      	movs	r2, #2
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003884:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003892:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003896:	2102      	movs	r1, #2
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	fa92 f1a2 	rbit	r1, r2
 80038a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80038b0:	6011      	str	r1, [r2, #0]
  return result;
 80038b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f002 021f 	and.w	r2, r2, #31
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d184      	bne.n	80037e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b23      	ldr	r3, [pc, #140]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8242 	beq.w	8003d82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <HAL_RCC_OscConfig+0xc58>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	f000 8213 	beq.w	8003d32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b02      	cmp	r3, #2
 800391a:	f040 8162 	bne.w	8003be2 <HAL_RCC_OscConfig+0xeca>
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003926:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003942:	601a      	str	r2, [r3, #0]
  return result;
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800394c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003958:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fd fe96 	bl	8001694 <HAL_GetTick>
 8003968:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396c:	e00c      	b.n	8003988 <HAL_RCC_OscConfig+0xc70>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd fe8e 	bl	8001694 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e1fd      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80039ac:	601a      	str	r2, [r3, #0]
  return result;
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80039b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_OscConfig+0xcba>
 80039cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	e027      	b.n	8003a22 <HAL_RCC_OscConfig+0xd0a>
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a18:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a26:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003a2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a2e:	6011      	str	r1, [r2, #0]
 8003a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a34:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	fa92 f1a2 	rbit	r1, r2
 8003a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a42:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a46:	6011      	str	r1, [r2, #0]
  return result;
 8003a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a4c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f042 0220 	orr.w	r2, r2, #32
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f002 021f 	and.w	r2, r2, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d182      	bne.n	8003974 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6e:	4b88      	ldr	r3, [pc, #544]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	497f      	ldr	r1, [pc, #508]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
 8003a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	fa93 f2a3 	rbit	r2, r3
 8003ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003aba:	601a      	str	r2, [r3, #0]
  return result;
 8003abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ac4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ad0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fd fdda 	bl	8001694 <HAL_GetTick>
 8003ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae4:	e009      	b.n	8003afa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd fdd5 	bl	8001694 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e144      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
 8003afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b1e:	601a      	str	r2, [r3, #0]
  return result;
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_OscConfig+0xe2c>
 8003b3e:	4b54      	ldr	r3, [pc, #336]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e027      	b.n	8003b94 <HAL_RCC_OscConfig+0xe7c>
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	fa93 f2a3 	rbit	r2, r3
 8003b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b98:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003b9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ba6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	fa92 f1a2 	rbit	r1, r2
 8003bb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bb4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003bb8:	6011      	str	r1, [r2, #0]
  return result;
 8003bba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bbe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d082      	beq.n	8003ae6 <HAL_RCC_OscConfig+0xdce>
 8003be0:	e0cf      	b.n	8003d82 <HAL_RCC_OscConfig+0x106a>
 8003be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003bea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	fa93 f2a3 	rbit	r2, r3
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c06:	601a      	str	r2, [r3, #0]
  return result;
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003c10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd fd34 	bl	8001694 <HAL_GetTick>
 8003c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	e009      	b.n	8003c46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fd fd2f 	bl	8001694 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e09e      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c6a:	601a      	str	r2, [r3, #0]
  return result;
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d104      	bne.n	8003c94 <HAL_RCC_OscConfig+0xf7c>
 8003c8a:	4b01      	ldr	r3, [pc, #4]	@ (8003c90 <HAL_RCC_OscConfig+0xf78>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	e029      	b.n	8003ce4 <HAL_RCC_OscConfig+0xfcc>
 8003c90:	40021000 	.word	0x40021000
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ccc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cda:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <HAL_RCC_OscConfig+0x1078>)
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ce8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003cec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cf6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	fa92 f1a2 	rbit	r1, r2
 8003d00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d08:	6011      	str	r1, [r2, #0]
  return result;
 8003d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d0e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f042 0220 	orr.w	r2, r2, #32
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f002 021f 	and.w	r2, r2, #31
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d180      	bne.n	8003c32 <HAL_RCC_OscConfig+0xf1a>
 8003d30:	e027      	b.n	8003d82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e01e      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_RCC_OscConfig+0x1078>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b09e      	sub	sp, #120	@ 0x78
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e162      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b90      	ldr	r3, [pc, #576]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d910      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b8d      	ldr	r3, [pc, #564]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0207 	bic.w	r2, r3, #7
 8003dc2:	498b      	ldr	r1, [pc, #556]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b89      	ldr	r3, [pc, #548]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e14a      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	497f      	ldr	r1, [pc, #508]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80dc 	beq.w	8003fc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d13c      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xf6>
 8003e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xa6>
 8003e34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	e00f      	b.n	8003e5a <HAL_RCC_ClockConfig+0xc6>
 8003e3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e56:	4b67      	ldr	r3, [pc, #412]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e62:	fa92 f2a2 	rbit	r2, r2
 8003e66:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003e68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e6a:	fab2 f282 	clz	r2, r2
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f002 021f 	and.w	r2, r2, #31
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d17b      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0f3      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d13c      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x178>
 8003e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x128>
 8003eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e00f      	b.n	8003edc <HAL_RCC_ClockConfig+0x148>
 8003ebc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed8:	4b46      	ldr	r3, [pc, #280]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ee4:	fa92 f2a2 	rbit	r2, r2
 8003ee8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f002 021f 	and.w	r2, r2, #31
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13a      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0b2      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x1a0>
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	e00d      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1bc>
 8003f34:	2302      	movs	r3, #2
 8003f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f40:	2302      	movs	r3, #2
 8003f42:	623b      	str	r3, [r7, #32]
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	2202      	movs	r2, #2
 8003f52:	61ba      	str	r2, [r7, #24]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	fa92 f2a2 	rbit	r2, r2
 8003f5a:	617a      	str	r2, [r7, #20]
  return result;
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	fab2 f282 	clz	r2, r2
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f002 021f 	and.w	r2, r2, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e079      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	491a      	ldr	r1, [pc, #104]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f90:	f7fd fb80 	bl	8001694 <HAL_GetTick>
 8003f94:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fd fb7c 	bl	8001694 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e061      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d214      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 0207 	bic.w	r2, r3, #7
 8003fd6:	4906      	ldr	r1, [pc, #24]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <HAL_RCC_ClockConfig+0x25c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e040      	b.n	8004072 <HAL_RCC_ClockConfig+0x2de>
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_RCC_ClockConfig+0x2e8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	491a      	ldr	r1, [pc, #104]	@ (800407c <HAL_RCC_ClockConfig+0x2e8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004022:	4b16      	ldr	r3, [pc, #88]	@ (800407c <HAL_RCC_ClockConfig+0x2e8>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4912      	ldr	r1, [pc, #72]	@ (800407c <HAL_RCC_ClockConfig+0x2e8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004036:	f000 f829 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800403a:	4601      	mov	r1, r0
 800403c:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <HAL_RCC_ClockConfig+0x2e8>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004044:	22f0      	movs	r2, #240	@ 0xf0
 8004046:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	fa92 f2a2 	rbit	r2, r2
 800404e:	60fa      	str	r2, [r7, #12]
  return result;
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	fab2 f282 	clz	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	40d3      	lsrs	r3, r2
 800405a:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x2ec>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	fa21 f303 	lsr.w	r3, r1, r3
 8004062:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <HAL_RCC_ClockConfig+0x2f0>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004066:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <HAL_RCC_ClockConfig+0x2f4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd face 	bl	800160c <HAL_InitTick>
  
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3778      	adds	r7, #120	@ 0x78
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	08009440 	.word	0x08009440
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x30>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x36>
 80040ba:	e026      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	e026      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0c9b      	lsrs	r3, r3, #18
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a17      	ldr	r2, [pc, #92]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80040d0:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	4a14      	ldr	r2, [pc, #80]	@ (800412c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e004      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
      break;
 8004108:	e002      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 800410c:	613b      	str	r3, [r7, #16]
      break;
 800410e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004110:	693b      	ldr	r3, [r7, #16]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	08009458 	.word	0x08009458
 800412c:	08009468 	.word	0x08009468
 8004130:	003d0900 	.word	0x003d0900

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004152:	f7ff ffef 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004156:	4601      	mov	r1, r0
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004160:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004164:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	fa92 f2a2 	rbit	r2, r2
 800416c:	603a      	str	r2, [r7, #0]
  return result;
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	fab2 f282 	clz	r2, r2
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	40d3      	lsrs	r3, r2
 8004178:	4a04      	ldr	r2, [pc, #16]	@ (800418c <HAL_RCC_GetPCLK1Freq+0x40>)
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	08009450 	.word	0x08009450

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004196:	f7ff ffcd 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 800419a:	4601      	mov	r1, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80041a4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80041a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	fa92 f2a2 	rbit	r2, r2
 80041b0:	603a      	str	r2, [r7, #0]
  return result;
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	fab2 f282 	clz	r2, r2
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	40d3      	lsrs	r3, r2
 80041bc:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	08009450 	.word	0x08009450

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b092      	sub	sp, #72	@ 0x48
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80d4 	beq.w	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f8:	4b4e      	ldr	r3, [pc, #312]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10e      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b4b      	ldr	r3, [pc, #300]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4a4a      	ldr	r2, [pc, #296]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420e:	61d3      	str	r3, [r2, #28]
 8004210:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a41      	ldr	r2, [pc, #260]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004238:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7fd fa2b 	bl	8001694 <HAL_GetTick>
 800423e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	e008      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7fd fa27 	bl	8001694 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b64      	cmp	r3, #100	@ 0x64
 800424e:	d901      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e14b      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004260:	4b34      	ldr	r3, [pc, #208]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8084 	beq.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800427c:	429a      	cmp	r2, r3
 800427e:	d07c      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004280:	4b2c      	ldr	r3, [pc, #176]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800428e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	461a      	mov	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	461a      	mov	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042d2:	4a18      	ldr	r2, [pc, #96]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04b      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fd f9d7 	bl	8001694 <HAL_GetTick>
 80042e6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd f9d3 	bl	8001694 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0f5      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004300:	2302      	movs	r3, #2
 8004302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24
 800430c:	2302      	movs	r3, #2
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	61fb      	str	r3, [r7, #28]
  return result;
 8004318:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d108      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800432e:	4b01      	ldr	r3, [pc, #4]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	e00d      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
 800433c:	10908100 	.word	0x10908100
 8004340:	2302      	movs	r3, #2
 8004342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2202      	movs	r2, #2
 8004352:	613a      	str	r2, [r7, #16]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	fa92 f2a2 	rbit	r2, r2
 800435a:	60fa      	str	r2, [r7, #12]
  return result;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	fab2 f282 	clz	r2, r2
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f002 021f 	and.w	r2, r2, #31
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0b7      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800437a:	4b5e      	ldr	r3, [pc, #376]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	495b      	ldr	r1, [pc, #364]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004388:	4313      	orrs	r3, r2
 800438a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800438c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b57      	ldr	r3, [pc, #348]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4a56      	ldr	r2, [pc, #344]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800439e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ac:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	f023 0203 	bic.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	494e      	ldr	r1, [pc, #312]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ca:	4b4a      	ldr	r3, [pc, #296]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4947      	ldr	r1, [pc, #284]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043e8:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	493f      	ldr	r1, [pc, #252]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004406:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f023 0220 	bic.w	r2, r3, #32
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4938      	ldr	r1, [pc, #224]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004414:	4313      	orrs	r3, r2
 8004416:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004424:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	4930      	ldr	r1, [pc, #192]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004432:	4313      	orrs	r3, r2
 8004434:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004442:	4b2c      	ldr	r3, [pc, #176]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4929      	ldr	r1, [pc, #164]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004460:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	4921      	ldr	r1, [pc, #132]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800446e:	4313      	orrs	r3, r2
 8004470:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	491a      	ldr	r1, [pc, #104]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800448c:	4313      	orrs	r3, r2
 800448e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	4912      	ldr	r1, [pc, #72]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	490b      	ldr	r1, [pc, #44]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3748      	adds	r7, #72	@ 0x48
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000

080044f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e040      	b.n	800458c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fedc 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	@ 0x24
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9e8 	bl	8004914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8af 	bl	80046a8 <UART_SetConfig>
 800454a:	4603      	mov	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e01b      	b.n	800458c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa67 	bl	8004a58 <UART_CheckIdleState>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	@ 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d177      	bne.n	800469c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x24>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e070      	b.n	800469e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2221      	movs	r2, #33	@ 0x21
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd f863 	bl	8001694 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e8:	d108      	bne.n	80045fc <HAL_UART_Transmit+0x68>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	e003      	b.n	8004604 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004604:	e02f      	b.n	8004666 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	@ 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fac9 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e03b      	b.n	800469e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	881a      	ldrh	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	b292      	uxth	r2, r2
 800463a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	3302      	adds	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e007      	b.n	8004654 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1c9      	bne.n	8004606 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	@ 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fa93 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e005      	b.n	800469e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b8a      	ldr	r3, [pc, #552]	@ (80048fc <UART_SetConfig+0x254>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	6979      	ldr	r1, [r7, #20]
 80046dc:	430b      	orrs	r3, r1
 80046de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a78      	ldr	r2, [pc, #480]	@ (8004900 <UART_SetConfig+0x258>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d120      	bne.n	8004766 <UART_SetConfig+0xbe>
 8004724:	4b77      	ldr	r3, [pc, #476]	@ (8004904 <UART_SetConfig+0x25c>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b03      	cmp	r3, #3
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0xb8>
 8004730:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x90>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004749 	.word	0x08004749
 800473c:	08004755 	.word	0x08004755
 8004740:	0800475b 	.word	0x0800475b
 8004744:	0800474f 	.word	0x0800474f
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e01d      	b.n	800478a <UART_SetConfig+0xe2>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e01a      	b.n	800478a <UART_SetConfig+0xe2>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e017      	b.n	800478a <UART_SetConfig+0xe2>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e014      	b.n	800478a <UART_SetConfig+0xe2>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e011      	b.n	800478a <UART_SetConfig+0xe2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a67      	ldr	r2, [pc, #412]	@ (8004908 <UART_SetConfig+0x260>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d102      	bne.n	8004776 <UART_SetConfig+0xce>
 8004770:	2300      	movs	r3, #0
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e009      	b.n	800478a <UART_SetConfig+0xe2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a64      	ldr	r2, [pc, #400]	@ (800490c <UART_SetConfig+0x264>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d102      	bne.n	8004786 <UART_SetConfig+0xde>
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e001      	b.n	800478a <UART_SetConfig+0xe2>
 8004786:	2310      	movs	r3, #16
 8004788:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004792:	d15a      	bne.n	800484a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004794:	7ffb      	ldrb	r3, [r7, #31]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d827      	bhi.n	80047ea <UART_SetConfig+0x142>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <UART_SetConfig+0xf8>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	080047eb 	.word	0x080047eb
 80047b0:	080047db 	.word	0x080047db
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	080047eb 	.word	0x080047eb
 80047bc:	080047eb 	.word	0x080047eb
 80047c0:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7ff fcc2 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80047c8:	61b8      	str	r0, [r7, #24]
        break;
 80047ca:	e013      	b.n	80047f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7ff fce0 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 80047d0:	61b8      	str	r0, [r7, #24]
        break;
 80047d2:	e00f      	b.n	80047f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <UART_SetConfig+0x268>)
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e00c      	b.n	80047f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7ff fc57 	bl	800408c <HAL_RCC_GetSysClockFreq>
 80047de:	61b8      	str	r0, [r7, #24]
        break;
 80047e0:	e008      	b.n	80047f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e6:	61bb      	str	r3, [r7, #24]
        break;
 80047e8:	e004      	b.n	80047f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	77bb      	strb	r3, [r7, #30]
        break;
 80047f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d074      	beq.n	80048e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	005a      	lsls	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0f      	cmp	r3, #15
 8004814:	d916      	bls.n	8004844 <UART_SetConfig+0x19c>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800481c:	d212      	bcs.n	8004844 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f023 030f 	bic.w	r3, r3, #15
 8004826:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	b29a      	uxth	r2, r3
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	4313      	orrs	r3, r2
 8004838:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	89fa      	ldrh	r2, [r7, #14]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e04f      	b.n	80048e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	77bb      	strb	r3, [r7, #30]
 8004848:	e04c      	b.n	80048e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800484a:	7ffb      	ldrb	r3, [r7, #31]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d828      	bhi.n	80048a2 <UART_SetConfig+0x1fa>
 8004850:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0x1b0>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800487d 	.word	0x0800487d
 800485c:	08004885 	.word	0x08004885
 8004860:	0800488d 	.word	0x0800488d
 8004864:	080048a3 	.word	0x080048a3
 8004868:	08004893 	.word	0x08004893
 800486c:	080048a3 	.word	0x080048a3
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048a3 	.word	0x080048a3
 8004878:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7ff fc66 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8004880:	61b8      	str	r0, [r7, #24]
        break;
 8004882:	e013      	b.n	80048ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7ff fc84 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8004888:	61b8      	str	r0, [r7, #24]
        break;
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <UART_SetConfig+0x268>)
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e00c      	b.n	80048ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7ff fbfb 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004896:	61b8      	str	r0, [r7, #24]
        break;
 8004898:	e008      	b.n	80048ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489e:	61bb      	str	r3, [r7, #24]
        break;
 80048a0:	e004      	b.n	80048ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	77bb      	strb	r3, [r7, #30]
        break;
 80048aa:	bf00      	nop
    }

    if (pclk != 0U)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085a      	lsrs	r2, r3, #1
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	441a      	add	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d909      	bls.n	80048e0 <UART_SetConfig+0x238>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d2:	d205      	bcs.n	80048e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	e001      	b.n	80048e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	efff69f3 	.word	0xefff69f3
 8004900:	40013800 	.word	0x40013800
 8004904:	40021000 	.word	0x40021000
 8004908:	40004400 	.word	0x40004400
 800490c:	40004800 	.word	0x40004800
 8004910:	007a1200 	.word	0x007a1200

08004914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a12:	d10a      	bne.n	8004a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b098      	sub	sp, #96	@ 0x60
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a68:	f7fc fe14 	bl	8001694 <HAL_GetTick>
 8004a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d12e      	bne.n	8004ada <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f88c 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d021      	beq.n	8004ada <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e062      	b.n	8004ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d149      	bne.n	8004b7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f856 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03c      	beq.n	8004b7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	617b      	str	r3, [r7, #20]
   return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e011      	b.n	8004ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3758      	adds	r7, #88	@ 0x58
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb8:	e04f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d04b      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fc fd67 	bl	8001694 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e04e      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d037      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b80      	cmp	r3, #128	@ 0x80
 8004bee:	d034      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d031      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d110      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f838 	bl	8004c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2208      	movs	r2, #8
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e029      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c34:	d111      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f81e 	bl	8004c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e00f      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d0a0      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b095      	sub	sp, #84	@ 0x54
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004caa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d118      	bne.n	8004d2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0310 	bic.w	r3, r3, #16
 8004d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	613b      	str	r3, [r7, #16]
   return(result);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d3e:	bf00      	nop
 8004d40:	3754      	adds	r7, #84	@ 0x54
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <__cvt>:
 8004d4a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4e:	ec57 6b10 	vmov	r6, r7, d0
 8004d52:	2f00      	cmp	r7, #0
 8004d54:	460c      	mov	r4, r1
 8004d56:	4619      	mov	r1, r3
 8004d58:	463b      	mov	r3, r7
 8004d5a:	bfbb      	ittet	lt
 8004d5c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d60:	461f      	movlt	r7, r3
 8004d62:	2300      	movge	r3, #0
 8004d64:	232d      	movlt	r3, #45	@ 0x2d
 8004d66:	700b      	strb	r3, [r1, #0]
 8004d68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d6a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d6e:	4691      	mov	r9, r2
 8004d70:	f023 0820 	bic.w	r8, r3, #32
 8004d74:	bfbc      	itt	lt
 8004d76:	4632      	movlt	r2, r6
 8004d78:	4616      	movlt	r6, r2
 8004d7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d7e:	d005      	beq.n	8004d8c <__cvt+0x42>
 8004d80:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d84:	d100      	bne.n	8004d88 <__cvt+0x3e>
 8004d86:	3401      	adds	r4, #1
 8004d88:	2102      	movs	r1, #2
 8004d8a:	e000      	b.n	8004d8e <__cvt+0x44>
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	ab03      	add	r3, sp, #12
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	ab02      	add	r3, sp, #8
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	ec47 6b10 	vmov	d0, r6, r7
 8004d9a:	4653      	mov	r3, sl
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	f001 f873 	bl	8005e88 <_dtoa_r>
 8004da2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004da6:	4605      	mov	r5, r0
 8004da8:	d119      	bne.n	8004dde <__cvt+0x94>
 8004daa:	f019 0f01 	tst.w	r9, #1
 8004dae:	d00e      	beq.n	8004dce <__cvt+0x84>
 8004db0:	eb00 0904 	add.w	r9, r0, r4
 8004db4:	2200      	movs	r2, #0
 8004db6:	2300      	movs	r3, #0
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dc0:	b108      	cbz	r0, 8004dc6 <__cvt+0x7c>
 8004dc2:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dc6:	2230      	movs	r2, #48	@ 0x30
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	454b      	cmp	r3, r9
 8004dcc:	d31e      	bcc.n	8004e0c <__cvt+0xc2>
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dd2:	1b5b      	subs	r3, r3, r5
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	b004      	add	sp, #16
 8004dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dde:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004de2:	eb00 0904 	add.w	r9, r0, r4
 8004de6:	d1e5      	bne.n	8004db4 <__cvt+0x6a>
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	2b30      	cmp	r3, #48	@ 0x30
 8004dec:	d10a      	bne.n	8004e04 <__cvt+0xba>
 8004dee:	2200      	movs	r2, #0
 8004df0:	2300      	movs	r3, #0
 8004df2:	4630      	mov	r0, r6
 8004df4:	4639      	mov	r1, r7
 8004df6:	f7fb fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dfa:	b918      	cbnz	r0, 8004e04 <__cvt+0xba>
 8004dfc:	f1c4 0401 	rsb	r4, r4, #1
 8004e00:	f8ca 4000 	str.w	r4, [sl]
 8004e04:	f8da 3000 	ldr.w	r3, [sl]
 8004e08:	4499      	add	r9, r3
 8004e0a:	e7d3      	b.n	8004db4 <__cvt+0x6a>
 8004e0c:	1c59      	adds	r1, r3, #1
 8004e0e:	9103      	str	r1, [sp, #12]
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e7d9      	b.n	8004dc8 <__cvt+0x7e>

08004e14 <__exponent>:
 8004e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e16:	2900      	cmp	r1, #0
 8004e18:	bfba      	itte	lt
 8004e1a:	4249      	neglt	r1, r1
 8004e1c:	232d      	movlt	r3, #45	@ 0x2d
 8004e1e:	232b      	movge	r3, #43	@ 0x2b
 8004e20:	2909      	cmp	r1, #9
 8004e22:	7002      	strb	r2, [r0, #0]
 8004e24:	7043      	strb	r3, [r0, #1]
 8004e26:	dd29      	ble.n	8004e7c <__exponent+0x68>
 8004e28:	f10d 0307 	add.w	r3, sp, #7
 8004e2c:	461d      	mov	r5, r3
 8004e2e:	270a      	movs	r7, #10
 8004e30:	461a      	mov	r2, r3
 8004e32:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e36:	fb07 1416 	mls	r4, r7, r6, r1
 8004e3a:	3430      	adds	r4, #48	@ 0x30
 8004e3c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e40:	460c      	mov	r4, r1
 8004e42:	2c63      	cmp	r4, #99	@ 0x63
 8004e44:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e48:	4631      	mov	r1, r6
 8004e4a:	dcf1      	bgt.n	8004e30 <__exponent+0x1c>
 8004e4c:	3130      	adds	r1, #48	@ 0x30
 8004e4e:	1e94      	subs	r4, r2, #2
 8004e50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e54:	1c41      	adds	r1, r0, #1
 8004e56:	4623      	mov	r3, r4
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	d30a      	bcc.n	8004e72 <__exponent+0x5e>
 8004e5c:	f10d 0309 	add.w	r3, sp, #9
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	42ac      	cmp	r4, r5
 8004e64:	bf88      	it	hi
 8004e66:	2300      	movhi	r3, #0
 8004e68:	3302      	adds	r3, #2
 8004e6a:	4403      	add	r3, r0
 8004e6c:	1a18      	subs	r0, r3, r0
 8004e6e:	b003      	add	sp, #12
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e76:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e7a:	e7ed      	b.n	8004e58 <__exponent+0x44>
 8004e7c:	2330      	movs	r3, #48	@ 0x30
 8004e7e:	3130      	adds	r1, #48	@ 0x30
 8004e80:	7083      	strb	r3, [r0, #2]
 8004e82:	70c1      	strb	r1, [r0, #3]
 8004e84:	1d03      	adds	r3, r0, #4
 8004e86:	e7f1      	b.n	8004e6c <__exponent+0x58>

08004e88 <_printf_float>:
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	b08d      	sub	sp, #52	@ 0x34
 8004e8e:	460c      	mov	r4, r1
 8004e90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e94:	4616      	mov	r6, r2
 8004e96:	461f      	mov	r7, r3
 8004e98:	4605      	mov	r5, r0
 8004e9a:	f000 feef 	bl	8005c7c <_localeconv_r>
 8004e9e:	6803      	ldr	r3, [r0, #0]
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb f9e4 	bl	8000270 <strlen>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eac:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb0:	9005      	str	r0, [sp, #20]
 8004eb2:	3307      	adds	r3, #7
 8004eb4:	f023 0307 	bic.w	r3, r3, #7
 8004eb8:	f103 0208 	add.w	r2, r3, #8
 8004ebc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ec0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ec4:	f8c8 2000 	str.w	r2, [r8]
 8004ec8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ecc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ed0:	9307      	str	r3, [sp, #28]
 8004ed2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ed6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ede:	4b9c      	ldr	r3, [pc, #624]	@ (8005150 <_printf_float+0x2c8>)
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	f7fb fe22 	bl	8000b2c <__aeabi_dcmpun>
 8004ee8:	bb70      	cbnz	r0, 8004f48 <_printf_float+0xc0>
 8004eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eee:	4b98      	ldr	r3, [pc, #608]	@ (8005150 <_printf_float+0x2c8>)
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef4:	f7fb fdfc 	bl	8000af0 <__aeabi_dcmple>
 8004ef8:	bb30      	cbnz	r0, 8004f48 <_printf_float+0xc0>
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	4640      	mov	r0, r8
 8004f00:	4649      	mov	r1, r9
 8004f02:	f7fb fdeb 	bl	8000adc <__aeabi_dcmplt>
 8004f06:	b110      	cbz	r0, 8004f0e <_printf_float+0x86>
 8004f08:	232d      	movs	r3, #45	@ 0x2d
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f0e:	4a91      	ldr	r2, [pc, #580]	@ (8005154 <_printf_float+0x2cc>)
 8004f10:	4b91      	ldr	r3, [pc, #580]	@ (8005158 <_printf_float+0x2d0>)
 8004f12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f16:	bf94      	ite	ls
 8004f18:	4690      	movls	r8, r2
 8004f1a:	4698      	movhi	r8, r3
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	f02b 0304 	bic.w	r3, fp, #4
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	f04f 0900 	mov.w	r9, #0
 8004f2a:	9700      	str	r7, [sp, #0]
 8004f2c:	4633      	mov	r3, r6
 8004f2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f30:	4621      	mov	r1, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f9d2 	bl	80052dc <_printf_common>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f040 808d 	bne.w	8005058 <_printf_float+0x1d0>
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	b00d      	add	sp, #52	@ 0x34
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4649      	mov	r1, r9
 8004f50:	f7fb fdec 	bl	8000b2c <__aeabi_dcmpun>
 8004f54:	b140      	cbz	r0, 8004f68 <_printf_float+0xe0>
 8004f56:	464b      	mov	r3, r9
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bfbc      	itt	lt
 8004f5c:	232d      	movlt	r3, #45	@ 0x2d
 8004f5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f62:	4a7e      	ldr	r2, [pc, #504]	@ (800515c <_printf_float+0x2d4>)
 8004f64:	4b7e      	ldr	r3, [pc, #504]	@ (8005160 <_printf_float+0x2d8>)
 8004f66:	e7d4      	b.n	8004f12 <_printf_float+0x8a>
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f6e:	9206      	str	r2, [sp, #24]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	d13b      	bne.n	8004fec <_printf_float+0x164>
 8004f74:	2306      	movs	r3, #6
 8004f76:	6063      	str	r3, [r4, #4]
 8004f78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6022      	str	r2, [r4, #0]
 8004f80:	9303      	str	r3, [sp, #12]
 8004f82:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f88:	ab09      	add	r3, sp, #36	@ 0x24
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6861      	ldr	r1, [r4, #4]
 8004f8e:	ec49 8b10 	vmov	d0, r8, r9
 8004f92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7ff fed7 	bl	8004d4a <__cvt>
 8004f9c:	9b06      	ldr	r3, [sp, #24]
 8004f9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fa0:	2b47      	cmp	r3, #71	@ 0x47
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	d129      	bne.n	8004ffa <_printf_float+0x172>
 8004fa6:	1cc8      	adds	r0, r1, #3
 8004fa8:	db02      	blt.n	8004fb0 <_printf_float+0x128>
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	4299      	cmp	r1, r3
 8004fae:	dd41      	ble.n	8005034 <_printf_float+0x1ac>
 8004fb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fb4:	fa5f fa8a 	uxtb.w	sl, sl
 8004fb8:	3901      	subs	r1, #1
 8004fba:	4652      	mov	r2, sl
 8004fbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fc2:	f7ff ff27 	bl	8004e14 <__exponent>
 8004fc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fc8:	1813      	adds	r3, r2, r0
 8004fca:	2a01      	cmp	r2, #1
 8004fcc:	4681      	mov	r9, r0
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	dc02      	bgt.n	8004fd8 <_printf_float+0x150>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	07d2      	lsls	r2, r2, #31
 8004fd6:	d501      	bpl.n	8004fdc <_printf_float+0x154>
 8004fd8:	3301      	adds	r3, #1
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0a2      	beq.n	8004f2a <_printf_float+0xa2>
 8004fe4:	232d      	movs	r3, #45	@ 0x2d
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fea:	e79e      	b.n	8004f2a <_printf_float+0xa2>
 8004fec:	9a06      	ldr	r2, [sp, #24]
 8004fee:	2a47      	cmp	r2, #71	@ 0x47
 8004ff0:	d1c2      	bne.n	8004f78 <_printf_float+0xf0>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1c0      	bne.n	8004f78 <_printf_float+0xf0>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e7bd      	b.n	8004f76 <_printf_float+0xee>
 8004ffa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ffe:	d9db      	bls.n	8004fb8 <_printf_float+0x130>
 8005000:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005004:	d118      	bne.n	8005038 <_printf_float+0x1b0>
 8005006:	2900      	cmp	r1, #0
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	dd0b      	ble.n	8005024 <_printf_float+0x19c>
 800500c:	6121      	str	r1, [r4, #16]
 800500e:	b913      	cbnz	r3, 8005016 <_printf_float+0x18e>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	07d0      	lsls	r0, r2, #31
 8005014:	d502      	bpl.n	800501c <_printf_float+0x194>
 8005016:	3301      	adds	r3, #1
 8005018:	440b      	add	r3, r1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800501e:	f04f 0900 	mov.w	r9, #0
 8005022:	e7db      	b.n	8004fdc <_printf_float+0x154>
 8005024:	b913      	cbnz	r3, 800502c <_printf_float+0x1a4>
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	07d2      	lsls	r2, r2, #31
 800502a:	d501      	bpl.n	8005030 <_printf_float+0x1a8>
 800502c:	3302      	adds	r3, #2
 800502e:	e7f4      	b.n	800501a <_printf_float+0x192>
 8005030:	2301      	movs	r3, #1
 8005032:	e7f2      	b.n	800501a <_printf_float+0x192>
 8005034:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800503a:	4299      	cmp	r1, r3
 800503c:	db05      	blt.n	800504a <_printf_float+0x1c2>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	6121      	str	r1, [r4, #16]
 8005042:	07d8      	lsls	r0, r3, #31
 8005044:	d5ea      	bpl.n	800501c <_printf_float+0x194>
 8005046:	1c4b      	adds	r3, r1, #1
 8005048:	e7e7      	b.n	800501a <_printf_float+0x192>
 800504a:	2900      	cmp	r1, #0
 800504c:	bfd4      	ite	le
 800504e:	f1c1 0202 	rsble	r2, r1, #2
 8005052:	2201      	movgt	r2, #1
 8005054:	4413      	add	r3, r2
 8005056:	e7e0      	b.n	800501a <_printf_float+0x192>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	055a      	lsls	r2, r3, #21
 800505c:	d407      	bmi.n	800506e <_printf_float+0x1e6>
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	4642      	mov	r2, r8
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	d12b      	bne.n	80050c4 <_printf_float+0x23c>
 800506c:	e767      	b.n	8004f3e <_printf_float+0xb6>
 800506e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005072:	f240 80dd 	bls.w	8005230 <_printf_float+0x3a8>
 8005076:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800507a:	2200      	movs	r2, #0
 800507c:	2300      	movs	r3, #0
 800507e:	f7fb fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005082:	2800      	cmp	r0, #0
 8005084:	d033      	beq.n	80050ee <_printf_float+0x266>
 8005086:	4a37      	ldr	r2, [pc, #220]	@ (8005164 <_printf_float+0x2dc>)
 8005088:	2301      	movs	r3, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f af54 	beq.w	8004f3e <_printf_float+0xb6>
 8005096:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800509a:	4543      	cmp	r3, r8
 800509c:	db02      	blt.n	80050a4 <_printf_float+0x21c>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	07d8      	lsls	r0, r3, #31
 80050a2:	d50f      	bpl.n	80050c4 <_printf_float+0x23c>
 80050a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af45 	beq.w	8004f3e <_printf_float+0xb6>
 80050b4:	f04f 0900 	mov.w	r9, #0
 80050b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80050bc:	f104 0a1a 	add.w	sl, r4, #26
 80050c0:	45c8      	cmp	r8, r9
 80050c2:	dc09      	bgt.n	80050d8 <_printf_float+0x250>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	079b      	lsls	r3, r3, #30
 80050c8:	f100 8103 	bmi.w	80052d2 <_printf_float+0x44a>
 80050cc:	68e0      	ldr	r0, [r4, #12]
 80050ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050d0:	4298      	cmp	r0, r3
 80050d2:	bfb8      	it	lt
 80050d4:	4618      	movlt	r0, r3
 80050d6:	e734      	b.n	8004f42 <_printf_float+0xba>
 80050d8:	2301      	movs	r3, #1
 80050da:	4652      	mov	r2, sl
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af2b 	beq.w	8004f3e <_printf_float+0xb6>
 80050e8:	f109 0901 	add.w	r9, r9, #1
 80050ec:	e7e8      	b.n	80050c0 <_printf_float+0x238>
 80050ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	dc39      	bgt.n	8005168 <_printf_float+0x2e0>
 80050f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <_printf_float+0x2dc>)
 80050f6:	2301      	movs	r3, #1
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f af1d 	beq.w	8004f3e <_printf_float+0xb6>
 8005104:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005108:	ea59 0303 	orrs.w	r3, r9, r3
 800510c:	d102      	bne.n	8005114 <_printf_float+0x28c>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	d5d7      	bpl.n	80050c4 <_printf_float+0x23c>
 8005114:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	f43f af0d 	beq.w	8004f3e <_printf_float+0xb6>
 8005124:	f04f 0a00 	mov.w	sl, #0
 8005128:	f104 0b1a 	add.w	fp, r4, #26
 800512c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512e:	425b      	negs	r3, r3
 8005130:	4553      	cmp	r3, sl
 8005132:	dc01      	bgt.n	8005138 <_printf_float+0x2b0>
 8005134:	464b      	mov	r3, r9
 8005136:	e793      	b.n	8005060 <_printf_float+0x1d8>
 8005138:	2301      	movs	r3, #1
 800513a:	465a      	mov	r2, fp
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f aefb 	beq.w	8004f3e <_printf_float+0xb6>
 8005148:	f10a 0a01 	add.w	sl, sl, #1
 800514c:	e7ee      	b.n	800512c <_printf_float+0x2a4>
 800514e:	bf00      	nop
 8005150:	7fefffff 	.word	0x7fefffff
 8005154:	08009478 	.word	0x08009478
 8005158:	0800947c 	.word	0x0800947c
 800515c:	08009480 	.word	0x08009480
 8005160:	08009484 	.word	0x08009484
 8005164:	08009488 	.word	0x08009488
 8005168:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800516a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800516e:	4553      	cmp	r3, sl
 8005170:	bfa8      	it	ge
 8005172:	4653      	movge	r3, sl
 8005174:	2b00      	cmp	r3, #0
 8005176:	4699      	mov	r9, r3
 8005178:	dc36      	bgt.n	80051e8 <_printf_float+0x360>
 800517a:	f04f 0b00 	mov.w	fp, #0
 800517e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005182:	f104 021a 	add.w	r2, r4, #26
 8005186:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005188:	9306      	str	r3, [sp, #24]
 800518a:	eba3 0309 	sub.w	r3, r3, r9
 800518e:	455b      	cmp	r3, fp
 8005190:	dc31      	bgt.n	80051f6 <_printf_float+0x36e>
 8005192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005194:	459a      	cmp	sl, r3
 8005196:	dc3a      	bgt.n	800520e <_printf_float+0x386>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	07da      	lsls	r2, r3, #31
 800519c:	d437      	bmi.n	800520e <_printf_float+0x386>
 800519e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a0:	ebaa 0903 	sub.w	r9, sl, r3
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	ebaa 0303 	sub.w	r3, sl, r3
 80051aa:	4599      	cmp	r9, r3
 80051ac:	bfa8      	it	ge
 80051ae:	4699      	movge	r9, r3
 80051b0:	f1b9 0f00 	cmp.w	r9, #0
 80051b4:	dc33      	bgt.n	800521e <_printf_float+0x396>
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051be:	f104 0b1a 	add.w	fp, r4, #26
 80051c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c4:	ebaa 0303 	sub.w	r3, sl, r3
 80051c8:	eba3 0309 	sub.w	r3, r3, r9
 80051cc:	4543      	cmp	r3, r8
 80051ce:	f77f af79 	ble.w	80050c4 <_printf_float+0x23c>
 80051d2:	2301      	movs	r3, #1
 80051d4:	465a      	mov	r2, fp
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f aeae 	beq.w	8004f3e <_printf_float+0xb6>
 80051e2:	f108 0801 	add.w	r8, r8, #1
 80051e6:	e7ec      	b.n	80051c2 <_printf_float+0x33a>
 80051e8:	4642      	mov	r2, r8
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1c2      	bne.n	800517a <_printf_float+0x2f2>
 80051f4:	e6a3      	b.n	8004f3e <_printf_float+0xb6>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	9206      	str	r2, [sp, #24]
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae9c 	beq.w	8004f3e <_printf_float+0xb6>
 8005206:	9a06      	ldr	r2, [sp, #24]
 8005208:	f10b 0b01 	add.w	fp, fp, #1
 800520c:	e7bb      	b.n	8005186 <_printf_float+0x2fe>
 800520e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	d1c0      	bne.n	800519e <_printf_float+0x316>
 800521c:	e68f      	b.n	8004f3e <_printf_float+0xb6>
 800521e:	9a06      	ldr	r2, [sp, #24]
 8005220:	464b      	mov	r3, r9
 8005222:	4442      	add	r2, r8
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	d1c3      	bne.n	80051b6 <_printf_float+0x32e>
 800522e:	e686      	b.n	8004f3e <_printf_float+0xb6>
 8005230:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005234:	f1ba 0f01 	cmp.w	sl, #1
 8005238:	dc01      	bgt.n	800523e <_printf_float+0x3b6>
 800523a:	07db      	lsls	r3, r3, #31
 800523c:	d536      	bpl.n	80052ac <_printf_float+0x424>
 800523e:	2301      	movs	r3, #1
 8005240:	4642      	mov	r2, r8
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae78 	beq.w	8004f3e <_printf_float+0xb6>
 800524e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f ae70 	beq.w	8004f3e <_printf_float+0xb6>
 800525e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005262:	2200      	movs	r2, #0
 8005264:	2300      	movs	r3, #0
 8005266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800526a:	f7fb fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800526e:	b9c0      	cbnz	r0, 80052a2 <_printf_float+0x41a>
 8005270:	4653      	mov	r3, sl
 8005272:	f108 0201 	add.w	r2, r8, #1
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	d10c      	bne.n	800529a <_printf_float+0x412>
 8005280:	e65d      	b.n	8004f3e <_printf_float+0xb6>
 8005282:	2301      	movs	r3, #1
 8005284:	465a      	mov	r2, fp
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f ae56 	beq.w	8004f3e <_printf_float+0xb6>
 8005292:	f108 0801 	add.w	r8, r8, #1
 8005296:	45d0      	cmp	r8, sl
 8005298:	dbf3      	blt.n	8005282 <_printf_float+0x3fa>
 800529a:	464b      	mov	r3, r9
 800529c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052a0:	e6df      	b.n	8005062 <_printf_float+0x1da>
 80052a2:	f04f 0800 	mov.w	r8, #0
 80052a6:	f104 0b1a 	add.w	fp, r4, #26
 80052aa:	e7f4      	b.n	8005296 <_printf_float+0x40e>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4642      	mov	r2, r8
 80052b0:	e7e1      	b.n	8005276 <_printf_float+0x3ee>
 80052b2:	2301      	movs	r3, #1
 80052b4:	464a      	mov	r2, r9
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f ae3e 	beq.w	8004f3e <_printf_float+0xb6>
 80052c2:	f108 0801 	add.w	r8, r8, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	4543      	cmp	r3, r8
 80052ce:	dcf0      	bgt.n	80052b2 <_printf_float+0x42a>
 80052d0:	e6fc      	b.n	80050cc <_printf_float+0x244>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	f104 0919 	add.w	r9, r4, #25
 80052da:	e7f4      	b.n	80052c6 <_printf_float+0x43e>

080052dc <_printf_common>:
 80052dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	4616      	mov	r6, r2
 80052e2:	4698      	mov	r8, r3
 80052e4:	688a      	ldr	r2, [r1, #8]
 80052e6:	690b      	ldr	r3, [r1, #16]
 80052e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bfb8      	it	lt
 80052f0:	4613      	movlt	r3, r2
 80052f2:	6033      	str	r3, [r6, #0]
 80052f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052f8:	4607      	mov	r7, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	b10a      	cbz	r2, 8005302 <_printf_common+0x26>
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0699      	lsls	r1, r3, #26
 8005306:	bf42      	ittt	mi
 8005308:	6833      	ldrmi	r3, [r6, #0]
 800530a:	3302      	addmi	r3, #2
 800530c:	6033      	strmi	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	f015 0506 	ands.w	r5, r5, #6
 8005314:	d106      	bne.n	8005324 <_printf_common+0x48>
 8005316:	f104 0a19 	add.w	sl, r4, #25
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	6832      	ldr	r2, [r6, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	42ab      	cmp	r3, r5
 8005322:	dc26      	bgt.n	8005372 <_printf_common+0x96>
 8005324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	3b00      	subs	r3, #0
 800532c:	bf18      	it	ne
 800532e:	2301      	movne	r3, #1
 8005330:	0692      	lsls	r2, r2, #26
 8005332:	d42b      	bmi.n	800538c <_printf_common+0xb0>
 8005334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005338:	4641      	mov	r1, r8
 800533a:	4638      	mov	r0, r7
 800533c:	47c8      	blx	r9
 800533e:	3001      	adds	r0, #1
 8005340:	d01e      	beq.n	8005380 <_printf_common+0xa4>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	2b04      	cmp	r3, #4
 800534c:	bf02      	ittt	eq
 800534e:	68e5      	ldreq	r5, [r4, #12]
 8005350:	6833      	ldreq	r3, [r6, #0]
 8005352:	1aed      	subeq	r5, r5, r3
 8005354:	68a3      	ldr	r3, [r4, #8]
 8005356:	bf0c      	ite	eq
 8005358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800535c:	2500      	movne	r5, #0
 800535e:	4293      	cmp	r3, r2
 8005360:	bfc4      	itt	gt
 8005362:	1a9b      	subgt	r3, r3, r2
 8005364:	18ed      	addgt	r5, r5, r3
 8005366:	2600      	movs	r6, #0
 8005368:	341a      	adds	r4, #26
 800536a:	42b5      	cmp	r5, r6
 800536c:	d11a      	bne.n	80053a4 <_printf_common+0xc8>
 800536e:	2000      	movs	r0, #0
 8005370:	e008      	b.n	8005384 <_printf_common+0xa8>
 8005372:	2301      	movs	r3, #1
 8005374:	4652      	mov	r2, sl
 8005376:	4641      	mov	r1, r8
 8005378:	4638      	mov	r0, r7
 800537a:	47c8      	blx	r9
 800537c:	3001      	adds	r0, #1
 800537e:	d103      	bne.n	8005388 <_printf_common+0xac>
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	3501      	adds	r5, #1
 800538a:	e7c6      	b.n	800531a <_printf_common+0x3e>
 800538c:	18e1      	adds	r1, r4, r3
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	2030      	movs	r0, #48	@ 0x30
 8005392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005396:	4422      	add	r2, r4
 8005398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800539c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053a0:	3302      	adds	r3, #2
 80053a2:	e7c7      	b.n	8005334 <_printf_common+0x58>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4622      	mov	r2, r4
 80053a8:	4641      	mov	r1, r8
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c8      	blx	r9
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0e6      	beq.n	8005380 <_printf_common+0xa4>
 80053b2:	3601      	adds	r6, #1
 80053b4:	e7d9      	b.n	800536a <_printf_common+0x8e>
	...

080053b8 <_printf_i>:
 80053b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	7e0f      	ldrb	r7, [r1, #24]
 80053be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053c0:	2f78      	cmp	r7, #120	@ 0x78
 80053c2:	4691      	mov	r9, r2
 80053c4:	4680      	mov	r8, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	469a      	mov	sl, r3
 80053ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053ce:	d807      	bhi.n	80053e0 <_printf_i+0x28>
 80053d0:	2f62      	cmp	r7, #98	@ 0x62
 80053d2:	d80a      	bhi.n	80053ea <_printf_i+0x32>
 80053d4:	2f00      	cmp	r7, #0
 80053d6:	f000 80d2 	beq.w	800557e <_printf_i+0x1c6>
 80053da:	2f58      	cmp	r7, #88	@ 0x58
 80053dc:	f000 80b9 	beq.w	8005552 <_printf_i+0x19a>
 80053e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053e8:	e03a      	b.n	8005460 <_printf_i+0xa8>
 80053ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ee:	2b15      	cmp	r3, #21
 80053f0:	d8f6      	bhi.n	80053e0 <_printf_i+0x28>
 80053f2:	a101      	add	r1, pc, #4	@ (adr r1, 80053f8 <_printf_i+0x40>)
 80053f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f8:	08005451 	.word	0x08005451
 80053fc:	08005465 	.word	0x08005465
 8005400:	080053e1 	.word	0x080053e1
 8005404:	080053e1 	.word	0x080053e1
 8005408:	080053e1 	.word	0x080053e1
 800540c:	080053e1 	.word	0x080053e1
 8005410:	08005465 	.word	0x08005465
 8005414:	080053e1 	.word	0x080053e1
 8005418:	080053e1 	.word	0x080053e1
 800541c:	080053e1 	.word	0x080053e1
 8005420:	080053e1 	.word	0x080053e1
 8005424:	08005565 	.word	0x08005565
 8005428:	0800548f 	.word	0x0800548f
 800542c:	0800551f 	.word	0x0800551f
 8005430:	080053e1 	.word	0x080053e1
 8005434:	080053e1 	.word	0x080053e1
 8005438:	08005587 	.word	0x08005587
 800543c:	080053e1 	.word	0x080053e1
 8005440:	0800548f 	.word	0x0800548f
 8005444:	080053e1 	.word	0x080053e1
 8005448:	080053e1 	.word	0x080053e1
 800544c:	08005527 	.word	0x08005527
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6032      	str	r2, [r6, #0]
 8005458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800545c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005460:	2301      	movs	r3, #1
 8005462:	e09d      	b.n	80055a0 <_printf_i+0x1e8>
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	1d19      	adds	r1, r3, #4
 800546a:	6031      	str	r1, [r6, #0]
 800546c:	0606      	lsls	r6, r0, #24
 800546e:	d501      	bpl.n	8005474 <_printf_i+0xbc>
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	e003      	b.n	800547c <_printf_i+0xc4>
 8005474:	0645      	lsls	r5, r0, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0xb8>
 8005478:	f9b3 5000 	ldrsh.w	r5, [r3]
 800547c:	2d00      	cmp	r5, #0
 800547e:	da03      	bge.n	8005488 <_printf_i+0xd0>
 8005480:	232d      	movs	r3, #45	@ 0x2d
 8005482:	426d      	negs	r5, r5
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005488:	4859      	ldr	r0, [pc, #356]	@ (80055f0 <_printf_i+0x238>)
 800548a:	230a      	movs	r3, #10
 800548c:	e011      	b.n	80054b2 <_printf_i+0xfa>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	0608      	lsls	r0, r1, #24
 8005494:	f853 5b04 	ldr.w	r5, [r3], #4
 8005498:	d402      	bmi.n	80054a0 <_printf_i+0xe8>
 800549a:	0649      	lsls	r1, r1, #25
 800549c:	bf48      	it	mi
 800549e:	b2ad      	uxthmi	r5, r5
 80054a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054a2:	4853      	ldr	r0, [pc, #332]	@ (80055f0 <_printf_i+0x238>)
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	bf14      	ite	ne
 80054a8:	230a      	movne	r3, #10
 80054aa:	2308      	moveq	r3, #8
 80054ac:	2100      	movs	r1, #0
 80054ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054b2:	6866      	ldr	r6, [r4, #4]
 80054b4:	60a6      	str	r6, [r4, #8]
 80054b6:	2e00      	cmp	r6, #0
 80054b8:	bfa2      	ittt	ge
 80054ba:	6821      	ldrge	r1, [r4, #0]
 80054bc:	f021 0104 	bicge.w	r1, r1, #4
 80054c0:	6021      	strge	r1, [r4, #0]
 80054c2:	b90d      	cbnz	r5, 80054c8 <_printf_i+0x110>
 80054c4:	2e00      	cmp	r6, #0
 80054c6:	d04b      	beq.n	8005560 <_printf_i+0x1a8>
 80054c8:	4616      	mov	r6, r2
 80054ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80054ce:	fb03 5711 	mls	r7, r3, r1, r5
 80054d2:	5dc7      	ldrb	r7, [r0, r7]
 80054d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d8:	462f      	mov	r7, r5
 80054da:	42bb      	cmp	r3, r7
 80054dc:	460d      	mov	r5, r1
 80054de:	d9f4      	bls.n	80054ca <_printf_i+0x112>
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d10b      	bne.n	80054fc <_printf_i+0x144>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	07df      	lsls	r7, r3, #31
 80054e8:	d508      	bpl.n	80054fc <_printf_i+0x144>
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	6861      	ldr	r1, [r4, #4]
 80054ee:	4299      	cmp	r1, r3
 80054f0:	bfde      	ittt	le
 80054f2:	2330      	movle	r3, #48	@ 0x30
 80054f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054fc:	1b92      	subs	r2, r2, r6
 80054fe:	6122      	str	r2, [r4, #16]
 8005500:	f8cd a000 	str.w	sl, [sp]
 8005504:	464b      	mov	r3, r9
 8005506:	aa03      	add	r2, sp, #12
 8005508:	4621      	mov	r1, r4
 800550a:	4640      	mov	r0, r8
 800550c:	f7ff fee6 	bl	80052dc <_printf_common>
 8005510:	3001      	adds	r0, #1
 8005512:	d14a      	bne.n	80055aa <_printf_i+0x1f2>
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	b004      	add	sp, #16
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f043 0320 	orr.w	r3, r3, #32
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	4833      	ldr	r0, [pc, #204]	@ (80055f4 <_printf_i+0x23c>)
 8005528:	2778      	movs	r7, #120	@ 0x78
 800552a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6831      	ldr	r1, [r6, #0]
 8005532:	061f      	lsls	r7, r3, #24
 8005534:	f851 5b04 	ldr.w	r5, [r1], #4
 8005538:	d402      	bmi.n	8005540 <_printf_i+0x188>
 800553a:	065f      	lsls	r7, r3, #25
 800553c:	bf48      	it	mi
 800553e:	b2ad      	uxthmi	r5, r5
 8005540:	6031      	str	r1, [r6, #0]
 8005542:	07d9      	lsls	r1, r3, #31
 8005544:	bf44      	itt	mi
 8005546:	f043 0320 	orrmi.w	r3, r3, #32
 800554a:	6023      	strmi	r3, [r4, #0]
 800554c:	b11d      	cbz	r5, 8005556 <_printf_i+0x19e>
 800554e:	2310      	movs	r3, #16
 8005550:	e7ac      	b.n	80054ac <_printf_i+0xf4>
 8005552:	4827      	ldr	r0, [pc, #156]	@ (80055f0 <_printf_i+0x238>)
 8005554:	e7e9      	b.n	800552a <_printf_i+0x172>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	f023 0320 	bic.w	r3, r3, #32
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	e7f6      	b.n	800554e <_printf_i+0x196>
 8005560:	4616      	mov	r6, r2
 8005562:	e7bd      	b.n	80054e0 <_printf_i+0x128>
 8005564:	6833      	ldr	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	6961      	ldr	r1, [r4, #20]
 800556a:	1d18      	adds	r0, r3, #4
 800556c:	6030      	str	r0, [r6, #0]
 800556e:	062e      	lsls	r6, r5, #24
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	d501      	bpl.n	8005578 <_printf_i+0x1c0>
 8005574:	6019      	str	r1, [r3, #0]
 8005576:	e002      	b.n	800557e <_printf_i+0x1c6>
 8005578:	0668      	lsls	r0, r5, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0x1bc>
 800557c:	8019      	strh	r1, [r3, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	4616      	mov	r6, r2
 8005584:	e7bc      	b.n	8005500 <_printf_i+0x148>
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	1d1a      	adds	r2, r3, #4
 800558a:	6032      	str	r2, [r6, #0]
 800558c:	681e      	ldr	r6, [r3, #0]
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	2100      	movs	r1, #0
 8005592:	4630      	mov	r0, r6
 8005594:	f7fa fe1c 	bl	80001d0 <memchr>
 8005598:	b108      	cbz	r0, 800559e <_printf_i+0x1e6>
 800559a:	1b80      	subs	r0, r0, r6
 800559c:	6060      	str	r0, [r4, #4]
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	2300      	movs	r3, #0
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a8:	e7aa      	b.n	8005500 <_printf_i+0x148>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	4632      	mov	r2, r6
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	47d0      	blx	sl
 80055b4:	3001      	adds	r0, #1
 80055b6:	d0ad      	beq.n	8005514 <_printf_i+0x15c>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	079b      	lsls	r3, r3, #30
 80055bc:	d413      	bmi.n	80055e6 <_printf_i+0x22e>
 80055be:	68e0      	ldr	r0, [r4, #12]
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	4298      	cmp	r0, r3
 80055c4:	bfb8      	it	lt
 80055c6:	4618      	movlt	r0, r3
 80055c8:	e7a6      	b.n	8005518 <_printf_i+0x160>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4632      	mov	r2, r6
 80055ce:	4649      	mov	r1, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	47d0      	blx	sl
 80055d4:	3001      	adds	r0, #1
 80055d6:	d09d      	beq.n	8005514 <_printf_i+0x15c>
 80055d8:	3501      	adds	r5, #1
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	9903      	ldr	r1, [sp, #12]
 80055de:	1a5b      	subs	r3, r3, r1
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dcf2      	bgt.n	80055ca <_printf_i+0x212>
 80055e4:	e7eb      	b.n	80055be <_printf_i+0x206>
 80055e6:	2500      	movs	r5, #0
 80055e8:	f104 0619 	add.w	r6, r4, #25
 80055ec:	e7f5      	b.n	80055da <_printf_i+0x222>
 80055ee:	bf00      	nop
 80055f0:	0800948a 	.word	0x0800948a
 80055f4:	0800949b 	.word	0x0800949b

080055f8 <_scanf_float>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	b087      	sub	sp, #28
 80055fe:	4617      	mov	r7, r2
 8005600:	9303      	str	r3, [sp, #12]
 8005602:	688b      	ldr	r3, [r1, #8]
 8005604:	1e5a      	subs	r2, r3, #1
 8005606:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800560a:	bf81      	itttt	hi
 800560c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005610:	eb03 0b05 	addhi.w	fp, r3, r5
 8005614:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005618:	608b      	strhi	r3, [r1, #8]
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	460a      	mov	r2, r1
 800561e:	f04f 0500 	mov.w	r5, #0
 8005622:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005626:	f842 3b1c 	str.w	r3, [r2], #28
 800562a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800562e:	4680      	mov	r8, r0
 8005630:	460c      	mov	r4, r1
 8005632:	bf98      	it	ls
 8005634:	f04f 0b00 	movls.w	fp, #0
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	4616      	mov	r6, r2
 800563c:	46aa      	mov	sl, r5
 800563e:	46a9      	mov	r9, r5
 8005640:	9502      	str	r5, [sp, #8]
 8005642:	68a2      	ldr	r2, [r4, #8]
 8005644:	b152      	cbz	r2, 800565c <_scanf_float+0x64>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b4e      	cmp	r3, #78	@ 0x4e
 800564c:	d864      	bhi.n	8005718 <_scanf_float+0x120>
 800564e:	2b40      	cmp	r3, #64	@ 0x40
 8005650:	d83c      	bhi.n	80056cc <_scanf_float+0xd4>
 8005652:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005656:	b2c8      	uxtb	r0, r1
 8005658:	280e      	cmp	r0, #14
 800565a:	d93a      	bls.n	80056d2 <_scanf_float+0xda>
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	d003      	beq.n	800566a <_scanf_float+0x72>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800566e:	f1ba 0f01 	cmp.w	sl, #1
 8005672:	f200 8117 	bhi.w	80058a4 <_scanf_float+0x2ac>
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	429e      	cmp	r6, r3
 800567a:	f200 8108 	bhi.w	800588e <_scanf_float+0x296>
 800567e:	2001      	movs	r0, #1
 8005680:	b007      	add	sp, #28
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800568a:	2a0d      	cmp	r2, #13
 800568c:	d8e6      	bhi.n	800565c <_scanf_float+0x64>
 800568e:	a101      	add	r1, pc, #4	@ (adr r1, 8005694 <_scanf_float+0x9c>)
 8005690:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005694:	080057db 	.word	0x080057db
 8005698:	0800565d 	.word	0x0800565d
 800569c:	0800565d 	.word	0x0800565d
 80056a0:	0800565d 	.word	0x0800565d
 80056a4:	0800583b 	.word	0x0800583b
 80056a8:	08005813 	.word	0x08005813
 80056ac:	0800565d 	.word	0x0800565d
 80056b0:	0800565d 	.word	0x0800565d
 80056b4:	080057e9 	.word	0x080057e9
 80056b8:	0800565d 	.word	0x0800565d
 80056bc:	0800565d 	.word	0x0800565d
 80056c0:	0800565d 	.word	0x0800565d
 80056c4:	0800565d 	.word	0x0800565d
 80056c8:	080057a1 	.word	0x080057a1
 80056cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80056d0:	e7db      	b.n	800568a <_scanf_float+0x92>
 80056d2:	290e      	cmp	r1, #14
 80056d4:	d8c2      	bhi.n	800565c <_scanf_float+0x64>
 80056d6:	a001      	add	r0, pc, #4	@ (adr r0, 80056dc <_scanf_float+0xe4>)
 80056d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056dc:	08005791 	.word	0x08005791
 80056e0:	0800565d 	.word	0x0800565d
 80056e4:	08005791 	.word	0x08005791
 80056e8:	08005827 	.word	0x08005827
 80056ec:	0800565d 	.word	0x0800565d
 80056f0:	08005739 	.word	0x08005739
 80056f4:	08005777 	.word	0x08005777
 80056f8:	08005777 	.word	0x08005777
 80056fc:	08005777 	.word	0x08005777
 8005700:	08005777 	.word	0x08005777
 8005704:	08005777 	.word	0x08005777
 8005708:	08005777 	.word	0x08005777
 800570c:	08005777 	.word	0x08005777
 8005710:	08005777 	.word	0x08005777
 8005714:	08005777 	.word	0x08005777
 8005718:	2b6e      	cmp	r3, #110	@ 0x6e
 800571a:	d809      	bhi.n	8005730 <_scanf_float+0x138>
 800571c:	2b60      	cmp	r3, #96	@ 0x60
 800571e:	d8b2      	bhi.n	8005686 <_scanf_float+0x8e>
 8005720:	2b54      	cmp	r3, #84	@ 0x54
 8005722:	d07b      	beq.n	800581c <_scanf_float+0x224>
 8005724:	2b59      	cmp	r3, #89	@ 0x59
 8005726:	d199      	bne.n	800565c <_scanf_float+0x64>
 8005728:	2d07      	cmp	r5, #7
 800572a:	d197      	bne.n	800565c <_scanf_float+0x64>
 800572c:	2508      	movs	r5, #8
 800572e:	e02c      	b.n	800578a <_scanf_float+0x192>
 8005730:	2b74      	cmp	r3, #116	@ 0x74
 8005732:	d073      	beq.n	800581c <_scanf_float+0x224>
 8005734:	2b79      	cmp	r3, #121	@ 0x79
 8005736:	e7f6      	b.n	8005726 <_scanf_float+0x12e>
 8005738:	6821      	ldr	r1, [r4, #0]
 800573a:	05c8      	lsls	r0, r1, #23
 800573c:	d51b      	bpl.n	8005776 <_scanf_float+0x17e>
 800573e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005742:	6021      	str	r1, [r4, #0]
 8005744:	f109 0901 	add.w	r9, r9, #1
 8005748:	f1bb 0f00 	cmp.w	fp, #0
 800574c:	d003      	beq.n	8005756 <_scanf_float+0x15e>
 800574e:	3201      	adds	r2, #1
 8005750:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005754:	60a2      	str	r2, [r4, #8]
 8005756:	68a3      	ldr	r3, [r4, #8]
 8005758:	3b01      	subs	r3, #1
 800575a:	60a3      	str	r3, [r4, #8]
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	3301      	adds	r3, #1
 8005760:	6123      	str	r3, [r4, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3b01      	subs	r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	f340 8087 	ble.w	800587c <_scanf_float+0x284>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	e765      	b.n	8005642 <_scanf_float+0x4a>
 8005776:	eb1a 0105 	adds.w	r1, sl, r5
 800577a:	f47f af6f 	bne.w	800565c <_scanf_float+0x64>
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005784:	6022      	str	r2, [r4, #0]
 8005786:	460d      	mov	r5, r1
 8005788:	468a      	mov	sl, r1
 800578a:	f806 3b01 	strb.w	r3, [r6], #1
 800578e:	e7e2      	b.n	8005756 <_scanf_float+0x15e>
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	0610      	lsls	r0, r2, #24
 8005794:	f57f af62 	bpl.w	800565c <_scanf_float+0x64>
 8005798:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	e7f4      	b.n	800578a <_scanf_float+0x192>
 80057a0:	f1ba 0f00 	cmp.w	sl, #0
 80057a4:	d10e      	bne.n	80057c4 <_scanf_float+0x1cc>
 80057a6:	f1b9 0f00 	cmp.w	r9, #0
 80057aa:	d10e      	bne.n	80057ca <_scanf_float+0x1d2>
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057b6:	d108      	bne.n	80057ca <_scanf_float+0x1d2>
 80057b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057bc:	6022      	str	r2, [r4, #0]
 80057be:	f04f 0a01 	mov.w	sl, #1
 80057c2:	e7e2      	b.n	800578a <_scanf_float+0x192>
 80057c4:	f1ba 0f02 	cmp.w	sl, #2
 80057c8:	d055      	beq.n	8005876 <_scanf_float+0x27e>
 80057ca:	2d01      	cmp	r5, #1
 80057cc:	d002      	beq.n	80057d4 <_scanf_float+0x1dc>
 80057ce:	2d04      	cmp	r5, #4
 80057d0:	f47f af44 	bne.w	800565c <_scanf_float+0x64>
 80057d4:	3501      	adds	r5, #1
 80057d6:	b2ed      	uxtb	r5, r5
 80057d8:	e7d7      	b.n	800578a <_scanf_float+0x192>
 80057da:	f1ba 0f01 	cmp.w	sl, #1
 80057de:	f47f af3d 	bne.w	800565c <_scanf_float+0x64>
 80057e2:	f04f 0a02 	mov.w	sl, #2
 80057e6:	e7d0      	b.n	800578a <_scanf_float+0x192>
 80057e8:	b97d      	cbnz	r5, 800580a <_scanf_float+0x212>
 80057ea:	f1b9 0f00 	cmp.w	r9, #0
 80057ee:	f47f af38 	bne.w	8005662 <_scanf_float+0x6a>
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057fc:	f040 8108 	bne.w	8005a10 <_scanf_float+0x418>
 8005800:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	2501      	movs	r5, #1
 8005808:	e7bf      	b.n	800578a <_scanf_float+0x192>
 800580a:	2d03      	cmp	r5, #3
 800580c:	d0e2      	beq.n	80057d4 <_scanf_float+0x1dc>
 800580e:	2d05      	cmp	r5, #5
 8005810:	e7de      	b.n	80057d0 <_scanf_float+0x1d8>
 8005812:	2d02      	cmp	r5, #2
 8005814:	f47f af22 	bne.w	800565c <_scanf_float+0x64>
 8005818:	2503      	movs	r5, #3
 800581a:	e7b6      	b.n	800578a <_scanf_float+0x192>
 800581c:	2d06      	cmp	r5, #6
 800581e:	f47f af1d 	bne.w	800565c <_scanf_float+0x64>
 8005822:	2507      	movs	r5, #7
 8005824:	e7b1      	b.n	800578a <_scanf_float+0x192>
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	0591      	lsls	r1, r2, #22
 800582a:	f57f af17 	bpl.w	800565c <_scanf_float+0x64>
 800582e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	f8cd 9008 	str.w	r9, [sp, #8]
 8005838:	e7a7      	b.n	800578a <_scanf_float+0x192>
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005840:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005844:	d006      	beq.n	8005854 <_scanf_float+0x25c>
 8005846:	0550      	lsls	r0, r2, #21
 8005848:	f57f af08 	bpl.w	800565c <_scanf_float+0x64>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	f000 80de 	beq.w	8005a10 <_scanf_float+0x418>
 8005854:	0591      	lsls	r1, r2, #22
 8005856:	bf58      	it	pl
 8005858:	9902      	ldrpl	r1, [sp, #8]
 800585a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800585e:	bf58      	it	pl
 8005860:	eba9 0101 	subpl.w	r1, r9, r1
 8005864:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005868:	bf58      	it	pl
 800586a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	f04f 0900 	mov.w	r9, #0
 8005874:	e789      	b.n	800578a <_scanf_float+0x192>
 8005876:	f04f 0a03 	mov.w	sl, #3
 800587a:	e786      	b.n	800578a <_scanf_float+0x192>
 800587c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005880:	4639      	mov	r1, r7
 8005882:	4640      	mov	r0, r8
 8005884:	4798      	blx	r3
 8005886:	2800      	cmp	r0, #0
 8005888:	f43f aedb 	beq.w	8005642 <_scanf_float+0x4a>
 800588c:	e6e6      	b.n	800565c <_scanf_float+0x64>
 800588e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005896:	463a      	mov	r2, r7
 8005898:	4640      	mov	r0, r8
 800589a:	4798      	blx	r3
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	3b01      	subs	r3, #1
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	e6e8      	b.n	8005676 <_scanf_float+0x7e>
 80058a4:	1e6b      	subs	r3, r5, #1
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d824      	bhi.n	80058f4 <_scanf_float+0x2fc>
 80058aa:	2d02      	cmp	r5, #2
 80058ac:	d836      	bhi.n	800591c <_scanf_float+0x324>
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	429e      	cmp	r6, r3
 80058b2:	f67f aee4 	bls.w	800567e <_scanf_float+0x86>
 80058b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058be:	463a      	mov	r2, r7
 80058c0:	4640      	mov	r0, r8
 80058c2:	4798      	blx	r3
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	e7f0      	b.n	80058ae <_scanf_float+0x2b6>
 80058cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80058d4:	463a      	mov	r2, r7
 80058d6:	4640      	mov	r0, r8
 80058d8:	4798      	blx	r3
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	3b01      	subs	r3, #1
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e4:	fa5f fa8a 	uxtb.w	sl, sl
 80058e8:	f1ba 0f02 	cmp.w	sl, #2
 80058ec:	d1ee      	bne.n	80058cc <_scanf_float+0x2d4>
 80058ee:	3d03      	subs	r5, #3
 80058f0:	b2ed      	uxtb	r5, r5
 80058f2:	1b76      	subs	r6, r6, r5
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	05da      	lsls	r2, r3, #23
 80058f8:	d530      	bpl.n	800595c <_scanf_float+0x364>
 80058fa:	055b      	lsls	r3, r3, #21
 80058fc:	d511      	bpl.n	8005922 <_scanf_float+0x32a>
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	429e      	cmp	r6, r3
 8005902:	f67f aebc 	bls.w	800567e <_scanf_float+0x86>
 8005906:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800590a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800590e:	463a      	mov	r2, r7
 8005910:	4640      	mov	r0, r8
 8005912:	4798      	blx	r3
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	3b01      	subs	r3, #1
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	e7f0      	b.n	80058fe <_scanf_float+0x306>
 800591c:	46aa      	mov	sl, r5
 800591e:	46b3      	mov	fp, r6
 8005920:	e7de      	b.n	80058e0 <_scanf_float+0x2e8>
 8005922:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	2965      	cmp	r1, #101	@ 0x65
 800592a:	f103 33ff 	add.w	r3, r3, #4294967295
 800592e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	d00c      	beq.n	8005950 <_scanf_float+0x358>
 8005936:	2945      	cmp	r1, #69	@ 0x45
 8005938:	d00a      	beq.n	8005950 <_scanf_float+0x358>
 800593a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800593e:	463a      	mov	r2, r7
 8005940:	4640      	mov	r0, r8
 8005942:	4798      	blx	r3
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800594a:	3b01      	subs	r3, #1
 800594c:	1eb5      	subs	r5, r6, #2
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005954:	463a      	mov	r2, r7
 8005956:	4640      	mov	r0, r8
 8005958:	4798      	blx	r3
 800595a:	462e      	mov	r6, r5
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	f012 0210 	ands.w	r2, r2, #16
 8005962:	d001      	beq.n	8005968 <_scanf_float+0x370>
 8005964:	2000      	movs	r0, #0
 8005966:	e68b      	b.n	8005680 <_scanf_float+0x88>
 8005968:	7032      	strb	r2, [r6, #0]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005974:	d11c      	bne.n	80059b0 <_scanf_float+0x3b8>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	454b      	cmp	r3, r9
 800597a:	eba3 0209 	sub.w	r2, r3, r9
 800597e:	d123      	bne.n	80059c8 <_scanf_float+0x3d0>
 8005980:	9901      	ldr	r1, [sp, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	4640      	mov	r0, r8
 8005986:	f002 fbf7 	bl	8008178 <_strtod_r>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	6821      	ldr	r1, [r4, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f011 0f02 	tst.w	r1, #2
 8005994:	ec57 6b10 	vmov	r6, r7, d0
 8005998:	f103 0204 	add.w	r2, r3, #4
 800599c:	d01f      	beq.n	80059de <_scanf_float+0x3e6>
 800599e:	9903      	ldr	r1, [sp, #12]
 80059a0:	600a      	str	r2, [r1, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	e9c3 6700 	strd	r6, r7, [r3]
 80059a8:	68e3      	ldr	r3, [r4, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60e3      	str	r3, [r4, #12]
 80059ae:	e7d9      	b.n	8005964 <_scanf_float+0x36c>
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0e4      	beq.n	8005980 <_scanf_float+0x388>
 80059b6:	9905      	ldr	r1, [sp, #20]
 80059b8:	230a      	movs	r3, #10
 80059ba:	3101      	adds	r1, #1
 80059bc:	4640      	mov	r0, r8
 80059be:	f002 fc5b 	bl	8008278 <_strtol_r>
 80059c2:	9b04      	ldr	r3, [sp, #16]
 80059c4:	9e05      	ldr	r6, [sp, #20]
 80059c6:	1ac2      	subs	r2, r0, r3
 80059c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80059cc:	429e      	cmp	r6, r3
 80059ce:	bf28      	it	cs
 80059d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80059d4:	4910      	ldr	r1, [pc, #64]	@ (8005a18 <_scanf_float+0x420>)
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f8e4 	bl	8005ba4 <siprintf>
 80059dc:	e7d0      	b.n	8005980 <_scanf_float+0x388>
 80059de:	f011 0f04 	tst.w	r1, #4
 80059e2:	9903      	ldr	r1, [sp, #12]
 80059e4:	600a      	str	r2, [r1, #0]
 80059e6:	d1dc      	bne.n	80059a2 <_scanf_float+0x3aa>
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	4632      	mov	r2, r6
 80059ec:	463b      	mov	r3, r7
 80059ee:	4630      	mov	r0, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fb f89b 	bl	8000b2c <__aeabi_dcmpun>
 80059f6:	b128      	cbz	r0, 8005a04 <_scanf_float+0x40c>
 80059f8:	4808      	ldr	r0, [pc, #32]	@ (8005a1c <_scanf_float+0x424>)
 80059fa:	f000 f9b7 	bl	8005d6c <nanf>
 80059fe:	ed85 0a00 	vstr	s0, [r5]
 8005a02:	e7d1      	b.n	80059a8 <_scanf_float+0x3b0>
 8005a04:	4630      	mov	r0, r6
 8005a06:	4639      	mov	r1, r7
 8005a08:	f7fb f8ee 	bl	8000be8 <__aeabi_d2f>
 8005a0c:	6028      	str	r0, [r5, #0]
 8005a0e:	e7cb      	b.n	80059a8 <_scanf_float+0x3b0>
 8005a10:	f04f 0900 	mov.w	r9, #0
 8005a14:	e629      	b.n	800566a <_scanf_float+0x72>
 8005a16:	bf00      	nop
 8005a18:	080094ac 	.word	0x080094ac
 8005a1c:	08009845 	.word	0x08009845

08005a20 <std>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a2e:	6083      	str	r3, [r0, #8]
 8005a30:	8181      	strh	r1, [r0, #12]
 8005a32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a34:	81c2      	strh	r2, [r0, #14]
 8005a36:	6183      	str	r3, [r0, #24]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	305c      	adds	r0, #92	@ 0x5c
 8005a3e:	f000 f914 	bl	8005c6a <memset>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <std+0x58>)
 8005a44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <std+0x5c>)
 8005a48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x60>)
 8005a4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x64>)
 8005a50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x68>)
 8005a54:	6224      	str	r4, [r4, #32]
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d006      	beq.n	8005a68 <std+0x48>
 8005a5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a5e:	4294      	cmp	r4, r2
 8005a60:	d002      	beq.n	8005a68 <std+0x48>
 8005a62:	33d0      	adds	r3, #208	@ 0xd0
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d105      	bne.n	8005a74 <std+0x54>
 8005a68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a70:	f000 b978 	b.w	8005d64 <__retarget_lock_init_recursive>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	08005be5 	.word	0x08005be5
 8005a7c:	08005c07 	.word	0x08005c07
 8005a80:	08005c3f 	.word	0x08005c3f
 8005a84:	08005c63 	.word	0x08005c63
 8005a88:	20000360 	.word	0x20000360

08005a8c <stdio_exit_handler>:
 8005a8c:	4a02      	ldr	r2, [pc, #8]	@ (8005a98 <stdio_exit_handler+0xc>)
 8005a8e:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <stdio_exit_handler+0x10>)
 8005a90:	4803      	ldr	r0, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x14>)
 8005a92:	f000 b869 	b.w	8005b68 <_fwalk_sglue>
 8005a96:	bf00      	nop
 8005a98:	2000000c 	.word	0x2000000c
 8005a9c:	08008635 	.word	0x08008635
 8005aa0:	2000001c 	.word	0x2000001c

08005aa4 <cleanup_stdio>:
 8005aa4:	6841      	ldr	r1, [r0, #4]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <cleanup_stdio+0x34>)
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	d001      	beq.n	8005ab4 <cleanup_stdio+0x10>
 8005ab0:	f002 fdc0 	bl	8008634 <_fflush_r>
 8005ab4:	68a1      	ldr	r1, [r4, #8]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <cleanup_stdio+0x38>)
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <cleanup_stdio+0x1e>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f002 fdb9 	bl	8008634 <_fflush_r>
 8005ac2:	68e1      	ldr	r1, [r4, #12]
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <cleanup_stdio+0x3c>)
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d004      	beq.n	8005ad4 <cleanup_stdio+0x30>
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f002 bdb0 	b.w	8008634 <_fflush_r>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000360 	.word	0x20000360
 8005adc:	200003c8 	.word	0x200003c8
 8005ae0:	20000430 	.word	0x20000430

08005ae4 <global_stdio_init.part.0>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <global_stdio_init.part.0+0x30>)
 8005ae8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x34>)
 8005aea:	4a0c      	ldr	r2, [pc, #48]	@ (8005b1c <global_stdio_init.part.0+0x38>)
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4620      	mov	r0, r4
 8005af0:	2200      	movs	r2, #0
 8005af2:	2104      	movs	r1, #4
 8005af4:	f7ff ff94 	bl	8005a20 <std>
 8005af8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005afc:	2201      	movs	r2, #1
 8005afe:	2109      	movs	r1, #9
 8005b00:	f7ff ff8e 	bl	8005a20 <std>
 8005b04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b08:	2202      	movs	r2, #2
 8005b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0e:	2112      	movs	r1, #18
 8005b10:	f7ff bf86 	b.w	8005a20 <std>
 8005b14:	20000498 	.word	0x20000498
 8005b18:	20000360 	.word	0x20000360
 8005b1c:	08005a8d 	.word	0x08005a8d

08005b20 <__sfp_lock_acquire>:
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <__sfp_lock_acquire+0x8>)
 8005b22:	f000 b920 	b.w	8005d66 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	200004a1 	.word	0x200004a1

08005b2c <__sfp_lock_release>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__sfp_lock_release+0x8>)
 8005b2e:	f000 b91b 	b.w	8005d68 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	200004a1 	.word	0x200004a1

08005b38 <__sinit>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7ff fff0 	bl	8005b20 <__sfp_lock_acquire>
 8005b40:	6a23      	ldr	r3, [r4, #32]
 8005b42:	b11b      	cbz	r3, 8005b4c <__sinit+0x14>
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f7ff bff0 	b.w	8005b2c <__sfp_lock_release>
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <__sinit+0x28>)
 8005b4e:	6223      	str	r3, [r4, #32]
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x2c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f5      	bne.n	8005b44 <__sinit+0xc>
 8005b58:	f7ff ffc4 	bl	8005ae4 <global_stdio_init.part.0>
 8005b5c:	e7f2      	b.n	8005b44 <__sinit+0xc>
 8005b5e:	bf00      	nop
 8005b60:	08005aa5 	.word	0x08005aa5
 8005b64:	20000498 	.word	0x20000498

08005b68 <_fwalk_sglue>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	4688      	mov	r8, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	2600      	movs	r6, #0
 8005b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b78:	f1b9 0901 	subs.w	r9, r9, #1
 8005b7c:	d505      	bpl.n	8005b8a <_fwalk_sglue+0x22>
 8005b7e:	6824      	ldr	r4, [r4, #0]
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d1f7      	bne.n	8005b74 <_fwalk_sglue+0xc>
 8005b84:	4630      	mov	r0, r6
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d907      	bls.n	8005ba0 <_fwalk_sglue+0x38>
 8005b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b94:	3301      	adds	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <_fwalk_sglue+0x38>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	4306      	orrs	r6, r0
 8005ba0:	3568      	adds	r5, #104	@ 0x68
 8005ba2:	e7e9      	b.n	8005b78 <_fwalk_sglue+0x10>

08005ba4 <siprintf>:
 8005ba4:	b40e      	push	{r1, r2, r3}
 8005ba6:	b500      	push	{lr}
 8005ba8:	b09c      	sub	sp, #112	@ 0x70
 8005baa:	ab1d      	add	r3, sp, #116	@ 0x74
 8005bac:	9002      	str	r0, [sp, #8]
 8005bae:	9006      	str	r0, [sp, #24]
 8005bb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bb4:	4809      	ldr	r0, [pc, #36]	@ (8005bdc <siprintf+0x38>)
 8005bb6:	9107      	str	r1, [sp, #28]
 8005bb8:	9104      	str	r1, [sp, #16]
 8005bba:	4909      	ldr	r1, [pc, #36]	@ (8005be0 <siprintf+0x3c>)
 8005bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc0:	9105      	str	r1, [sp, #20]
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	a902      	add	r1, sp, #8
 8005bc8:	f002 fbb4 	bl	8008334 <_svfiprintf_r>
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	b01c      	add	sp, #112	@ 0x70
 8005bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd8:	b003      	add	sp, #12
 8005bda:	4770      	bx	lr
 8005bdc:	20000018 	.word	0x20000018
 8005be0:	ffff0208 	.word	0xffff0208

08005be4 <__sread>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	460c      	mov	r4, r1
 8005be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bec:	f000 f86c 	bl	8005cc8 <_read_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	bfab      	itete	ge
 8005bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf8:	181b      	addge	r3, r3, r0
 8005bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bfe:	bfac      	ite	ge
 8005c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c02:	81a3      	strhlt	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__swrite>:
 8005c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	898b      	ldrh	r3, [r1, #12]
 8005c0e:	05db      	lsls	r3, r3, #23
 8005c10:	4605      	mov	r5, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	4616      	mov	r6, r2
 8005c16:	d505      	bpl.n	8005c24 <__swrite+0x1e>
 8005c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f000 f840 	bl	8005ca4 <_lseek_r>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	4632      	mov	r2, r6
 8005c32:	463b      	mov	r3, r7
 8005c34:	4628      	mov	r0, r5
 8005c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	f000 b857 	b.w	8005cec <_write_r>

08005c3e <__sseek>:
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	460c      	mov	r4, r1
 8005c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c46:	f000 f82d 	bl	8005ca4 <_lseek_r>
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	bf15      	itete	ne
 8005c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c5a:	81a3      	strheq	r3, [r4, #12]
 8005c5c:	bf18      	it	ne
 8005c5e:	81a3      	strhne	r3, [r4, #12]
 8005c60:	bd10      	pop	{r4, pc}

08005c62 <__sclose>:
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 b80d 	b.w	8005c84 <_close_r>

08005c6a <memset>:
 8005c6a:	4402      	add	r2, r0
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d100      	bne.n	8005c74 <memset+0xa>
 8005c72:	4770      	bx	lr
 8005c74:	f803 1b01 	strb.w	r1, [r3], #1
 8005c78:	e7f9      	b.n	8005c6e <memset+0x4>
	...

08005c7c <_localeconv_r>:
 8005c7c:	4800      	ldr	r0, [pc, #0]	@ (8005c80 <_localeconv_r+0x4>)
 8005c7e:	4770      	bx	lr
 8005c80:	20000158 	.word	0x20000158

08005c84 <_close_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	@ (8005ca0 <_close_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb fc00 	bl	8001494 <_close>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_close_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_close_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	2000049c 	.word	0x2000049c

08005ca4 <_lseek_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	@ (8005cc4 <_lseek_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fb fc15 	bl	80014e2 <_lseek>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_lseek_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_lseek_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	2000049c 	.word	0x2000049c

08005cc8 <_read_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d07      	ldr	r5, [pc, #28]	@ (8005ce8 <_read_r+0x20>)
 8005ccc:	4604      	mov	r4, r0
 8005cce:	4608      	mov	r0, r1
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	602a      	str	r2, [r5, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f7fb fba3 	bl	8001422 <_read>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_read_r+0x1e>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_read_r+0x1e>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	2000049c 	.word	0x2000049c

08005cec <_write_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d07      	ldr	r5, [pc, #28]	@ (8005d0c <_write_r+0x20>)
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	4608      	mov	r0, r1
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f7fb fbae 	bl	800145c <_write>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_write_r+0x1e>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_write_r+0x1e>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	2000049c 	.word	0x2000049c

08005d10 <__errno>:
 8005d10:	4b01      	ldr	r3, [pc, #4]	@ (8005d18 <__errno+0x8>)
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000018 	.word	0x20000018

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	@ (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1b64      	subs	r4, r4, r5
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2600      	movs	r6, #0
 8005d28:	42a6      	cmp	r6, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d60 <__libc_init_array+0x44>)
 8005d30:	f003 fb70 	bl	8009414 <_init>
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42a6      	cmp	r6, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d44:	4798      	blx	r3
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4e:	4798      	blx	r3
 8005d50:	3601      	adds	r6, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	080098b0 	.word	0x080098b0
 8005d58:	080098b0 	.word	0x080098b0
 8005d5c:	080098b0 	.word	0x080098b0
 8005d60:	080098b4 	.word	0x080098b4

08005d64 <__retarget_lock_init_recursive>:
 8005d64:	4770      	bx	lr

08005d66 <__retarget_lock_acquire_recursive>:
 8005d66:	4770      	bx	lr

08005d68 <__retarget_lock_release_recursive>:
 8005d68:	4770      	bx	lr
	...

08005d6c <nanf>:
 8005d6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005d74 <nanf+0x8>
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	7fc00000 	.word	0x7fc00000

08005d78 <quorem>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	6903      	ldr	r3, [r0, #16]
 8005d7e:	690c      	ldr	r4, [r1, #16]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	4607      	mov	r7, r0
 8005d84:	db7e      	blt.n	8005e84 <quorem+0x10c>
 8005d86:	3c01      	subs	r4, #1
 8005d88:	f101 0814 	add.w	r8, r1, #20
 8005d8c:	00a3      	lsls	r3, r4, #2
 8005d8e:	f100 0514 	add.w	r5, r0, #20
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da2:	3301      	adds	r3, #1
 8005da4:	429a      	cmp	r2, r3
 8005da6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005daa:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dae:	d32e      	bcc.n	8005e0e <quorem+0x96>
 8005db0:	f04f 0a00 	mov.w	sl, #0
 8005db4:	46c4      	mov	ip, r8
 8005db6:	46ae      	mov	lr, r5
 8005db8:	46d3      	mov	fp, sl
 8005dba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	fb06 a000 	mla	r0, r6, r0, sl
 8005dc4:	0c02      	lsrs	r2, r0, #16
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	fb06 2303 	mla	r3, r6, r3, r2
 8005dcc:	f8de 2000 	ldr.w	r2, [lr]
 8005dd0:	b280      	uxth	r0, r0
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	1a12      	subs	r2, r2, r0
 8005dd6:	445a      	add	r2, fp
 8005dd8:	f8de 0000 	ldr.w	r0, [lr]
 8005ddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005de6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dea:	b292      	uxth	r2, r2
 8005dec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005df0:	45e1      	cmp	r9, ip
 8005df2:	f84e 2b04 	str.w	r2, [lr], #4
 8005df6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dfa:	d2de      	bcs.n	8005dba <quorem+0x42>
 8005dfc:	9b00      	ldr	r3, [sp, #0]
 8005dfe:	58eb      	ldr	r3, [r5, r3]
 8005e00:	b92b      	cbnz	r3, 8005e0e <quorem+0x96>
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	429d      	cmp	r5, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	d32f      	bcc.n	8005e6c <quorem+0xf4>
 8005e0c:	613c      	str	r4, [r7, #16]
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f001 f9c2 	bl	8007198 <__mcmp>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	db25      	blt.n	8005e64 <quorem+0xec>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e20:	f8d1 c000 	ldr.w	ip, [r1]
 8005e24:	fa1f fe82 	uxth.w	lr, r2
 8005e28:	fa1f f38c 	uxth.w	r3, ip
 8005e2c:	eba3 030e 	sub.w	r3, r3, lr
 8005e30:	4403      	add	r3, r0
 8005e32:	0c12      	lsrs	r2, r2, #16
 8005e34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e42:	45c1      	cmp	r9, r8
 8005e44:	f841 3b04 	str.w	r3, [r1], #4
 8005e48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e4c:	d2e6      	bcs.n	8005e1c <quorem+0xa4>
 8005e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e56:	b922      	cbnz	r2, 8005e62 <quorem+0xea>
 8005e58:	3b04      	subs	r3, #4
 8005e5a:	429d      	cmp	r5, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	d30b      	bcc.n	8005e78 <quorem+0x100>
 8005e60:	613c      	str	r4, [r7, #16]
 8005e62:	3601      	adds	r6, #1
 8005e64:	4630      	mov	r0, r6
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	d1cb      	bne.n	8005e0c <quorem+0x94>
 8005e74:	3c01      	subs	r4, #1
 8005e76:	e7c6      	b.n	8005e06 <quorem+0x8e>
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	3b04      	subs	r3, #4
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d1ef      	bne.n	8005e60 <quorem+0xe8>
 8005e80:	3c01      	subs	r4, #1
 8005e82:	e7ea      	b.n	8005e5a <quorem+0xe2>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7ee      	b.n	8005e66 <quorem+0xee>

08005e88 <_dtoa_r>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	69c7      	ldr	r7, [r0, #28]
 8005e8e:	b099      	sub	sp, #100	@ 0x64
 8005e90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e94:	ec55 4b10 	vmov	r4, r5, d0
 8005e98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e9c:	4683      	mov	fp, r0
 8005e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ea2:	b97f      	cbnz	r7, 8005ec4 <_dtoa_r+0x3c>
 8005ea4:	2010      	movs	r0, #16
 8005ea6:	f000 fdfd 	bl	8006aa4 <malloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	f8cb 001c 	str.w	r0, [fp, #28]
 8005eb0:	b920      	cbnz	r0, 8005ebc <_dtoa_r+0x34>
 8005eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8006150 <_dtoa_r+0x2c8>)
 8005eb4:	21ef      	movs	r1, #239	@ 0xef
 8005eb6:	48a7      	ldr	r0, [pc, #668]	@ (8006154 <_dtoa_r+0x2cc>)
 8005eb8:	f002 fc36 	bl	8008728 <__assert_func>
 8005ebc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ec0:	6007      	str	r7, [r0, #0]
 8005ec2:	60c7      	str	r7, [r0, #12]
 8005ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	b159      	cbz	r1, 8005ee4 <_dtoa_r+0x5c>
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	604a      	str	r2, [r1, #4]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4093      	lsls	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
 8005ed6:	4658      	mov	r0, fp
 8005ed8:	f000 feda 	bl	8006c90 <_Bfree>
 8005edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	1e2b      	subs	r3, r5, #0
 8005ee6:	bfb9      	ittee	lt
 8005ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	9303      	strlt	r3, [sp, #12]
 8005eee:	2300      	movge	r3, #0
 8005ef0:	6033      	strge	r3, [r6, #0]
 8005ef2:	9f03      	ldr	r7, [sp, #12]
 8005ef4:	4b98      	ldr	r3, [pc, #608]	@ (8006158 <_dtoa_r+0x2d0>)
 8005ef6:	bfbc      	itt	lt
 8005ef8:	2201      	movlt	r2, #1
 8005efa:	6032      	strlt	r2, [r6, #0]
 8005efc:	43bb      	bics	r3, r7
 8005efe:	d112      	bne.n	8005f26 <_dtoa_r+0x9e>
 8005f00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f0c:	4323      	orrs	r3, r4
 8005f0e:	f000 854d 	beq.w	80069ac <_dtoa_r+0xb24>
 8005f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800616c <_dtoa_r+0x2e4>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 854f 	beq.w	80069bc <_dtoa_r+0xb34>
 8005f1e:	f10a 0303 	add.w	r3, sl, #3
 8005f22:	f000 bd49 	b.w	80069b8 <_dtoa_r+0xb30>
 8005f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	ec51 0b17 	vmov	r0, r1, d7
 8005f30:	2300      	movs	r3, #0
 8005f32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f36:	f7fa fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	b158      	cbz	r0, 8005f56 <_dtoa_r+0xce>
 8005f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f40:	2301      	movs	r3, #1
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f46:	b113      	cbz	r3, 8005f4e <_dtoa_r+0xc6>
 8005f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f4a:	4b84      	ldr	r3, [pc, #528]	@ (800615c <_dtoa_r+0x2d4>)
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006170 <_dtoa_r+0x2e8>
 8005f52:	f000 bd33 	b.w	80069bc <_dtoa_r+0xb34>
 8005f56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f5a:	aa16      	add	r2, sp, #88	@ 0x58
 8005f5c:	a917      	add	r1, sp, #92	@ 0x5c
 8005f5e:	4658      	mov	r0, fp
 8005f60:	f001 fa3a 	bl	80073d8 <__d2b>
 8005f64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f68:	4681      	mov	r9, r0
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	d077      	beq.n	800605e <_dtoa_r+0x1d6>
 8005f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f88:	4619      	mov	r1, r3
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4b74      	ldr	r3, [pc, #464]	@ (8006160 <_dtoa_r+0x2d8>)
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	a369      	add	r3, pc, #420	@ (adr r3, 8006138 <_dtoa_r+0x2b0>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa fb2e 	bl	80005f8 <__aeabi_dmul>
 8005f9c:	a368      	add	r3, pc, #416	@ (adr r3, 8006140 <_dtoa_r+0x2b8>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa f973 	bl	800028c <__adddf3>
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4630      	mov	r0, r6
 8005faa:	460d      	mov	r5, r1
 8005fac:	f7fa faba 	bl	8000524 <__aeabi_i2d>
 8005fb0:	a365      	add	r3, pc, #404	@ (adr r3, 8006148 <_dtoa_r+0x2c0>)
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f7fa fb1f 	bl	80005f8 <__aeabi_dmul>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa f963 	bl	800028c <__adddf3>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	460d      	mov	r5, r1
 8005fca:	f7fa fdc5 	bl	8000b58 <__aeabi_d2iz>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fd80 	bl	8000adc <__aeabi_dcmplt>
 8005fdc:	b140      	cbz	r0, 8005ff0 <_dtoa_r+0x168>
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7fa faa0 	bl	8000524 <__aeabi_i2d>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	f7fa fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fec:	b900      	cbnz	r0, 8005ff0 <_dtoa_r+0x168>
 8005fee:	3f01      	subs	r7, #1
 8005ff0:	2f16      	cmp	r7, #22
 8005ff2:	d851      	bhi.n	8006098 <_dtoa_r+0x210>
 8005ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8006164 <_dtoa_r+0x2dc>)
 8005ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006002:	f7fa fd6b 	bl	8000adc <__aeabi_dcmplt>
 8006006:	2800      	cmp	r0, #0
 8006008:	d048      	beq.n	800609c <_dtoa_r+0x214>
 800600a:	3f01      	subs	r7, #1
 800600c:	2300      	movs	r3, #0
 800600e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006012:	1b9b      	subs	r3, r3, r6
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	bf44      	itt	mi
 8006018:	f1c3 0801 	rsbmi	r8, r3, #1
 800601c:	2300      	movmi	r3, #0
 800601e:	9208      	str	r2, [sp, #32]
 8006020:	bf54      	ite	pl
 8006022:	f04f 0800 	movpl.w	r8, #0
 8006026:	9308      	strmi	r3, [sp, #32]
 8006028:	2f00      	cmp	r7, #0
 800602a:	db39      	blt.n	80060a0 <_dtoa_r+0x218>
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006030:	443b      	add	r3, r7
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	2300      	movs	r3, #0
 8006036:	930a      	str	r3, [sp, #40]	@ 0x28
 8006038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603a:	2b09      	cmp	r3, #9
 800603c:	d864      	bhi.n	8006108 <_dtoa_r+0x280>
 800603e:	2b05      	cmp	r3, #5
 8006040:	bfc4      	itt	gt
 8006042:	3b04      	subgt	r3, #4
 8006044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006048:	f1a3 0302 	sub.w	r3, r3, #2
 800604c:	bfcc      	ite	gt
 800604e:	2400      	movgt	r4, #0
 8006050:	2401      	movle	r4, #1
 8006052:	2b03      	cmp	r3, #3
 8006054:	d863      	bhi.n	800611e <_dtoa_r+0x296>
 8006056:	e8df f003 	tbb	[pc, r3]
 800605a:	372a      	.short	0x372a
 800605c:	5535      	.short	0x5535
 800605e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006062:	441e      	add	r6, r3
 8006064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006068:	2b20      	cmp	r3, #32
 800606a:	bfc1      	itttt	gt
 800606c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006070:	409f      	lslgt	r7, r3
 8006072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800607a:	bfd6      	itet	le
 800607c:	f1c3 0320 	rsble	r3, r3, #32
 8006080:	ea47 0003 	orrgt.w	r0, r7, r3
 8006084:	fa04 f003 	lslle.w	r0, r4, r3
 8006088:	f7fa fa3c 	bl	8000504 <__aeabi_ui2d>
 800608c:	2201      	movs	r2, #1
 800608e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006092:	3e01      	subs	r6, #1
 8006094:	9214      	str	r2, [sp, #80]	@ 0x50
 8006096:	e777      	b.n	8005f88 <_dtoa_r+0x100>
 8006098:	2301      	movs	r3, #1
 800609a:	e7b8      	b.n	800600e <_dtoa_r+0x186>
 800609c:	9012      	str	r0, [sp, #72]	@ 0x48
 800609e:	e7b7      	b.n	8006010 <_dtoa_r+0x188>
 80060a0:	427b      	negs	r3, r7
 80060a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a4:	2300      	movs	r3, #0
 80060a6:	eba8 0807 	sub.w	r8, r8, r7
 80060aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060ac:	e7c4      	b.n	8006038 <_dtoa_r+0x1b0>
 80060ae:	2300      	movs	r3, #0
 80060b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dc35      	bgt.n	8006124 <_dtoa_r+0x29c>
 80060b8:	2301      	movs	r3, #1
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	9307      	str	r3, [sp, #28]
 80060be:	461a      	mov	r2, r3
 80060c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80060c2:	e00b      	b.n	80060dc <_dtoa_r+0x254>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e7f3      	b.n	80060b0 <_dtoa_r+0x228>
 80060c8:	2300      	movs	r3, #0
 80060ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	9307      	str	r3, [sp, #28]
 80060d8:	bfb8      	it	lt
 80060da:	2301      	movlt	r3, #1
 80060dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060e0:	2100      	movs	r1, #0
 80060e2:	2204      	movs	r2, #4
 80060e4:	f102 0514 	add.w	r5, r2, #20
 80060e8:	429d      	cmp	r5, r3
 80060ea:	d91f      	bls.n	800612c <_dtoa_r+0x2a4>
 80060ec:	6041      	str	r1, [r0, #4]
 80060ee:	4658      	mov	r0, fp
 80060f0:	f000 fd8e 	bl	8006c10 <_Balloc>
 80060f4:	4682      	mov	sl, r0
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d13c      	bne.n	8006174 <_dtoa_r+0x2ec>
 80060fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <_dtoa_r+0x2e0>)
 80060fc:	4602      	mov	r2, r0
 80060fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006102:	e6d8      	b.n	8005eb6 <_dtoa_r+0x2e>
 8006104:	2301      	movs	r3, #1
 8006106:	e7e0      	b.n	80060ca <_dtoa_r+0x242>
 8006108:	2401      	movs	r4, #1
 800610a:	2300      	movs	r3, #0
 800610c:	9309      	str	r3, [sp, #36]	@ 0x24
 800610e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	2200      	movs	r2, #0
 800611a:	2312      	movs	r3, #18
 800611c:	e7d0      	b.n	80060c0 <_dtoa_r+0x238>
 800611e:	2301      	movs	r3, #1
 8006120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006122:	e7f5      	b.n	8006110 <_dtoa_r+0x288>
 8006124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	9307      	str	r3, [sp, #28]
 800612a:	e7d7      	b.n	80060dc <_dtoa_r+0x254>
 800612c:	3101      	adds	r1, #1
 800612e:	0052      	lsls	r2, r2, #1
 8006130:	e7d8      	b.n	80060e4 <_dtoa_r+0x25c>
 8006132:	bf00      	nop
 8006134:	f3af 8000 	nop.w
 8006138:	636f4361 	.word	0x636f4361
 800613c:	3fd287a7 	.word	0x3fd287a7
 8006140:	8b60c8b3 	.word	0x8b60c8b3
 8006144:	3fc68a28 	.word	0x3fc68a28
 8006148:	509f79fb 	.word	0x509f79fb
 800614c:	3fd34413 	.word	0x3fd34413
 8006150:	080094be 	.word	0x080094be
 8006154:	080094d5 	.word	0x080094d5
 8006158:	7ff00000 	.word	0x7ff00000
 800615c:	08009489 	.word	0x08009489
 8006160:	3ff80000 	.word	0x3ff80000
 8006164:	080095d0 	.word	0x080095d0
 8006168:	0800952d 	.word	0x0800952d
 800616c:	080094ba 	.word	0x080094ba
 8006170:	08009488 	.word	0x08009488
 8006174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006178:	6018      	str	r0, [r3, #0]
 800617a:	9b07      	ldr	r3, [sp, #28]
 800617c:	2b0e      	cmp	r3, #14
 800617e:	f200 80a4 	bhi.w	80062ca <_dtoa_r+0x442>
 8006182:	2c00      	cmp	r4, #0
 8006184:	f000 80a1 	beq.w	80062ca <_dtoa_r+0x442>
 8006188:	2f00      	cmp	r7, #0
 800618a:	dd33      	ble.n	80061f4 <_dtoa_r+0x36c>
 800618c:	4bad      	ldr	r3, [pc, #692]	@ (8006444 <_dtoa_r+0x5bc>)
 800618e:	f007 020f 	and.w	r2, r7, #15
 8006192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006196:	ed93 7b00 	vldr	d7, [r3]
 800619a:	05f8      	lsls	r0, r7, #23
 800619c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061a4:	d516      	bpl.n	80061d4 <_dtoa_r+0x34c>
 80061a6:	4ba8      	ldr	r3, [pc, #672]	@ (8006448 <_dtoa_r+0x5c0>)
 80061a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061b0:	f7fa fb4c 	bl	800084c <__aeabi_ddiv>
 80061b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b8:	f004 040f 	and.w	r4, r4, #15
 80061bc:	2603      	movs	r6, #3
 80061be:	4da2      	ldr	r5, [pc, #648]	@ (8006448 <_dtoa_r+0x5c0>)
 80061c0:	b954      	cbnz	r4, 80061d8 <_dtoa_r+0x350>
 80061c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ca:	f7fa fb3f 	bl	800084c <__aeabi_ddiv>
 80061ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d2:	e028      	b.n	8006226 <_dtoa_r+0x39e>
 80061d4:	2602      	movs	r6, #2
 80061d6:	e7f2      	b.n	80061be <_dtoa_r+0x336>
 80061d8:	07e1      	lsls	r1, r4, #31
 80061da:	d508      	bpl.n	80061ee <_dtoa_r+0x366>
 80061dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ec:	3601      	adds	r6, #1
 80061ee:	1064      	asrs	r4, r4, #1
 80061f0:	3508      	adds	r5, #8
 80061f2:	e7e5      	b.n	80061c0 <_dtoa_r+0x338>
 80061f4:	f000 80d2 	beq.w	800639c <_dtoa_r+0x514>
 80061f8:	427c      	negs	r4, r7
 80061fa:	4b92      	ldr	r3, [pc, #584]	@ (8006444 <_dtoa_r+0x5bc>)
 80061fc:	4d92      	ldr	r5, [pc, #584]	@ (8006448 <_dtoa_r+0x5c0>)
 80061fe:	f004 020f 	and.w	r2, r4, #15
 8006202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006216:	1124      	asrs	r4, r4, #4
 8006218:	2300      	movs	r3, #0
 800621a:	2602      	movs	r6, #2
 800621c:	2c00      	cmp	r4, #0
 800621e:	f040 80b2 	bne.w	8006386 <_dtoa_r+0x4fe>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1d3      	bne.n	80061ce <_dtoa_r+0x346>
 8006226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80b7 	beq.w	80063a0 <_dtoa_r+0x518>
 8006232:	4b86      	ldr	r3, [pc, #536]	@ (800644c <_dtoa_r+0x5c4>)
 8006234:	2200      	movs	r2, #0
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa fc4f 	bl	8000adc <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	f000 80ae 	beq.w	80063a0 <_dtoa_r+0x518>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80aa 	beq.w	80063a0 <_dtoa_r+0x518>
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	dd37      	ble.n	80062c2 <_dtoa_r+0x43a>
 8006252:	1e7b      	subs	r3, r7, #1
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	4620      	mov	r0, r4
 8006258:	4b7d      	ldr	r3, [pc, #500]	@ (8006450 <_dtoa_r+0x5c8>)
 800625a:	2200      	movs	r2, #0
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006266:	9c00      	ldr	r4, [sp, #0]
 8006268:	3601      	adds	r6, #1
 800626a:	4630      	mov	r0, r6
 800626c:	f7fa f95a 	bl	8000524 <__aeabi_i2d>
 8006270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006274:	f7fa f9c0 	bl	80005f8 <__aeabi_dmul>
 8006278:	4b76      	ldr	r3, [pc, #472]	@ (8006454 <_dtoa_r+0x5cc>)
 800627a:	2200      	movs	r2, #0
 800627c:	f7fa f806 	bl	800028c <__adddf3>
 8006280:	4605      	mov	r5, r0
 8006282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006286:	2c00      	cmp	r4, #0
 8006288:	f040 808d 	bne.w	80063a6 <_dtoa_r+0x51e>
 800628c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006290:	4b71      	ldr	r3, [pc, #452]	@ (8006458 <_dtoa_r+0x5d0>)
 8006292:	2200      	movs	r2, #0
 8006294:	f7f9 fff8 	bl	8000288 <__aeabi_dsub>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4633      	mov	r3, r6
 80062a4:	f7fa fc38 	bl	8000b18 <__aeabi_dcmpgt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f040 828b 	bne.w	80067c4 <_dtoa_r+0x93c>
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	462a      	mov	r2, r5
 80062b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062b8:	f7fa fc10 	bl	8000adc <__aeabi_dcmplt>
 80062bc:	2800      	cmp	r0, #0
 80062be:	f040 8128 	bne.w	8006512 <_dtoa_r+0x68a>
 80062c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f2c0 815a 	blt.w	8006586 <_dtoa_r+0x6fe>
 80062d2:	2f0e      	cmp	r7, #14
 80062d4:	f300 8157 	bgt.w	8006586 <_dtoa_r+0x6fe>
 80062d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006444 <_dtoa_r+0x5bc>)
 80062da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062de:	ed93 7b00 	vldr	d7, [r3]
 80062e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	ed8d 7b00 	vstr	d7, [sp]
 80062ea:	da03      	bge.n	80062f4 <_dtoa_r+0x46c>
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f340 8101 	ble.w	80064f6 <_dtoa_r+0x66e>
 80062f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062f8:	4656      	mov	r6, sl
 80062fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa faa3 	bl	800084c <__aeabi_ddiv>
 8006306:	f7fa fc27 	bl	8000b58 <__aeabi_d2iz>
 800630a:	4680      	mov	r8, r0
 800630c:	f7fa f90a 	bl	8000524 <__aeabi_i2d>
 8006310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006324:	f7f9 ffb0 	bl	8000288 <__aeabi_dsub>
 8006328:	f806 4b01 	strb.w	r4, [r6], #1
 800632c:	9d07      	ldr	r5, [sp, #28]
 800632e:	eba6 040a 	sub.w	r4, r6, sl
 8006332:	42a5      	cmp	r5, r4
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	f040 8117 	bne.w	800656a <_dtoa_r+0x6e2>
 800633c:	f7f9 ffa6 	bl	800028c <__adddf3>
 8006340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006344:	4604      	mov	r4, r0
 8006346:	460d      	mov	r5, r1
 8006348:	f7fa fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800634c:	2800      	cmp	r0, #0
 800634e:	f040 80f9 	bne.w	8006544 <_dtoa_r+0x6bc>
 8006352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800635e:	b118      	cbz	r0, 8006368 <_dtoa_r+0x4e0>
 8006360:	f018 0f01 	tst.w	r8, #1
 8006364:	f040 80ee 	bne.w	8006544 <_dtoa_r+0x6bc>
 8006368:	4649      	mov	r1, r9
 800636a:	4658      	mov	r0, fp
 800636c:	f000 fc90 	bl	8006c90 <_Bfree>
 8006370:	2300      	movs	r3, #0
 8006372:	7033      	strb	r3, [r6, #0]
 8006374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006376:	3701      	adds	r7, #1
 8006378:	601f      	str	r7, [r3, #0]
 800637a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 831d 	beq.w	80069bc <_dtoa_r+0xb34>
 8006382:	601e      	str	r6, [r3, #0]
 8006384:	e31a      	b.n	80069bc <_dtoa_r+0xb34>
 8006386:	07e2      	lsls	r2, r4, #31
 8006388:	d505      	bpl.n	8006396 <_dtoa_r+0x50e>
 800638a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800638e:	f7fa f933 	bl	80005f8 <__aeabi_dmul>
 8006392:	3601      	adds	r6, #1
 8006394:	2301      	movs	r3, #1
 8006396:	1064      	asrs	r4, r4, #1
 8006398:	3508      	adds	r5, #8
 800639a:	e73f      	b.n	800621c <_dtoa_r+0x394>
 800639c:	2602      	movs	r6, #2
 800639e:	e742      	b.n	8006226 <_dtoa_r+0x39e>
 80063a0:	9c07      	ldr	r4, [sp, #28]
 80063a2:	9704      	str	r7, [sp, #16]
 80063a4:	e761      	b.n	800626a <_dtoa_r+0x3e2>
 80063a6:	4b27      	ldr	r3, [pc, #156]	@ (8006444 <_dtoa_r+0x5bc>)
 80063a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063b2:	4454      	add	r4, sl
 80063b4:	2900      	cmp	r1, #0
 80063b6:	d053      	beq.n	8006460 <_dtoa_r+0x5d8>
 80063b8:	4928      	ldr	r1, [pc, #160]	@ (800645c <_dtoa_r+0x5d4>)
 80063ba:	2000      	movs	r0, #0
 80063bc:	f7fa fa46 	bl	800084c <__aeabi_ddiv>
 80063c0:	4633      	mov	r3, r6
 80063c2:	462a      	mov	r2, r5
 80063c4:	f7f9 ff60 	bl	8000288 <__aeabi_dsub>
 80063c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063cc:	4656      	mov	r6, sl
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	f7fa fbc1 	bl	8000b58 <__aeabi_d2iz>
 80063d6:	4605      	mov	r5, r0
 80063d8:	f7fa f8a4 	bl	8000524 <__aeabi_i2d>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e4:	f7f9 ff50 	bl	8000288 <__aeabi_dsub>
 80063e8:	3530      	adds	r5, #48	@ 0x30
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f2:	f806 5b01 	strb.w	r5, [r6], #1
 80063f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063fa:	f7fa fb6f 	bl	8000adc <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d171      	bne.n	80064e6 <_dtoa_r+0x65e>
 8006402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006406:	4911      	ldr	r1, [pc, #68]	@ (800644c <_dtoa_r+0x5c4>)
 8006408:	2000      	movs	r0, #0
 800640a:	f7f9 ff3d 	bl	8000288 <__aeabi_dsub>
 800640e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006412:	f7fa fb63 	bl	8000adc <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f040 8095 	bne.w	8006546 <_dtoa_r+0x6be>
 800641c:	42a6      	cmp	r6, r4
 800641e:	f43f af50 	beq.w	80062c2 <_dtoa_r+0x43a>
 8006422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <_dtoa_r+0x5c8>)
 8006428:	2200      	movs	r2, #0
 800642a:	f7fa f8e5 	bl	80005f8 <__aeabi_dmul>
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <_dtoa_r+0x5c8>)
 8006430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006434:	2200      	movs	r2, #0
 8006436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643a:	f7fa f8dd 	bl	80005f8 <__aeabi_dmul>
 800643e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006442:	e7c4      	b.n	80063ce <_dtoa_r+0x546>
 8006444:	080095d0 	.word	0x080095d0
 8006448:	080095a8 	.word	0x080095a8
 800644c:	3ff00000 	.word	0x3ff00000
 8006450:	40240000 	.word	0x40240000
 8006454:	401c0000 	.word	0x401c0000
 8006458:	40140000 	.word	0x40140000
 800645c:	3fe00000 	.word	0x3fe00000
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	f7fa f8c8 	bl	80005f8 <__aeabi_dmul>
 8006468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800646c:	9415      	str	r4, [sp, #84]	@ 0x54
 800646e:	4656      	mov	r6, sl
 8006470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006474:	f7fa fb70 	bl	8000b58 <__aeabi_d2iz>
 8006478:	4605      	mov	r5, r0
 800647a:	f7fa f853 	bl	8000524 <__aeabi_i2d>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006486:	f7f9 feff 	bl	8000288 <__aeabi_dsub>
 800648a:	3530      	adds	r5, #48	@ 0x30
 800648c:	f806 5b01 	strb.w	r5, [r6], #1
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	42a6      	cmp	r6, r4
 8006496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	d124      	bne.n	80064ea <_dtoa_r+0x662>
 80064a0:	4bac      	ldr	r3, [pc, #688]	@ (8006754 <_dtoa_r+0x8cc>)
 80064a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064a6:	f7f9 fef1 	bl	800028c <__adddf3>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	f7fa fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d145      	bne.n	8006546 <_dtoa_r+0x6be>
 80064ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064be:	49a5      	ldr	r1, [pc, #660]	@ (8006754 <_dtoa_r+0x8cc>)
 80064c0:	2000      	movs	r0, #0
 80064c2:	f7f9 fee1 	bl	8000288 <__aeabi_dsub>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ce:	f7fa fb05 	bl	8000adc <__aeabi_dcmplt>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	f43f aef5 	beq.w	80062c2 <_dtoa_r+0x43a>
 80064d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064da:	1e73      	subs	r3, r6, #1
 80064dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80064de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064e2:	2b30      	cmp	r3, #48	@ 0x30
 80064e4:	d0f8      	beq.n	80064d8 <_dtoa_r+0x650>
 80064e6:	9f04      	ldr	r7, [sp, #16]
 80064e8:	e73e      	b.n	8006368 <_dtoa_r+0x4e0>
 80064ea:	4b9b      	ldr	r3, [pc, #620]	@ (8006758 <_dtoa_r+0x8d0>)
 80064ec:	f7fa f884 	bl	80005f8 <__aeabi_dmul>
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	e7bc      	b.n	8006470 <_dtoa_r+0x5e8>
 80064f6:	d10c      	bne.n	8006512 <_dtoa_r+0x68a>
 80064f8:	4b98      	ldr	r3, [pc, #608]	@ (800675c <_dtoa_r+0x8d4>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006500:	f7fa f87a 	bl	80005f8 <__aeabi_dmul>
 8006504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006508:	f7fa fafc 	bl	8000b04 <__aeabi_dcmpge>
 800650c:	2800      	cmp	r0, #0
 800650e:	f000 8157 	beq.w	80067c0 <_dtoa_r+0x938>
 8006512:	2400      	movs	r4, #0
 8006514:	4625      	mov	r5, r4
 8006516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006518:	43db      	mvns	r3, r3
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	4656      	mov	r6, sl
 800651e:	2700      	movs	r7, #0
 8006520:	4621      	mov	r1, r4
 8006522:	4658      	mov	r0, fp
 8006524:	f000 fbb4 	bl	8006c90 <_Bfree>
 8006528:	2d00      	cmp	r5, #0
 800652a:	d0dc      	beq.n	80064e6 <_dtoa_r+0x65e>
 800652c:	b12f      	cbz	r7, 800653a <_dtoa_r+0x6b2>
 800652e:	42af      	cmp	r7, r5
 8006530:	d003      	beq.n	800653a <_dtoa_r+0x6b2>
 8006532:	4639      	mov	r1, r7
 8006534:	4658      	mov	r0, fp
 8006536:	f000 fbab 	bl	8006c90 <_Bfree>
 800653a:	4629      	mov	r1, r5
 800653c:	4658      	mov	r0, fp
 800653e:	f000 fba7 	bl	8006c90 <_Bfree>
 8006542:	e7d0      	b.n	80064e6 <_dtoa_r+0x65e>
 8006544:	9704      	str	r7, [sp, #16]
 8006546:	4633      	mov	r3, r6
 8006548:	461e      	mov	r6, r3
 800654a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800654e:	2a39      	cmp	r2, #57	@ 0x39
 8006550:	d107      	bne.n	8006562 <_dtoa_r+0x6da>
 8006552:	459a      	cmp	sl, r3
 8006554:	d1f8      	bne.n	8006548 <_dtoa_r+0x6c0>
 8006556:	9a04      	ldr	r2, [sp, #16]
 8006558:	3201      	adds	r2, #1
 800655a:	9204      	str	r2, [sp, #16]
 800655c:	2230      	movs	r2, #48	@ 0x30
 800655e:	f88a 2000 	strb.w	r2, [sl]
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	3201      	adds	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e7bd      	b.n	80064e6 <_dtoa_r+0x65e>
 800656a:	4b7b      	ldr	r3, [pc, #492]	@ (8006758 <_dtoa_r+0x8d0>)
 800656c:	2200      	movs	r2, #0
 800656e:	f7fa f843 	bl	80005f8 <__aeabi_dmul>
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	4604      	mov	r4, r0
 8006578:	460d      	mov	r5, r1
 800657a:	f7fa faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f aebb 	beq.w	80062fa <_dtoa_r+0x472>
 8006584:	e6f0      	b.n	8006368 <_dtoa_r+0x4e0>
 8006586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006588:	2a00      	cmp	r2, #0
 800658a:	f000 80db 	beq.w	8006744 <_dtoa_r+0x8bc>
 800658e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006590:	2a01      	cmp	r2, #1
 8006592:	f300 80bf 	bgt.w	8006714 <_dtoa_r+0x88c>
 8006596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006598:	2a00      	cmp	r2, #0
 800659a:	f000 80b7 	beq.w	800670c <_dtoa_r+0x884>
 800659e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065a4:	4646      	mov	r6, r8
 80065a6:	9a08      	ldr	r2, [sp, #32]
 80065a8:	2101      	movs	r1, #1
 80065aa:	441a      	add	r2, r3
 80065ac:	4658      	mov	r0, fp
 80065ae:	4498      	add	r8, r3
 80065b0:	9208      	str	r2, [sp, #32]
 80065b2:	f000 fc6b 	bl	8006e8c <__i2b>
 80065b6:	4605      	mov	r5, r0
 80065b8:	b15e      	cbz	r6, 80065d2 <_dtoa_r+0x74a>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd08      	ble.n	80065d2 <_dtoa_r+0x74a>
 80065c0:	42b3      	cmp	r3, r6
 80065c2:	9a08      	ldr	r2, [sp, #32]
 80065c4:	bfa8      	it	ge
 80065c6:	4633      	movge	r3, r6
 80065c8:	eba8 0803 	sub.w	r8, r8, r3
 80065cc:	1af6      	subs	r6, r6, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	9308      	str	r3, [sp, #32]
 80065d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d4:	b1f3      	cbz	r3, 8006614 <_dtoa_r+0x78c>
 80065d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80b7 	beq.w	800674c <_dtoa_r+0x8c4>
 80065de:	b18c      	cbz	r4, 8006604 <_dtoa_r+0x77c>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4622      	mov	r2, r4
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fd11 	bl	800700c <__pow5mult>
 80065ea:	464a      	mov	r2, r9
 80065ec:	4601      	mov	r1, r0
 80065ee:	4605      	mov	r5, r0
 80065f0:	4658      	mov	r0, fp
 80065f2:	f000 fc61 	bl	8006eb8 <__multiply>
 80065f6:	4649      	mov	r1, r9
 80065f8:	9004      	str	r0, [sp, #16]
 80065fa:	4658      	mov	r0, fp
 80065fc:	f000 fb48 	bl	8006c90 <_Bfree>
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	4699      	mov	r9, r3
 8006604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006606:	1b1a      	subs	r2, r3, r4
 8006608:	d004      	beq.n	8006614 <_dtoa_r+0x78c>
 800660a:	4649      	mov	r1, r9
 800660c:	4658      	mov	r0, fp
 800660e:	f000 fcfd 	bl	800700c <__pow5mult>
 8006612:	4681      	mov	r9, r0
 8006614:	2101      	movs	r1, #1
 8006616:	4658      	mov	r0, fp
 8006618:	f000 fc38 	bl	8006e8c <__i2b>
 800661c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800661e:	4604      	mov	r4, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 81cf 	beq.w	80069c4 <_dtoa_r+0xb3c>
 8006626:	461a      	mov	r2, r3
 8006628:	4601      	mov	r1, r0
 800662a:	4658      	mov	r0, fp
 800662c:	f000 fcee 	bl	800700c <__pow5mult>
 8006630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006632:	2b01      	cmp	r3, #1
 8006634:	4604      	mov	r4, r0
 8006636:	f300 8095 	bgt.w	8006764 <_dtoa_r+0x8dc>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8087 	bne.w	8006750 <_dtoa_r+0x8c8>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006648:	2b00      	cmp	r3, #0
 800664a:	f040 8089 	bne.w	8006760 <_dtoa_r+0x8d8>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006654:	0d1b      	lsrs	r3, r3, #20
 8006656:	051b      	lsls	r3, r3, #20
 8006658:	b12b      	cbz	r3, 8006666 <_dtoa_r+0x7de>
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	3301      	adds	r3, #1
 800665e:	9308      	str	r3, [sp, #32]
 8006660:	f108 0801 	add.w	r8, r8, #1
 8006664:	2301      	movs	r3, #1
 8006666:	930a      	str	r3, [sp, #40]	@ 0x28
 8006668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 81b0 	beq.w	80069d0 <_dtoa_r+0xb48>
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006676:	6918      	ldr	r0, [r3, #16]
 8006678:	f000 fbbc 	bl	8006df4 <__hi0bits>
 800667c:	f1c0 0020 	rsb	r0, r0, #32
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	4418      	add	r0, r3
 8006684:	f010 001f 	ands.w	r0, r0, #31
 8006688:	d077      	beq.n	800677a <_dtoa_r+0x8f2>
 800668a:	f1c0 0320 	rsb	r3, r0, #32
 800668e:	2b04      	cmp	r3, #4
 8006690:	dd6b      	ble.n	800676a <_dtoa_r+0x8e2>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	f1c0 001c 	rsb	r0, r0, #28
 8006698:	4403      	add	r3, r0
 800669a:	4480      	add	r8, r0
 800669c:	4406      	add	r6, r0
 800669e:	9308      	str	r3, [sp, #32]
 80066a0:	f1b8 0f00 	cmp.w	r8, #0
 80066a4:	dd05      	ble.n	80066b2 <_dtoa_r+0x82a>
 80066a6:	4649      	mov	r1, r9
 80066a8:	4642      	mov	r2, r8
 80066aa:	4658      	mov	r0, fp
 80066ac:	f000 fd08 	bl	80070c0 <__lshift>
 80066b0:	4681      	mov	r9, r0
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dd05      	ble.n	80066c4 <_dtoa_r+0x83c>
 80066b8:	4621      	mov	r1, r4
 80066ba:	461a      	mov	r2, r3
 80066bc:	4658      	mov	r0, fp
 80066be:	f000 fcff 	bl	80070c0 <__lshift>
 80066c2:	4604      	mov	r4, r0
 80066c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d059      	beq.n	800677e <_dtoa_r+0x8f6>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fd63 	bl	8007198 <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	da53      	bge.n	800677e <_dtoa_r+0x8f6>
 80066d6:	1e7b      	subs	r3, r7, #1
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	4649      	mov	r1, r9
 80066dc:	2300      	movs	r3, #0
 80066de:	220a      	movs	r2, #10
 80066e0:	4658      	mov	r0, fp
 80066e2:	f000 faf7 	bl	8006cd4 <__multadd>
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	4681      	mov	r9, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8172 	beq.w	80069d4 <_dtoa_r+0xb4c>
 80066f0:	2300      	movs	r3, #0
 80066f2:	4629      	mov	r1, r5
 80066f4:	220a      	movs	r2, #10
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 faec 	bl	8006cd4 <__multadd>
 80066fc:	9b00      	ldr	r3, [sp, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	4605      	mov	r5, r0
 8006702:	dc67      	bgt.n	80067d4 <_dtoa_r+0x94c>
 8006704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006706:	2b02      	cmp	r3, #2
 8006708:	dc41      	bgt.n	800678e <_dtoa_r+0x906>
 800670a:	e063      	b.n	80067d4 <_dtoa_r+0x94c>
 800670c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800670e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006712:	e746      	b.n	80065a2 <_dtoa_r+0x71a>
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	1e5c      	subs	r4, r3, #1
 8006718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800671a:	42a3      	cmp	r3, r4
 800671c:	bfbf      	itttt	lt
 800671e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006724:	1ae3      	sublt	r3, r4, r3
 8006726:	bfb4      	ite	lt
 8006728:	18d2      	addlt	r2, r2, r3
 800672a:	1b1c      	subge	r4, r3, r4
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	bfbc      	itt	lt
 8006730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006732:	2400      	movlt	r4, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfb5      	itete	lt
 8006738:	eba8 0603 	sublt.w	r6, r8, r3
 800673c:	9b07      	ldrge	r3, [sp, #28]
 800673e:	2300      	movlt	r3, #0
 8006740:	4646      	movge	r6, r8
 8006742:	e730      	b.n	80065a6 <_dtoa_r+0x71e>
 8006744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006748:	4646      	mov	r6, r8
 800674a:	e735      	b.n	80065b8 <_dtoa_r+0x730>
 800674c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800674e:	e75c      	b.n	800660a <_dtoa_r+0x782>
 8006750:	2300      	movs	r3, #0
 8006752:	e788      	b.n	8006666 <_dtoa_r+0x7de>
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	40240000 	.word	0x40240000
 800675c:	40140000 	.word	0x40140000
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	e780      	b.n	8006666 <_dtoa_r+0x7de>
 8006764:	2300      	movs	r3, #0
 8006766:	930a      	str	r3, [sp, #40]	@ 0x28
 8006768:	e782      	b.n	8006670 <_dtoa_r+0x7e8>
 800676a:	d099      	beq.n	80066a0 <_dtoa_r+0x818>
 800676c:	9a08      	ldr	r2, [sp, #32]
 800676e:	331c      	adds	r3, #28
 8006770:	441a      	add	r2, r3
 8006772:	4498      	add	r8, r3
 8006774:	441e      	add	r6, r3
 8006776:	9208      	str	r2, [sp, #32]
 8006778:	e792      	b.n	80066a0 <_dtoa_r+0x818>
 800677a:	4603      	mov	r3, r0
 800677c:	e7f6      	b.n	800676c <_dtoa_r+0x8e4>
 800677e:	9b07      	ldr	r3, [sp, #28]
 8006780:	9704      	str	r7, [sp, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	dc20      	bgt.n	80067c8 <_dtoa_r+0x940>
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678a:	2b02      	cmp	r3, #2
 800678c:	dd1e      	ble.n	80067cc <_dtoa_r+0x944>
 800678e:	9b00      	ldr	r3, [sp, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f aec0 	bne.w	8006516 <_dtoa_r+0x68e>
 8006796:	4621      	mov	r1, r4
 8006798:	2205      	movs	r2, #5
 800679a:	4658      	mov	r0, fp
 800679c:	f000 fa9a 	bl	8006cd4 <__multadd>
 80067a0:	4601      	mov	r1, r0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4648      	mov	r0, r9
 80067a6:	f000 fcf7 	bl	8007198 <__mcmp>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f77f aeb3 	ble.w	8006516 <_dtoa_r+0x68e>
 80067b0:	4656      	mov	r6, sl
 80067b2:	2331      	movs	r3, #49	@ 0x31
 80067b4:	f806 3b01 	strb.w	r3, [r6], #1
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	e6ae      	b.n	800651e <_dtoa_r+0x696>
 80067c0:	9c07      	ldr	r4, [sp, #28]
 80067c2:	9704      	str	r7, [sp, #16]
 80067c4:	4625      	mov	r5, r4
 80067c6:	e7f3      	b.n	80067b0 <_dtoa_r+0x928>
 80067c8:	9b07      	ldr	r3, [sp, #28]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8104 	beq.w	80069dc <_dtoa_r+0xb54>
 80067d4:	2e00      	cmp	r6, #0
 80067d6:	dd05      	ble.n	80067e4 <_dtoa_r+0x95c>
 80067d8:	4629      	mov	r1, r5
 80067da:	4632      	mov	r2, r6
 80067dc:	4658      	mov	r0, fp
 80067de:	f000 fc6f 	bl	80070c0 <__lshift>
 80067e2:	4605      	mov	r5, r0
 80067e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d05a      	beq.n	80068a0 <_dtoa_r+0xa18>
 80067ea:	6869      	ldr	r1, [r5, #4]
 80067ec:	4658      	mov	r0, fp
 80067ee:	f000 fa0f 	bl	8006c10 <_Balloc>
 80067f2:	4606      	mov	r6, r0
 80067f4:	b928      	cbnz	r0, 8006802 <_dtoa_r+0x97a>
 80067f6:	4b84      	ldr	r3, [pc, #528]	@ (8006a08 <_dtoa_r+0xb80>)
 80067f8:	4602      	mov	r2, r0
 80067fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067fe:	f7ff bb5a 	b.w	8005eb6 <_dtoa_r+0x2e>
 8006802:	692a      	ldr	r2, [r5, #16]
 8006804:	3202      	adds	r2, #2
 8006806:	0092      	lsls	r2, r2, #2
 8006808:	f105 010c 	add.w	r1, r5, #12
 800680c:	300c      	adds	r0, #12
 800680e:	f001 ff75 	bl	80086fc <memcpy>
 8006812:	2201      	movs	r2, #1
 8006814:	4631      	mov	r1, r6
 8006816:	4658      	mov	r0, fp
 8006818:	f000 fc52 	bl	80070c0 <__lshift>
 800681c:	f10a 0301 	add.w	r3, sl, #1
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	9b00      	ldr	r3, [sp, #0]
 8006824:	4453      	add	r3, sl
 8006826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006828:	9b02      	ldr	r3, [sp, #8]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	462f      	mov	r7, r5
 8006830:	930a      	str	r3, [sp, #40]	@ 0x28
 8006832:	4605      	mov	r5, r0
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	4621      	mov	r1, r4
 8006838:	3b01      	subs	r3, #1
 800683a:	4648      	mov	r0, r9
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	f7ff fa9b 	bl	8005d78 <quorem>
 8006842:	4639      	mov	r1, r7
 8006844:	9002      	str	r0, [sp, #8]
 8006846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800684a:	4648      	mov	r0, r9
 800684c:	f000 fca4 	bl	8007198 <__mcmp>
 8006850:	462a      	mov	r2, r5
 8006852:	9008      	str	r0, [sp, #32]
 8006854:	4621      	mov	r1, r4
 8006856:	4658      	mov	r0, fp
 8006858:	f000 fcba 	bl	80071d0 <__mdiff>
 800685c:	68c2      	ldr	r2, [r0, #12]
 800685e:	4606      	mov	r6, r0
 8006860:	bb02      	cbnz	r2, 80068a4 <_dtoa_r+0xa1c>
 8006862:	4601      	mov	r1, r0
 8006864:	4648      	mov	r0, r9
 8006866:	f000 fc97 	bl	8007198 <__mcmp>
 800686a:	4602      	mov	r2, r0
 800686c:	4631      	mov	r1, r6
 800686e:	4658      	mov	r0, fp
 8006870:	920e      	str	r2, [sp, #56]	@ 0x38
 8006872:	f000 fa0d 	bl	8006c90 <_Bfree>
 8006876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800687a:	9e07      	ldr	r6, [sp, #28]
 800687c:	ea43 0102 	orr.w	r1, r3, r2
 8006880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006882:	4319      	orrs	r1, r3
 8006884:	d110      	bne.n	80068a8 <_dtoa_r+0xa20>
 8006886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800688a:	d029      	beq.n	80068e0 <_dtoa_r+0xa58>
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	dd02      	ble.n	8006898 <_dtoa_r+0xa10>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	f883 8000 	strb.w	r8, [r3]
 800689e:	e63f      	b.n	8006520 <_dtoa_r+0x698>
 80068a0:	4628      	mov	r0, r5
 80068a2:	e7bb      	b.n	800681c <_dtoa_r+0x994>
 80068a4:	2201      	movs	r2, #1
 80068a6:	e7e1      	b.n	800686c <_dtoa_r+0x9e4>
 80068a8:	9b08      	ldr	r3, [sp, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	db04      	blt.n	80068b8 <_dtoa_r+0xa30>
 80068ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068b0:	430b      	orrs	r3, r1
 80068b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068b4:	430b      	orrs	r3, r1
 80068b6:	d120      	bne.n	80068fa <_dtoa_r+0xa72>
 80068b8:	2a00      	cmp	r2, #0
 80068ba:	dded      	ble.n	8006898 <_dtoa_r+0xa10>
 80068bc:	4649      	mov	r1, r9
 80068be:	2201      	movs	r2, #1
 80068c0:	4658      	mov	r0, fp
 80068c2:	f000 fbfd 	bl	80070c0 <__lshift>
 80068c6:	4621      	mov	r1, r4
 80068c8:	4681      	mov	r9, r0
 80068ca:	f000 fc65 	bl	8007198 <__mcmp>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	dc03      	bgt.n	80068da <_dtoa_r+0xa52>
 80068d2:	d1e1      	bne.n	8006898 <_dtoa_r+0xa10>
 80068d4:	f018 0f01 	tst.w	r8, #1
 80068d8:	d0de      	beq.n	8006898 <_dtoa_r+0xa10>
 80068da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068de:	d1d8      	bne.n	8006892 <_dtoa_r+0xa0a>
 80068e0:	9a00      	ldr	r2, [sp, #0]
 80068e2:	2339      	movs	r3, #57	@ 0x39
 80068e4:	7013      	strb	r3, [r2, #0]
 80068e6:	4633      	mov	r3, r6
 80068e8:	461e      	mov	r6, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068f0:	2a39      	cmp	r2, #57	@ 0x39
 80068f2:	d052      	beq.n	800699a <_dtoa_r+0xb12>
 80068f4:	3201      	adds	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e612      	b.n	8006520 <_dtoa_r+0x698>
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	dd07      	ble.n	800690e <_dtoa_r+0xa86>
 80068fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006902:	d0ed      	beq.n	80068e0 <_dtoa_r+0xa58>
 8006904:	9a00      	ldr	r2, [sp, #0]
 8006906:	f108 0301 	add.w	r3, r8, #1
 800690a:	7013      	strb	r3, [r2, #0]
 800690c:	e608      	b.n	8006520 <_dtoa_r+0x698>
 800690e:	9b07      	ldr	r3, [sp, #28]
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006918:	4293      	cmp	r3, r2
 800691a:	d028      	beq.n	800696e <_dtoa_r+0xae6>
 800691c:	4649      	mov	r1, r9
 800691e:	2300      	movs	r3, #0
 8006920:	220a      	movs	r2, #10
 8006922:	4658      	mov	r0, fp
 8006924:	f000 f9d6 	bl	8006cd4 <__multadd>
 8006928:	42af      	cmp	r7, r5
 800692a:	4681      	mov	r9, r0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	f04f 020a 	mov.w	r2, #10
 8006934:	4639      	mov	r1, r7
 8006936:	4658      	mov	r0, fp
 8006938:	d107      	bne.n	800694a <_dtoa_r+0xac2>
 800693a:	f000 f9cb 	bl	8006cd4 <__multadd>
 800693e:	4607      	mov	r7, r0
 8006940:	4605      	mov	r5, r0
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	9307      	str	r3, [sp, #28]
 8006948:	e774      	b.n	8006834 <_dtoa_r+0x9ac>
 800694a:	f000 f9c3 	bl	8006cd4 <__multadd>
 800694e:	4629      	mov	r1, r5
 8006950:	4607      	mov	r7, r0
 8006952:	2300      	movs	r3, #0
 8006954:	220a      	movs	r2, #10
 8006956:	4658      	mov	r0, fp
 8006958:	f000 f9bc 	bl	8006cd4 <__multadd>
 800695c:	4605      	mov	r5, r0
 800695e:	e7f0      	b.n	8006942 <_dtoa_r+0xaba>
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	bfcc      	ite	gt
 8006966:	461e      	movgt	r6, r3
 8006968:	2601      	movle	r6, #1
 800696a:	4456      	add	r6, sl
 800696c:	2700      	movs	r7, #0
 800696e:	4649      	mov	r1, r9
 8006970:	2201      	movs	r2, #1
 8006972:	4658      	mov	r0, fp
 8006974:	f000 fba4 	bl	80070c0 <__lshift>
 8006978:	4621      	mov	r1, r4
 800697a:	4681      	mov	r9, r0
 800697c:	f000 fc0c 	bl	8007198 <__mcmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	dcb0      	bgt.n	80068e6 <_dtoa_r+0xa5e>
 8006984:	d102      	bne.n	800698c <_dtoa_r+0xb04>
 8006986:	f018 0f01 	tst.w	r8, #1
 800698a:	d1ac      	bne.n	80068e6 <_dtoa_r+0xa5e>
 800698c:	4633      	mov	r3, r6
 800698e:	461e      	mov	r6, r3
 8006990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006994:	2a30      	cmp	r2, #48	@ 0x30
 8006996:	d0fa      	beq.n	800698e <_dtoa_r+0xb06>
 8006998:	e5c2      	b.n	8006520 <_dtoa_r+0x698>
 800699a:	459a      	cmp	sl, r3
 800699c:	d1a4      	bne.n	80068e8 <_dtoa_r+0xa60>
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	3301      	adds	r3, #1
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	2331      	movs	r3, #49	@ 0x31
 80069a6:	f88a 3000 	strb.w	r3, [sl]
 80069aa:	e5b9      	b.n	8006520 <_dtoa_r+0x698>
 80069ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a0c <_dtoa_r+0xb84>
 80069b2:	b11b      	cbz	r3, 80069bc <_dtoa_r+0xb34>
 80069b4:	f10a 0308 	add.w	r3, sl, #8
 80069b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	4650      	mov	r0, sl
 80069be:	b019      	add	sp, #100	@ 0x64
 80069c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	f77f ae37 	ble.w	800663a <_dtoa_r+0x7b2>
 80069cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d0:	2001      	movs	r0, #1
 80069d2:	e655      	b.n	8006680 <_dtoa_r+0x7f8>
 80069d4:	9b00      	ldr	r3, [sp, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f77f aed6 	ble.w	8006788 <_dtoa_r+0x900>
 80069dc:	4656      	mov	r6, sl
 80069de:	4621      	mov	r1, r4
 80069e0:	4648      	mov	r0, r9
 80069e2:	f7ff f9c9 	bl	8005d78 <quorem>
 80069e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069ea:	f806 8b01 	strb.w	r8, [r6], #1
 80069ee:	9b00      	ldr	r3, [sp, #0]
 80069f0:	eba6 020a 	sub.w	r2, r6, sl
 80069f4:	4293      	cmp	r3, r2
 80069f6:	ddb3      	ble.n	8006960 <_dtoa_r+0xad8>
 80069f8:	4649      	mov	r1, r9
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4658      	mov	r0, fp
 8006a00:	f000 f968 	bl	8006cd4 <__multadd>
 8006a04:	4681      	mov	r9, r0
 8006a06:	e7ea      	b.n	80069de <_dtoa_r+0xb56>
 8006a08:	0800952d 	.word	0x0800952d
 8006a0c:	080094b1 	.word	0x080094b1

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d041      	beq.n	8006a9c <_free_r+0x8c>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f000 f8e8 	bl	8006bf8 <__malloc_lock>
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <_free_r+0x90>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	b933      	cbnz	r3, 8006a3c <_free_r+0x2c>
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	6014      	str	r4, [r2, #0]
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a38:	f000 b8e4 	b.w	8006c04 <__malloc_unlock>
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d908      	bls.n	8006a52 <_free_r+0x42>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	e7ed      	b.n	8006a2e <_free_r+0x1e>
 8006a52:	461a      	mov	r2, r3
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b10b      	cbz	r3, 8006a5c <_free_r+0x4c>
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d9fa      	bls.n	8006a52 <_free_r+0x42>
 8006a5c:	6811      	ldr	r1, [r2, #0]
 8006a5e:	1850      	adds	r0, r2, r1
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d10b      	bne.n	8006a7c <_free_r+0x6c>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	4401      	add	r1, r0
 8006a68:	1850      	adds	r0, r2, r1
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	d1e0      	bne.n	8006a32 <_free_r+0x22>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	6053      	str	r3, [r2, #4]
 8006a76:	4408      	add	r0, r1
 8006a78:	6010      	str	r0, [r2, #0]
 8006a7a:	e7da      	b.n	8006a32 <_free_r+0x22>
 8006a7c:	d902      	bls.n	8006a84 <_free_r+0x74>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	e7d6      	b.n	8006a32 <_free_r+0x22>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf04      	itt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	bf04      	itt	eq
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	6054      	str	r4, [r2, #4]
 8006a9a:	e7ca      	b.n	8006a32 <_free_r+0x22>
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200004a8 	.word	0x200004a8

08006aa4 <malloc>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	@ (8006ab0 <malloc+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f000 b825 	b.w	8006af8 <_malloc_r>
 8006aae:	bf00      	nop
 8006ab0:	20000018 	.word	0x20000018

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8006af4 <sbrk_aligned+0x40>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f001 fe0c 	bl	80086dc <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f001 fe07 	bl	80086dc <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d103      	bne.n	8006ada <sbrk_aligned+0x26>
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0f8      	beq.n	8006ad6 <sbrk_aligned+0x22>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f001 fdf8 	bl	80086dc <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1f2      	bne.n	8006ad6 <sbrk_aligned+0x22>
 8006af0:	e7ef      	b.n	8006ad2 <sbrk_aligned+0x1e>
 8006af2:	bf00      	nop
 8006af4:	200004a4 	.word	0x200004a4

08006af8 <_malloc_r>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d904      	bls.n	8006b1e <_malloc_r+0x26>
 8006b14:	230c      	movs	r3, #12
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf4 <_malloc_r+0xfc>
 8006b22:	f000 f869 	bl	8006bf8 <__malloc_lock>
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	bb44      	cbnz	r4, 8006b80 <_malloc_r+0x88>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbf 	bl	8006ab4 <sbrk_aligned>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d158      	bne.n	8006bee <_malloc_r+0xf6>
 8006b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b40:	4627      	mov	r7, r4
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d143      	bne.n	8006bce <_malloc_r+0xd6>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d04b      	beq.n	8006be2 <_malloc_r+0xea>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	eb04 0903 	add.w	r9, r4, r3
 8006b54:	f001 fdc2 	bl	80086dc <_sbrk_r>
 8006b58:	4581      	cmp	r9, r0
 8006b5a:	d142      	bne.n	8006be2 <_malloc_r+0xea>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	1a6d      	subs	r5, r5, r1
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa6 	bl	8006ab4 <sbrk_aligned>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d03a      	beq.n	8006be2 <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	442b      	add	r3, r5
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	bb62      	cbnz	r2, 8006bd4 <_malloc_r+0xdc>
 8006b7a:	f8c8 7000 	str.w	r7, [r8]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xa8>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d420      	bmi.n	8006bc8 <_malloc_r+0xd0>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xc2>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f82f 	bl	8006c04 <__malloc_unlock>
 8006ba6:	f104 000b 	add.w	r0, r4, #11
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	f020 0007 	bic.w	r0, r0, #7
 8006bb0:	1ac2      	subs	r2, r0, r3
 8006bb2:	bf1c      	itt	ne
 8006bb4:	1a1b      	subne	r3, r3, r0
 8006bb6:	50a3      	strne	r3, [r4, r2]
 8006bb8:	e7af      	b.n	8006b1a <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f8c8 2000 	streq.w	r2, [r8]
 8006bc4:	605a      	strne	r2, [r3, #4]
 8006bc6:	e7eb      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	6864      	ldr	r4, [r4, #4]
 8006bcc:	e7ae      	b.n	8006b2c <_malloc_r+0x34>
 8006bce:	463c      	mov	r4, r7
 8006bd0:	687f      	ldr	r7, [r7, #4]
 8006bd2:	e7b6      	b.n	8006b42 <_malloc_r+0x4a>
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d1fb      	bne.n	8006bd4 <_malloc_r+0xdc>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa8>
 8006be2:	230c      	movs	r3, #12
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f80c 	bl	8006c04 <__malloc_unlock>
 8006bec:	e794      	b.n	8006b18 <_malloc_r+0x20>
 8006bee:	6005      	str	r5, [r0, #0]
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bf2:	bf00      	nop
 8006bf4:	200004a8 	.word	0x200004a8

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f7ff b8b4 	b.w	8005d66 <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	200004a0 	.word	0x200004a0

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f7ff b8af 	b.w	8005d68 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	200004a0 	.word	0x200004a0

08006c10 <_Balloc>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	69c6      	ldr	r6, [r0, #28]
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	b976      	cbnz	r6, 8006c38 <_Balloc+0x28>
 8006c1a:	2010      	movs	r0, #16
 8006c1c:	f7ff ff42 	bl	8006aa4 <malloc>
 8006c20:	4602      	mov	r2, r0
 8006c22:	61e0      	str	r0, [r4, #28]
 8006c24:	b920      	cbnz	r0, 8006c30 <_Balloc+0x20>
 8006c26:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <_Balloc+0x78>)
 8006c28:	4818      	ldr	r0, [pc, #96]	@ (8006c8c <_Balloc+0x7c>)
 8006c2a:	216b      	movs	r1, #107	@ 0x6b
 8006c2c:	f001 fd7c 	bl	8008728 <__assert_func>
 8006c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c34:	6006      	str	r6, [r0, #0]
 8006c36:	60c6      	str	r6, [r0, #12]
 8006c38:	69e6      	ldr	r6, [r4, #28]
 8006c3a:	68f3      	ldr	r3, [r6, #12]
 8006c3c:	b183      	cbz	r3, 8006c60 <_Balloc+0x50>
 8006c3e:	69e3      	ldr	r3, [r4, #28]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c46:	b9b8      	cbnz	r0, 8006c78 <_Balloc+0x68>
 8006c48:	2101      	movs	r1, #1
 8006c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c4e:	1d72      	adds	r2, r6, #5
 8006c50:	0092      	lsls	r2, r2, #2
 8006c52:	4620      	mov	r0, r4
 8006c54:	f001 fd86 	bl	8008764 <_calloc_r>
 8006c58:	b160      	cbz	r0, 8006c74 <_Balloc+0x64>
 8006c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c5e:	e00e      	b.n	8006c7e <_Balloc+0x6e>
 8006c60:	2221      	movs	r2, #33	@ 0x21
 8006c62:	2104      	movs	r1, #4
 8006c64:	4620      	mov	r0, r4
 8006c66:	f001 fd7d 	bl	8008764 <_calloc_r>
 8006c6a:	69e3      	ldr	r3, [r4, #28]
 8006c6c:	60f0      	str	r0, [r6, #12]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e4      	bne.n	8006c3e <_Balloc+0x2e>
 8006c74:	2000      	movs	r0, #0
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	6802      	ldr	r2, [r0, #0]
 8006c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c84:	e7f7      	b.n	8006c76 <_Balloc+0x66>
 8006c86:	bf00      	nop
 8006c88:	080094be 	.word	0x080094be
 8006c8c:	0800953e 	.word	0x0800953e

08006c90 <_Bfree>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	69c6      	ldr	r6, [r0, #28]
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	b976      	cbnz	r6, 8006cb8 <_Bfree+0x28>
 8006c9a:	2010      	movs	r0, #16
 8006c9c:	f7ff ff02 	bl	8006aa4 <malloc>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	61e8      	str	r0, [r5, #28]
 8006ca4:	b920      	cbnz	r0, 8006cb0 <_Bfree+0x20>
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <_Bfree+0x3c>)
 8006ca8:	4809      	ldr	r0, [pc, #36]	@ (8006cd0 <_Bfree+0x40>)
 8006caa:	218f      	movs	r1, #143	@ 0x8f
 8006cac:	f001 fd3c 	bl	8008728 <__assert_func>
 8006cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb4:	6006      	str	r6, [r0, #0]
 8006cb6:	60c6      	str	r6, [r0, #12]
 8006cb8:	b13c      	cbz	r4, 8006cca <_Bfree+0x3a>
 8006cba:	69eb      	ldr	r3, [r5, #28]
 8006cbc:	6862      	ldr	r2, [r4, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cc4:	6021      	str	r1, [r4, #0]
 8006cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	080094be 	.word	0x080094be
 8006cd0:	0800953e 	.word	0x0800953e

08006cd4 <__multadd>:
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	690d      	ldr	r5, [r1, #16]
 8006cda:	4607      	mov	r7, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	461e      	mov	r6, r3
 8006ce0:	f101 0c14 	add.w	ip, r1, #20
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8006cea:	b299      	uxth	r1, r3
 8006cec:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf0:	0c1e      	lsrs	r6, r3, #16
 8006cf2:	0c0b      	lsrs	r3, r1, #16
 8006cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8006cf8:	b289      	uxth	r1, r1
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d00:	4285      	cmp	r5, r0
 8006d02:	f84c 1b04 	str.w	r1, [ip], #4
 8006d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d0a:	dcec      	bgt.n	8006ce6 <__multadd+0x12>
 8006d0c:	b30e      	cbz	r6, 8006d52 <__multadd+0x7e>
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dc19      	bgt.n	8006d48 <__multadd+0x74>
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	4638      	mov	r0, r7
 8006d18:	3101      	adds	r1, #1
 8006d1a:	f7ff ff79 	bl	8006c10 <_Balloc>
 8006d1e:	4680      	mov	r8, r0
 8006d20:	b928      	cbnz	r0, 8006d2e <__multadd+0x5a>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <__multadd+0x84>)
 8006d26:	480d      	ldr	r0, [pc, #52]	@ (8006d5c <__multadd+0x88>)
 8006d28:	21ba      	movs	r1, #186	@ 0xba
 8006d2a:	f001 fcfd 	bl	8008728 <__assert_func>
 8006d2e:	6922      	ldr	r2, [r4, #16]
 8006d30:	3202      	adds	r2, #2
 8006d32:	f104 010c 	add.w	r1, r4, #12
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	300c      	adds	r0, #12
 8006d3a:	f001 fcdf 	bl	80086fc <memcpy>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff ffa5 	bl	8006c90 <_Bfree>
 8006d46:	4644      	mov	r4, r8
 8006d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	615e      	str	r6, [r3, #20]
 8006d50:	6125      	str	r5, [r4, #16]
 8006d52:	4620      	mov	r0, r4
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	0800952d 	.word	0x0800952d
 8006d5c:	0800953e 	.word	0x0800953e

08006d60 <__s2b>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	4615      	mov	r5, r2
 8006d68:	461f      	mov	r7, r3
 8006d6a:	2209      	movs	r2, #9
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	4606      	mov	r6, r0
 8006d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d74:	2100      	movs	r1, #0
 8006d76:	2201      	movs	r2, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	db09      	blt.n	8006d90 <__s2b+0x30>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ff47 	bl	8006c10 <_Balloc>
 8006d82:	b940      	cbnz	r0, 8006d96 <__s2b+0x36>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b19      	ldr	r3, [pc, #100]	@ (8006dec <__s2b+0x8c>)
 8006d88:	4819      	ldr	r0, [pc, #100]	@ (8006df0 <__s2b+0x90>)
 8006d8a:	21d3      	movs	r1, #211	@ 0xd3
 8006d8c:	f001 fccc 	bl	8008728 <__assert_func>
 8006d90:	0052      	lsls	r2, r2, #1
 8006d92:	3101      	adds	r1, #1
 8006d94:	e7f0      	b.n	8006d78 <__s2b+0x18>
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	6143      	str	r3, [r0, #20]
 8006d9a:	2d09      	cmp	r5, #9
 8006d9c:	f04f 0301 	mov.w	r3, #1
 8006da0:	6103      	str	r3, [r0, #16]
 8006da2:	dd16      	ble.n	8006dd2 <__s2b+0x72>
 8006da4:	f104 0909 	add.w	r9, r4, #9
 8006da8:	46c8      	mov	r8, r9
 8006daa:	442c      	add	r4, r5
 8006dac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006db0:	4601      	mov	r1, r0
 8006db2:	3b30      	subs	r3, #48	@ 0x30
 8006db4:	220a      	movs	r2, #10
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff ff8c 	bl	8006cd4 <__multadd>
 8006dbc:	45a0      	cmp	r8, r4
 8006dbe:	d1f5      	bne.n	8006dac <__s2b+0x4c>
 8006dc0:	f1a5 0408 	sub.w	r4, r5, #8
 8006dc4:	444c      	add	r4, r9
 8006dc6:	1b2d      	subs	r5, r5, r4
 8006dc8:	1963      	adds	r3, r4, r5
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	db04      	blt.n	8006dd8 <__s2b+0x78>
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	340a      	adds	r4, #10
 8006dd4:	2509      	movs	r5, #9
 8006dd6:	e7f6      	b.n	8006dc6 <__s2b+0x66>
 8006dd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ddc:	4601      	mov	r1, r0
 8006dde:	3b30      	subs	r3, #48	@ 0x30
 8006de0:	220a      	movs	r2, #10
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ff76 	bl	8006cd4 <__multadd>
 8006de8:	e7ee      	b.n	8006dc8 <__s2b+0x68>
 8006dea:	bf00      	nop
 8006dec:	0800952d 	.word	0x0800952d
 8006df0:	0800953e 	.word	0x0800953e

08006df4 <__hi0bits>:
 8006df4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006df8:	4603      	mov	r3, r0
 8006dfa:	bf36      	itet	cc
 8006dfc:	0403      	lslcc	r3, r0, #16
 8006dfe:	2000      	movcs	r0, #0
 8006e00:	2010      	movcc	r0, #16
 8006e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e06:	bf3c      	itt	cc
 8006e08:	021b      	lslcc	r3, r3, #8
 8006e0a:	3008      	addcc	r0, #8
 8006e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e10:	bf3c      	itt	cc
 8006e12:	011b      	lslcc	r3, r3, #4
 8006e14:	3004      	addcc	r0, #4
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1a:	bf3c      	itt	cc
 8006e1c:	009b      	lslcc	r3, r3, #2
 8006e1e:	3002      	addcc	r0, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	db05      	blt.n	8006e30 <__hi0bits+0x3c>
 8006e24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e28:	f100 0001 	add.w	r0, r0, #1
 8006e2c:	bf08      	it	eq
 8006e2e:	2020      	moveq	r0, #32
 8006e30:	4770      	bx	lr

08006e32 <__lo0bits>:
 8006e32:	6803      	ldr	r3, [r0, #0]
 8006e34:	4602      	mov	r2, r0
 8006e36:	f013 0007 	ands.w	r0, r3, #7
 8006e3a:	d00b      	beq.n	8006e54 <__lo0bits+0x22>
 8006e3c:	07d9      	lsls	r1, r3, #31
 8006e3e:	d421      	bmi.n	8006e84 <__lo0bits+0x52>
 8006e40:	0798      	lsls	r0, r3, #30
 8006e42:	bf49      	itett	mi
 8006e44:	085b      	lsrmi	r3, r3, #1
 8006e46:	089b      	lsrpl	r3, r3, #2
 8006e48:	2001      	movmi	r0, #1
 8006e4a:	6013      	strmi	r3, [r2, #0]
 8006e4c:	bf5c      	itt	pl
 8006e4e:	6013      	strpl	r3, [r2, #0]
 8006e50:	2002      	movpl	r0, #2
 8006e52:	4770      	bx	lr
 8006e54:	b299      	uxth	r1, r3
 8006e56:	b909      	cbnz	r1, 8006e5c <__lo0bits+0x2a>
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	2010      	movs	r0, #16
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	b909      	cbnz	r1, 8006e64 <__lo0bits+0x32>
 8006e60:	3008      	adds	r0, #8
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	0719      	lsls	r1, r3, #28
 8006e66:	bf04      	itt	eq
 8006e68:	091b      	lsreq	r3, r3, #4
 8006e6a:	3004      	addeq	r0, #4
 8006e6c:	0799      	lsls	r1, r3, #30
 8006e6e:	bf04      	itt	eq
 8006e70:	089b      	lsreq	r3, r3, #2
 8006e72:	3002      	addeq	r0, #2
 8006e74:	07d9      	lsls	r1, r3, #31
 8006e76:	d403      	bmi.n	8006e80 <__lo0bits+0x4e>
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	f100 0001 	add.w	r0, r0, #1
 8006e7e:	d003      	beq.n	8006e88 <__lo0bits+0x56>
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4770      	bx	lr
 8006e84:	2000      	movs	r0, #0
 8006e86:	4770      	bx	lr
 8006e88:	2020      	movs	r0, #32
 8006e8a:	4770      	bx	lr

08006e8c <__i2b>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	460c      	mov	r4, r1
 8006e90:	2101      	movs	r1, #1
 8006e92:	f7ff febd 	bl	8006c10 <_Balloc>
 8006e96:	4602      	mov	r2, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <__i2b+0x1a>
 8006e9a:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <__i2b+0x24>)
 8006e9c:	4805      	ldr	r0, [pc, #20]	@ (8006eb4 <__i2b+0x28>)
 8006e9e:	f240 1145 	movw	r1, #325	@ 0x145
 8006ea2:	f001 fc41 	bl	8008728 <__assert_func>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6144      	str	r4, [r0, #20]
 8006eaa:	6103      	str	r3, [r0, #16]
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	0800952d 	.word	0x0800952d
 8006eb4:	0800953e 	.word	0x0800953e

08006eb8 <__multiply>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	690a      	ldr	r2, [r1, #16]
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	bfa8      	it	ge
 8006ec6:	4623      	movge	r3, r4
 8006ec8:	460f      	mov	r7, r1
 8006eca:	bfa4      	itt	ge
 8006ecc:	460c      	movge	r4, r1
 8006ece:	461f      	movge	r7, r3
 8006ed0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ed4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	6861      	ldr	r1, [r4, #4]
 8006edc:	eb0a 0609 	add.w	r6, sl, r9
 8006ee0:	42b3      	cmp	r3, r6
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	bfb8      	it	lt
 8006ee6:	3101      	addlt	r1, #1
 8006ee8:	f7ff fe92 	bl	8006c10 <_Balloc>
 8006eec:	b930      	cbnz	r0, 8006efc <__multiply+0x44>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b44      	ldr	r3, [pc, #272]	@ (8007004 <__multiply+0x14c>)
 8006ef2:	4845      	ldr	r0, [pc, #276]	@ (8007008 <__multiply+0x150>)
 8006ef4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ef8:	f001 fc16 	bl	8008728 <__assert_func>
 8006efc:	f100 0514 	add.w	r5, r0, #20
 8006f00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f04:	462b      	mov	r3, r5
 8006f06:	2200      	movs	r2, #0
 8006f08:	4543      	cmp	r3, r8
 8006f0a:	d321      	bcc.n	8006f50 <__multiply+0x98>
 8006f0c:	f107 0114 	add.w	r1, r7, #20
 8006f10:	f104 0214 	add.w	r2, r4, #20
 8006f14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f1c:	9302      	str	r3, [sp, #8]
 8006f1e:	1b13      	subs	r3, r2, r4
 8006f20:	3b15      	subs	r3, #21
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	3304      	adds	r3, #4
 8006f28:	f104 0715 	add.w	r7, r4, #21
 8006f2c:	42ba      	cmp	r2, r7
 8006f2e:	bf38      	it	cc
 8006f30:	2304      	movcc	r3, #4
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	d80c      	bhi.n	8006f56 <__multiply+0x9e>
 8006f3c:	2e00      	cmp	r6, #0
 8006f3e:	dd03      	ble.n	8006f48 <__multiply+0x90>
 8006f40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05b      	beq.n	8007000 <__multiply+0x148>
 8006f48:	6106      	str	r6, [r0, #16]
 8006f4a:	b005      	add	sp, #20
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	f843 2b04 	str.w	r2, [r3], #4
 8006f54:	e7d8      	b.n	8006f08 <__multiply+0x50>
 8006f56:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f5a:	f1ba 0f00 	cmp.w	sl, #0
 8006f5e:	d024      	beq.n	8006faa <__multiply+0xf2>
 8006f60:	f104 0e14 	add.w	lr, r4, #20
 8006f64:	46a9      	mov	r9, r5
 8006f66:	f04f 0c00 	mov.w	ip, #0
 8006f6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f6e:	f8d9 3000 	ldr.w	r3, [r9]
 8006f72:	fa1f fb87 	uxth.w	fp, r7
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f80:	f8d9 7000 	ldr.w	r7, [r9]
 8006f84:	4463      	add	r3, ip
 8006f86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f98:	4572      	cmp	r2, lr
 8006f9a:	f849 3b04 	str.w	r3, [r9], #4
 8006f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fa2:	d8e2      	bhi.n	8006f6a <__multiply+0xb2>
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	f845 c003 	str.w	ip, [r5, r3]
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fb0:	3104      	adds	r1, #4
 8006fb2:	f1b9 0f00 	cmp.w	r9, #0
 8006fb6:	d021      	beq.n	8006ffc <__multiply+0x144>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	f104 0c14 	add.w	ip, r4, #20
 8006fbe:	46ae      	mov	lr, r5
 8006fc0:	f04f 0a00 	mov.w	sl, #0
 8006fc4:	f8bc b000 	ldrh.w	fp, [ip]
 8006fc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006fcc:	fb09 770b 	mla	r7, r9, fp, r7
 8006fd0:	4457      	add	r7, sl
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fd8:	f84e 3b04 	str.w	r3, [lr], #4
 8006fdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fe4:	f8be 3000 	ldrh.w	r3, [lr]
 8006fe8:	fb09 330a 	mla	r3, r9, sl, r3
 8006fec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ff0:	4562      	cmp	r2, ip
 8006ff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ff6:	d8e5      	bhi.n	8006fc4 <__multiply+0x10c>
 8006ff8:	9f01      	ldr	r7, [sp, #4]
 8006ffa:	51eb      	str	r3, [r5, r7]
 8006ffc:	3504      	adds	r5, #4
 8006ffe:	e799      	b.n	8006f34 <__multiply+0x7c>
 8007000:	3e01      	subs	r6, #1
 8007002:	e79b      	b.n	8006f3c <__multiply+0x84>
 8007004:	0800952d 	.word	0x0800952d
 8007008:	0800953e 	.word	0x0800953e

0800700c <__pow5mult>:
 800700c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007010:	4615      	mov	r5, r2
 8007012:	f012 0203 	ands.w	r2, r2, #3
 8007016:	4607      	mov	r7, r0
 8007018:	460e      	mov	r6, r1
 800701a:	d007      	beq.n	800702c <__pow5mult+0x20>
 800701c:	4c25      	ldr	r4, [pc, #148]	@ (80070b4 <__pow5mult+0xa8>)
 800701e:	3a01      	subs	r2, #1
 8007020:	2300      	movs	r3, #0
 8007022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007026:	f7ff fe55 	bl	8006cd4 <__multadd>
 800702a:	4606      	mov	r6, r0
 800702c:	10ad      	asrs	r5, r5, #2
 800702e:	d03d      	beq.n	80070ac <__pow5mult+0xa0>
 8007030:	69fc      	ldr	r4, [r7, #28]
 8007032:	b97c      	cbnz	r4, 8007054 <__pow5mult+0x48>
 8007034:	2010      	movs	r0, #16
 8007036:	f7ff fd35 	bl	8006aa4 <malloc>
 800703a:	4602      	mov	r2, r0
 800703c:	61f8      	str	r0, [r7, #28]
 800703e:	b928      	cbnz	r0, 800704c <__pow5mult+0x40>
 8007040:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <__pow5mult+0xac>)
 8007042:	481e      	ldr	r0, [pc, #120]	@ (80070bc <__pow5mult+0xb0>)
 8007044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007048:	f001 fb6e 	bl	8008728 <__assert_func>
 800704c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007050:	6004      	str	r4, [r0, #0]
 8007052:	60c4      	str	r4, [r0, #12]
 8007054:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800705c:	b94c      	cbnz	r4, 8007072 <__pow5mult+0x66>
 800705e:	f240 2171 	movw	r1, #625	@ 0x271
 8007062:	4638      	mov	r0, r7
 8007064:	f7ff ff12 	bl	8006e8c <__i2b>
 8007068:	2300      	movs	r3, #0
 800706a:	f8c8 0008 	str.w	r0, [r8, #8]
 800706e:	4604      	mov	r4, r0
 8007070:	6003      	str	r3, [r0, #0]
 8007072:	f04f 0900 	mov.w	r9, #0
 8007076:	07eb      	lsls	r3, r5, #31
 8007078:	d50a      	bpl.n	8007090 <__pow5mult+0x84>
 800707a:	4631      	mov	r1, r6
 800707c:	4622      	mov	r2, r4
 800707e:	4638      	mov	r0, r7
 8007080:	f7ff ff1a 	bl	8006eb8 <__multiply>
 8007084:	4631      	mov	r1, r6
 8007086:	4680      	mov	r8, r0
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff fe01 	bl	8006c90 <_Bfree>
 800708e:	4646      	mov	r6, r8
 8007090:	106d      	asrs	r5, r5, #1
 8007092:	d00b      	beq.n	80070ac <__pow5mult+0xa0>
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	b938      	cbnz	r0, 80070a8 <__pow5mult+0x9c>
 8007098:	4622      	mov	r2, r4
 800709a:	4621      	mov	r1, r4
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ff0b 	bl	8006eb8 <__multiply>
 80070a2:	6020      	str	r0, [r4, #0]
 80070a4:	f8c0 9000 	str.w	r9, [r0]
 80070a8:	4604      	mov	r4, r0
 80070aa:	e7e4      	b.n	8007076 <__pow5mult+0x6a>
 80070ac:	4630      	mov	r0, r6
 80070ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b2:	bf00      	nop
 80070b4:	08009598 	.word	0x08009598
 80070b8:	080094be 	.word	0x080094be
 80070bc:	0800953e 	.word	0x0800953e

080070c0 <__lshift>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	6849      	ldr	r1, [r1, #4]
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	4607      	mov	r7, r0
 80070d2:	4691      	mov	r9, r2
 80070d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070d8:	f108 0601 	add.w	r6, r8, #1
 80070dc:	42b3      	cmp	r3, r6
 80070de:	db0b      	blt.n	80070f8 <__lshift+0x38>
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff fd95 	bl	8006c10 <_Balloc>
 80070e6:	4605      	mov	r5, r0
 80070e8:	b948      	cbnz	r0, 80070fe <__lshift+0x3e>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4b28      	ldr	r3, [pc, #160]	@ (8007190 <__lshift+0xd0>)
 80070ee:	4829      	ldr	r0, [pc, #164]	@ (8007194 <__lshift+0xd4>)
 80070f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070f4:	f001 fb18 	bl	8008728 <__assert_func>
 80070f8:	3101      	adds	r1, #1
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	e7ee      	b.n	80070dc <__lshift+0x1c>
 80070fe:	2300      	movs	r3, #0
 8007100:	f100 0114 	add.w	r1, r0, #20
 8007104:	f100 0210 	add.w	r2, r0, #16
 8007108:	4618      	mov	r0, r3
 800710a:	4553      	cmp	r3, sl
 800710c:	db33      	blt.n	8007176 <__lshift+0xb6>
 800710e:	6920      	ldr	r0, [r4, #16]
 8007110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007114:	f104 0314 	add.w	r3, r4, #20
 8007118:	f019 091f 	ands.w	r9, r9, #31
 800711c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007124:	d02b      	beq.n	800717e <__lshift+0xbe>
 8007126:	f1c9 0e20 	rsb	lr, r9, #32
 800712a:	468a      	mov	sl, r1
 800712c:	2200      	movs	r2, #0
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	fa00 f009 	lsl.w	r0, r0, r9
 8007134:	4310      	orrs	r0, r2
 8007136:	f84a 0b04 	str.w	r0, [sl], #4
 800713a:	f853 2b04 	ldr.w	r2, [r3], #4
 800713e:	459c      	cmp	ip, r3
 8007140:	fa22 f20e 	lsr.w	r2, r2, lr
 8007144:	d8f3      	bhi.n	800712e <__lshift+0x6e>
 8007146:	ebac 0304 	sub.w	r3, ip, r4
 800714a:	3b15      	subs	r3, #21
 800714c:	f023 0303 	bic.w	r3, r3, #3
 8007150:	3304      	adds	r3, #4
 8007152:	f104 0015 	add.w	r0, r4, #21
 8007156:	4584      	cmp	ip, r0
 8007158:	bf38      	it	cc
 800715a:	2304      	movcc	r3, #4
 800715c:	50ca      	str	r2, [r1, r3]
 800715e:	b10a      	cbz	r2, 8007164 <__lshift+0xa4>
 8007160:	f108 0602 	add.w	r6, r8, #2
 8007164:	3e01      	subs	r6, #1
 8007166:	4638      	mov	r0, r7
 8007168:	612e      	str	r6, [r5, #16]
 800716a:	4621      	mov	r1, r4
 800716c:	f7ff fd90 	bl	8006c90 <_Bfree>
 8007170:	4628      	mov	r0, r5
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	f842 0f04 	str.w	r0, [r2, #4]!
 800717a:	3301      	adds	r3, #1
 800717c:	e7c5      	b.n	800710a <__lshift+0x4a>
 800717e:	3904      	subs	r1, #4
 8007180:	f853 2b04 	ldr.w	r2, [r3], #4
 8007184:	f841 2f04 	str.w	r2, [r1, #4]!
 8007188:	459c      	cmp	ip, r3
 800718a:	d8f9      	bhi.n	8007180 <__lshift+0xc0>
 800718c:	e7ea      	b.n	8007164 <__lshift+0xa4>
 800718e:	bf00      	nop
 8007190:	0800952d 	.word	0x0800952d
 8007194:	0800953e 	.word	0x0800953e

08007198 <__mcmp>:
 8007198:	690a      	ldr	r2, [r1, #16]
 800719a:	4603      	mov	r3, r0
 800719c:	6900      	ldr	r0, [r0, #16]
 800719e:	1a80      	subs	r0, r0, r2
 80071a0:	b530      	push	{r4, r5, lr}
 80071a2:	d10e      	bne.n	80071c2 <__mcmp+0x2a>
 80071a4:	3314      	adds	r3, #20
 80071a6:	3114      	adds	r1, #20
 80071a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071b8:	4295      	cmp	r5, r2
 80071ba:	d003      	beq.n	80071c4 <__mcmp+0x2c>
 80071bc:	d205      	bcs.n	80071ca <__mcmp+0x32>
 80071be:	f04f 30ff 	mov.w	r0, #4294967295
 80071c2:	bd30      	pop	{r4, r5, pc}
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d3f3      	bcc.n	80071b0 <__mcmp+0x18>
 80071c8:	e7fb      	b.n	80071c2 <__mcmp+0x2a>
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7f9      	b.n	80071c2 <__mcmp+0x2a>
	...

080071d0 <__mdiff>:
 80071d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	4689      	mov	r9, r1
 80071d6:	4606      	mov	r6, r0
 80071d8:	4611      	mov	r1, r2
 80071da:	4648      	mov	r0, r9
 80071dc:	4614      	mov	r4, r2
 80071de:	f7ff ffdb 	bl	8007198 <__mcmp>
 80071e2:	1e05      	subs	r5, r0, #0
 80071e4:	d112      	bne.n	800720c <__mdiff+0x3c>
 80071e6:	4629      	mov	r1, r5
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff fd11 	bl	8006c10 <_Balloc>
 80071ee:	4602      	mov	r2, r0
 80071f0:	b928      	cbnz	r0, 80071fe <__mdiff+0x2e>
 80071f2:	4b3f      	ldr	r3, [pc, #252]	@ (80072f0 <__mdiff+0x120>)
 80071f4:	f240 2137 	movw	r1, #567	@ 0x237
 80071f8:	483e      	ldr	r0, [pc, #248]	@ (80072f4 <__mdiff+0x124>)
 80071fa:	f001 fa95 	bl	8008728 <__assert_func>
 80071fe:	2301      	movs	r3, #1
 8007200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007204:	4610      	mov	r0, r2
 8007206:	b003      	add	sp, #12
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	bfbc      	itt	lt
 800720e:	464b      	movlt	r3, r9
 8007210:	46a1      	movlt	r9, r4
 8007212:	4630      	mov	r0, r6
 8007214:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007218:	bfba      	itte	lt
 800721a:	461c      	movlt	r4, r3
 800721c:	2501      	movlt	r5, #1
 800721e:	2500      	movge	r5, #0
 8007220:	f7ff fcf6 	bl	8006c10 <_Balloc>
 8007224:	4602      	mov	r2, r0
 8007226:	b918      	cbnz	r0, 8007230 <__mdiff+0x60>
 8007228:	4b31      	ldr	r3, [pc, #196]	@ (80072f0 <__mdiff+0x120>)
 800722a:	f240 2145 	movw	r1, #581	@ 0x245
 800722e:	e7e3      	b.n	80071f8 <__mdiff+0x28>
 8007230:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007234:	6926      	ldr	r6, [r4, #16]
 8007236:	60c5      	str	r5, [r0, #12]
 8007238:	f109 0310 	add.w	r3, r9, #16
 800723c:	f109 0514 	add.w	r5, r9, #20
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	f100 0b14 	add.w	fp, r0, #20
 8007248:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800724c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	46d9      	mov	r9, fp
 8007254:	f04f 0c00 	mov.w	ip, #0
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800725e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	fa1f f38a 	uxth.w	r3, sl
 8007268:	4619      	mov	r1, r3
 800726a:	b283      	uxth	r3, r0
 800726c:	1acb      	subs	r3, r1, r3
 800726e:	0c00      	lsrs	r0, r0, #16
 8007270:	4463      	add	r3, ip
 8007272:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007276:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007280:	4576      	cmp	r6, lr
 8007282:	f849 3b04 	str.w	r3, [r9], #4
 8007286:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800728a:	d8e5      	bhi.n	8007258 <__mdiff+0x88>
 800728c:	1b33      	subs	r3, r6, r4
 800728e:	3b15      	subs	r3, #21
 8007290:	f023 0303 	bic.w	r3, r3, #3
 8007294:	3415      	adds	r4, #21
 8007296:	3304      	adds	r3, #4
 8007298:	42a6      	cmp	r6, r4
 800729a:	bf38      	it	cc
 800729c:	2304      	movcc	r3, #4
 800729e:	441d      	add	r5, r3
 80072a0:	445b      	add	r3, fp
 80072a2:	461e      	mov	r6, r3
 80072a4:	462c      	mov	r4, r5
 80072a6:	4544      	cmp	r4, r8
 80072a8:	d30e      	bcc.n	80072c8 <__mdiff+0xf8>
 80072aa:	f108 0103 	add.w	r1, r8, #3
 80072ae:	1b49      	subs	r1, r1, r5
 80072b0:	f021 0103 	bic.w	r1, r1, #3
 80072b4:	3d03      	subs	r5, #3
 80072b6:	45a8      	cmp	r8, r5
 80072b8:	bf38      	it	cc
 80072ba:	2100      	movcc	r1, #0
 80072bc:	440b      	add	r3, r1
 80072be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072c2:	b191      	cbz	r1, 80072ea <__mdiff+0x11a>
 80072c4:	6117      	str	r7, [r2, #16]
 80072c6:	e79d      	b.n	8007204 <__mdiff+0x34>
 80072c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80072cc:	46e6      	mov	lr, ip
 80072ce:	0c08      	lsrs	r0, r1, #16
 80072d0:	fa1c fc81 	uxtah	ip, ip, r1
 80072d4:	4471      	add	r1, lr
 80072d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072da:	b289      	uxth	r1, r1
 80072dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072e0:	f846 1b04 	str.w	r1, [r6], #4
 80072e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072e8:	e7dd      	b.n	80072a6 <__mdiff+0xd6>
 80072ea:	3f01      	subs	r7, #1
 80072ec:	e7e7      	b.n	80072be <__mdiff+0xee>
 80072ee:	bf00      	nop
 80072f0:	0800952d 	.word	0x0800952d
 80072f4:	0800953e 	.word	0x0800953e

080072f8 <__ulp>:
 80072f8:	b082      	sub	sp, #8
 80072fa:	ed8d 0b00 	vstr	d0, [sp]
 80072fe:	9a01      	ldr	r2, [sp, #4]
 8007300:	4b0f      	ldr	r3, [pc, #60]	@ (8007340 <__ulp+0x48>)
 8007302:	4013      	ands	r3, r2
 8007304:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc08      	bgt.n	800731e <__ulp+0x26>
 800730c:	425b      	negs	r3, r3
 800730e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007312:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007316:	da04      	bge.n	8007322 <__ulp+0x2a>
 8007318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800731c:	4113      	asrs	r3, r2
 800731e:	2200      	movs	r2, #0
 8007320:	e008      	b.n	8007334 <__ulp+0x3c>
 8007322:	f1a2 0314 	sub.w	r3, r2, #20
 8007326:	2b1e      	cmp	r3, #30
 8007328:	bfda      	itte	le
 800732a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800732e:	40da      	lsrle	r2, r3
 8007330:	2201      	movgt	r2, #1
 8007332:	2300      	movs	r3, #0
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	ec41 0b10 	vmov	d0, r0, r1
 800733c:	b002      	add	sp, #8
 800733e:	4770      	bx	lr
 8007340:	7ff00000 	.word	0x7ff00000

08007344 <__b2d>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	6906      	ldr	r6, [r0, #16]
 800734a:	f100 0814 	add.w	r8, r0, #20
 800734e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007352:	1f37      	subs	r7, r6, #4
 8007354:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007358:	4610      	mov	r0, r2
 800735a:	f7ff fd4b 	bl	8006df4 <__hi0bits>
 800735e:	f1c0 0320 	rsb	r3, r0, #32
 8007362:	280a      	cmp	r0, #10
 8007364:	600b      	str	r3, [r1, #0]
 8007366:	491b      	ldr	r1, [pc, #108]	@ (80073d4 <__b2d+0x90>)
 8007368:	dc15      	bgt.n	8007396 <__b2d+0x52>
 800736a:	f1c0 0c0b 	rsb	ip, r0, #11
 800736e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007372:	45b8      	cmp	r8, r7
 8007374:	ea43 0501 	orr.w	r5, r3, r1
 8007378:	bf34      	ite	cc
 800737a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800737e:	2300      	movcs	r3, #0
 8007380:	3015      	adds	r0, #21
 8007382:	fa02 f000 	lsl.w	r0, r2, r0
 8007386:	fa23 f30c 	lsr.w	r3, r3, ip
 800738a:	4303      	orrs	r3, r0
 800738c:	461c      	mov	r4, r3
 800738e:	ec45 4b10 	vmov	d0, r4, r5
 8007392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007396:	45b8      	cmp	r8, r7
 8007398:	bf3a      	itte	cc
 800739a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800739e:	f1a6 0708 	subcc.w	r7, r6, #8
 80073a2:	2300      	movcs	r3, #0
 80073a4:	380b      	subs	r0, #11
 80073a6:	d012      	beq.n	80073ce <__b2d+0x8a>
 80073a8:	f1c0 0120 	rsb	r1, r0, #32
 80073ac:	fa23 f401 	lsr.w	r4, r3, r1
 80073b0:	4082      	lsls	r2, r0
 80073b2:	4322      	orrs	r2, r4
 80073b4:	4547      	cmp	r7, r8
 80073b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80073ba:	bf8c      	ite	hi
 80073bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80073c0:	2200      	movls	r2, #0
 80073c2:	4083      	lsls	r3, r0
 80073c4:	40ca      	lsrs	r2, r1
 80073c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80073ca:	4313      	orrs	r3, r2
 80073cc:	e7de      	b.n	800738c <__b2d+0x48>
 80073ce:	ea42 0501 	orr.w	r5, r2, r1
 80073d2:	e7db      	b.n	800738c <__b2d+0x48>
 80073d4:	3ff00000 	.word	0x3ff00000

080073d8 <__d2b>:
 80073d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	460f      	mov	r7, r1
 80073de:	2101      	movs	r1, #1
 80073e0:	ec59 8b10 	vmov	r8, r9, d0
 80073e4:	4616      	mov	r6, r2
 80073e6:	f7ff fc13 	bl	8006c10 <_Balloc>
 80073ea:	4604      	mov	r4, r0
 80073ec:	b930      	cbnz	r0, 80073fc <__d2b+0x24>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b23      	ldr	r3, [pc, #140]	@ (8007480 <__d2b+0xa8>)
 80073f2:	4824      	ldr	r0, [pc, #144]	@ (8007484 <__d2b+0xac>)
 80073f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80073f8:	f001 f996 	bl	8008728 <__assert_func>
 80073fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007404:	b10d      	cbz	r5, 800740a <__d2b+0x32>
 8007406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	f1b8 0300 	subs.w	r3, r8, #0
 8007410:	d023      	beq.n	800745a <__d2b+0x82>
 8007412:	4668      	mov	r0, sp
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	f7ff fd0c 	bl	8006e32 <__lo0bits>
 800741a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800741e:	b1d0      	cbz	r0, 8007456 <__d2b+0x7e>
 8007420:	f1c0 0320 	rsb	r3, r0, #32
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	430b      	orrs	r3, r1
 800742a:	40c2      	lsrs	r2, r0
 800742c:	6163      	str	r3, [r4, #20]
 800742e:	9201      	str	r2, [sp, #4]
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	61a3      	str	r3, [r4, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf0c      	ite	eq
 8007438:	2201      	moveq	r2, #1
 800743a:	2202      	movne	r2, #2
 800743c:	6122      	str	r2, [r4, #16]
 800743e:	b1a5      	cbz	r5, 800746a <__d2b+0x92>
 8007440:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007444:	4405      	add	r5, r0
 8007446:	603d      	str	r5, [r7, #0]
 8007448:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800744c:	6030      	str	r0, [r6, #0]
 800744e:	4620      	mov	r0, r4
 8007450:	b003      	add	sp, #12
 8007452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007456:	6161      	str	r1, [r4, #20]
 8007458:	e7ea      	b.n	8007430 <__d2b+0x58>
 800745a:	a801      	add	r0, sp, #4
 800745c:	f7ff fce9 	bl	8006e32 <__lo0bits>
 8007460:	9b01      	ldr	r3, [sp, #4]
 8007462:	6163      	str	r3, [r4, #20]
 8007464:	3020      	adds	r0, #32
 8007466:	2201      	movs	r2, #1
 8007468:	e7e8      	b.n	800743c <__d2b+0x64>
 800746a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800746e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007472:	6038      	str	r0, [r7, #0]
 8007474:	6918      	ldr	r0, [r3, #16]
 8007476:	f7ff fcbd 	bl	8006df4 <__hi0bits>
 800747a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800747e:	e7e5      	b.n	800744c <__d2b+0x74>
 8007480:	0800952d 	.word	0x0800952d
 8007484:	0800953e 	.word	0x0800953e

08007488 <__ratio>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	b085      	sub	sp, #20
 800748e:	e9cd 1000 	strd	r1, r0, [sp]
 8007492:	a902      	add	r1, sp, #8
 8007494:	f7ff ff56 	bl	8007344 <__b2d>
 8007498:	9800      	ldr	r0, [sp, #0]
 800749a:	a903      	add	r1, sp, #12
 800749c:	ec55 4b10 	vmov	r4, r5, d0
 80074a0:	f7ff ff50 	bl	8007344 <__b2d>
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	6919      	ldr	r1, [r3, #16]
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	1ac9      	subs	r1, r1, r3
 80074ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	ec5b ab10 	vmov	sl, fp, d0
 80074b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfce      	itee	gt
 80074c0:	462a      	movgt	r2, r5
 80074c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074c6:	465a      	movle	r2, fp
 80074c8:	462f      	mov	r7, r5
 80074ca:	46d9      	mov	r9, fp
 80074cc:	bfcc      	ite	gt
 80074ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80074d6:	464b      	mov	r3, r9
 80074d8:	4652      	mov	r2, sl
 80074da:	4620      	mov	r0, r4
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f9 f9b5 	bl	800084c <__aeabi_ddiv>
 80074e2:	ec41 0b10 	vmov	d0, r0, r1
 80074e6:	b005      	add	sp, #20
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074ec <__copybits>:
 80074ec:	3901      	subs	r1, #1
 80074ee:	b570      	push	{r4, r5, r6, lr}
 80074f0:	1149      	asrs	r1, r1, #5
 80074f2:	6914      	ldr	r4, [r2, #16]
 80074f4:	3101      	adds	r1, #1
 80074f6:	f102 0314 	add.w	r3, r2, #20
 80074fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007502:	1f05      	subs	r5, r0, #4
 8007504:	42a3      	cmp	r3, r4
 8007506:	d30c      	bcc.n	8007522 <__copybits+0x36>
 8007508:	1aa3      	subs	r3, r4, r2
 800750a:	3b11      	subs	r3, #17
 800750c:	f023 0303 	bic.w	r3, r3, #3
 8007510:	3211      	adds	r2, #17
 8007512:	42a2      	cmp	r2, r4
 8007514:	bf88      	it	hi
 8007516:	2300      	movhi	r3, #0
 8007518:	4418      	add	r0, r3
 800751a:	2300      	movs	r3, #0
 800751c:	4288      	cmp	r0, r1
 800751e:	d305      	bcc.n	800752c <__copybits+0x40>
 8007520:	bd70      	pop	{r4, r5, r6, pc}
 8007522:	f853 6b04 	ldr.w	r6, [r3], #4
 8007526:	f845 6f04 	str.w	r6, [r5, #4]!
 800752a:	e7eb      	b.n	8007504 <__copybits+0x18>
 800752c:	f840 3b04 	str.w	r3, [r0], #4
 8007530:	e7f4      	b.n	800751c <__copybits+0x30>

08007532 <__any_on>:
 8007532:	f100 0214 	add.w	r2, r0, #20
 8007536:	6900      	ldr	r0, [r0, #16]
 8007538:	114b      	asrs	r3, r1, #5
 800753a:	4298      	cmp	r0, r3
 800753c:	b510      	push	{r4, lr}
 800753e:	db11      	blt.n	8007564 <__any_on+0x32>
 8007540:	dd0a      	ble.n	8007558 <__any_on+0x26>
 8007542:	f011 011f 	ands.w	r1, r1, #31
 8007546:	d007      	beq.n	8007558 <__any_on+0x26>
 8007548:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800754c:	fa24 f001 	lsr.w	r0, r4, r1
 8007550:	fa00 f101 	lsl.w	r1, r0, r1
 8007554:	428c      	cmp	r4, r1
 8007556:	d10b      	bne.n	8007570 <__any_on+0x3e>
 8007558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800755c:	4293      	cmp	r3, r2
 800755e:	d803      	bhi.n	8007568 <__any_on+0x36>
 8007560:	2000      	movs	r0, #0
 8007562:	bd10      	pop	{r4, pc}
 8007564:	4603      	mov	r3, r0
 8007566:	e7f7      	b.n	8007558 <__any_on+0x26>
 8007568:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800756c:	2900      	cmp	r1, #0
 800756e:	d0f5      	beq.n	800755c <__any_on+0x2a>
 8007570:	2001      	movs	r0, #1
 8007572:	e7f6      	b.n	8007562 <__any_on+0x30>

08007574 <sulp>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	ec45 4b10 	vmov	d0, r4, r5
 800757e:	4616      	mov	r6, r2
 8007580:	f7ff feba 	bl	80072f8 <__ulp>
 8007584:	ec51 0b10 	vmov	r0, r1, d0
 8007588:	b17e      	cbz	r6, 80075aa <sulp+0x36>
 800758a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800758e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd09      	ble.n	80075aa <sulp+0x36>
 8007596:	051b      	lsls	r3, r3, #20
 8007598:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800759c:	2400      	movs	r4, #0
 800759e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80075a2:	4622      	mov	r2, r4
 80075a4:	462b      	mov	r3, r5
 80075a6:	f7f9 f827 	bl	80005f8 <__aeabi_dmul>
 80075aa:	ec41 0b10 	vmov	d0, r0, r1
 80075ae:	bd70      	pop	{r4, r5, r6, pc}

080075b0 <_strtod_l>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	b09f      	sub	sp, #124	@ 0x7c
 80075b6:	460c      	mov	r4, r1
 80075b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80075ba:	2200      	movs	r2, #0
 80075bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80075be:	9005      	str	r0, [sp, #20]
 80075c0:	f04f 0a00 	mov.w	sl, #0
 80075c4:	f04f 0b00 	mov.w	fp, #0
 80075c8:	460a      	mov	r2, r1
 80075ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80075cc:	7811      	ldrb	r1, [r2, #0]
 80075ce:	292b      	cmp	r1, #43	@ 0x2b
 80075d0:	d04a      	beq.n	8007668 <_strtod_l+0xb8>
 80075d2:	d838      	bhi.n	8007646 <_strtod_l+0x96>
 80075d4:	290d      	cmp	r1, #13
 80075d6:	d832      	bhi.n	800763e <_strtod_l+0x8e>
 80075d8:	2908      	cmp	r1, #8
 80075da:	d832      	bhi.n	8007642 <_strtod_l+0x92>
 80075dc:	2900      	cmp	r1, #0
 80075de:	d03b      	beq.n	8007658 <_strtod_l+0xa8>
 80075e0:	2200      	movs	r2, #0
 80075e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80075e6:	782a      	ldrb	r2, [r5, #0]
 80075e8:	2a30      	cmp	r2, #48	@ 0x30
 80075ea:	f040 80b3 	bne.w	8007754 <_strtod_l+0x1a4>
 80075ee:	786a      	ldrb	r2, [r5, #1]
 80075f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075f4:	2a58      	cmp	r2, #88	@ 0x58
 80075f6:	d16e      	bne.n	80076d6 <_strtod_l+0x126>
 80075f8:	9302      	str	r3, [sp, #8]
 80075fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4a8e      	ldr	r2, [pc, #568]	@ (800783c <_strtod_l+0x28c>)
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007608:	a919      	add	r1, sp, #100	@ 0x64
 800760a:	f001 f927 	bl	800885c <__gethex>
 800760e:	f010 060f 	ands.w	r6, r0, #15
 8007612:	4604      	mov	r4, r0
 8007614:	d005      	beq.n	8007622 <_strtod_l+0x72>
 8007616:	2e06      	cmp	r6, #6
 8007618:	d128      	bne.n	800766c <_strtod_l+0xbc>
 800761a:	3501      	adds	r5, #1
 800761c:	2300      	movs	r3, #0
 800761e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 858e 	bne.w	8008146 <_strtod_l+0xb96>
 800762a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800762c:	b1cb      	cbz	r3, 8007662 <_strtod_l+0xb2>
 800762e:	4652      	mov	r2, sl
 8007630:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007634:	ec43 2b10 	vmov	d0, r2, r3
 8007638:	b01f      	add	sp, #124	@ 0x7c
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	2920      	cmp	r1, #32
 8007640:	d1ce      	bne.n	80075e0 <_strtod_l+0x30>
 8007642:	3201      	adds	r2, #1
 8007644:	e7c1      	b.n	80075ca <_strtod_l+0x1a>
 8007646:	292d      	cmp	r1, #45	@ 0x2d
 8007648:	d1ca      	bne.n	80075e0 <_strtod_l+0x30>
 800764a:	2101      	movs	r1, #1
 800764c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800764e:	1c51      	adds	r1, r2, #1
 8007650:	9119      	str	r1, [sp, #100]	@ 0x64
 8007652:	7852      	ldrb	r2, [r2, #1]
 8007654:	2a00      	cmp	r2, #0
 8007656:	d1c5      	bne.n	80075e4 <_strtod_l+0x34>
 8007658:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800765a:	9419      	str	r4, [sp, #100]	@ 0x64
 800765c:	2b00      	cmp	r3, #0
 800765e:	f040 8570 	bne.w	8008142 <_strtod_l+0xb92>
 8007662:	4652      	mov	r2, sl
 8007664:	465b      	mov	r3, fp
 8007666:	e7e5      	b.n	8007634 <_strtod_l+0x84>
 8007668:	2100      	movs	r1, #0
 800766a:	e7ef      	b.n	800764c <_strtod_l+0x9c>
 800766c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800766e:	b13a      	cbz	r2, 8007680 <_strtod_l+0xd0>
 8007670:	2135      	movs	r1, #53	@ 0x35
 8007672:	a81c      	add	r0, sp, #112	@ 0x70
 8007674:	f7ff ff3a 	bl	80074ec <__copybits>
 8007678:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800767a:	9805      	ldr	r0, [sp, #20]
 800767c:	f7ff fb08 	bl	8006c90 <_Bfree>
 8007680:	3e01      	subs	r6, #1
 8007682:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007684:	2e04      	cmp	r6, #4
 8007686:	d806      	bhi.n	8007696 <_strtod_l+0xe6>
 8007688:	e8df f006 	tbb	[pc, r6]
 800768c:	201d0314 	.word	0x201d0314
 8007690:	14          	.byte	0x14
 8007691:	00          	.byte	0x00
 8007692:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007696:	05e1      	lsls	r1, r4, #23
 8007698:	bf48      	it	mi
 800769a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800769e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076a2:	0d1b      	lsrs	r3, r3, #20
 80076a4:	051b      	lsls	r3, r3, #20
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1bb      	bne.n	8007622 <_strtod_l+0x72>
 80076aa:	f7fe fb31 	bl	8005d10 <__errno>
 80076ae:	2322      	movs	r3, #34	@ 0x22
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	e7b6      	b.n	8007622 <_strtod_l+0x72>
 80076b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80076b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80076bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80076c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076c4:	e7e7      	b.n	8007696 <_strtod_l+0xe6>
 80076c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007844 <_strtod_l+0x294>
 80076ca:	e7e4      	b.n	8007696 <_strtod_l+0xe6>
 80076cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80076d0:	f04f 3aff 	mov.w	sl, #4294967295
 80076d4:	e7df      	b.n	8007696 <_strtod_l+0xe6>
 80076d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	9219      	str	r2, [sp, #100]	@ 0x64
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b30      	cmp	r3, #48	@ 0x30
 80076e0:	d0f9      	beq.n	80076d6 <_strtod_l+0x126>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d09d      	beq.n	8007622 <_strtod_l+0x72>
 80076e6:	2301      	movs	r3, #1
 80076e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80076ee:	2300      	movs	r3, #0
 80076f0:	9308      	str	r3, [sp, #32]
 80076f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f4:	461f      	mov	r7, r3
 80076f6:	220a      	movs	r2, #10
 80076f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076fa:	7805      	ldrb	r5, [r0, #0]
 80076fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007700:	b2d9      	uxtb	r1, r3
 8007702:	2909      	cmp	r1, #9
 8007704:	d928      	bls.n	8007758 <_strtod_l+0x1a8>
 8007706:	494e      	ldr	r1, [pc, #312]	@ (8007840 <_strtod_l+0x290>)
 8007708:	2201      	movs	r2, #1
 800770a:	f000 ffd5 	bl	80086b8 <strncmp>
 800770e:	2800      	cmp	r0, #0
 8007710:	d032      	beq.n	8007778 <_strtod_l+0x1c8>
 8007712:	2000      	movs	r0, #0
 8007714:	462a      	mov	r2, r5
 8007716:	4681      	mov	r9, r0
 8007718:	463d      	mov	r5, r7
 800771a:	4603      	mov	r3, r0
 800771c:	2a65      	cmp	r2, #101	@ 0x65
 800771e:	d001      	beq.n	8007724 <_strtod_l+0x174>
 8007720:	2a45      	cmp	r2, #69	@ 0x45
 8007722:	d114      	bne.n	800774e <_strtod_l+0x19e>
 8007724:	b91d      	cbnz	r5, 800772e <_strtod_l+0x17e>
 8007726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007728:	4302      	orrs	r2, r0
 800772a:	d095      	beq.n	8007658 <_strtod_l+0xa8>
 800772c:	2500      	movs	r5, #0
 800772e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007730:	1c62      	adds	r2, r4, #1
 8007732:	9219      	str	r2, [sp, #100]	@ 0x64
 8007734:	7862      	ldrb	r2, [r4, #1]
 8007736:	2a2b      	cmp	r2, #43	@ 0x2b
 8007738:	d077      	beq.n	800782a <_strtod_l+0x27a>
 800773a:	2a2d      	cmp	r2, #45	@ 0x2d
 800773c:	d07b      	beq.n	8007836 <_strtod_l+0x286>
 800773e:	f04f 0c00 	mov.w	ip, #0
 8007742:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007746:	2909      	cmp	r1, #9
 8007748:	f240 8082 	bls.w	8007850 <_strtod_l+0x2a0>
 800774c:	9419      	str	r4, [sp, #100]	@ 0x64
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	e0a2      	b.n	800789a <_strtod_l+0x2ea>
 8007754:	2300      	movs	r3, #0
 8007756:	e7c7      	b.n	80076e8 <_strtod_l+0x138>
 8007758:	2f08      	cmp	r7, #8
 800775a:	bfd5      	itete	le
 800775c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800775e:	9908      	ldrgt	r1, [sp, #32]
 8007760:	fb02 3301 	mlale	r3, r2, r1, r3
 8007764:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007768:	f100 0001 	add.w	r0, r0, #1
 800776c:	bfd4      	ite	le
 800776e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007770:	9308      	strgt	r3, [sp, #32]
 8007772:	3701      	adds	r7, #1
 8007774:	9019      	str	r0, [sp, #100]	@ 0x64
 8007776:	e7bf      	b.n	80076f8 <_strtod_l+0x148>
 8007778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	9219      	str	r2, [sp, #100]	@ 0x64
 800777e:	785a      	ldrb	r2, [r3, #1]
 8007780:	b37f      	cbz	r7, 80077e2 <_strtod_l+0x232>
 8007782:	4681      	mov	r9, r0
 8007784:	463d      	mov	r5, r7
 8007786:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d912      	bls.n	80077b4 <_strtod_l+0x204>
 800778e:	2301      	movs	r3, #1
 8007790:	e7c4      	b.n	800771c <_strtod_l+0x16c>
 8007792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	9219      	str	r2, [sp, #100]	@ 0x64
 8007798:	785a      	ldrb	r2, [r3, #1]
 800779a:	3001      	adds	r0, #1
 800779c:	2a30      	cmp	r2, #48	@ 0x30
 800779e:	d0f8      	beq.n	8007792 <_strtod_l+0x1e2>
 80077a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	f200 84d3 	bhi.w	8008150 <_strtod_l+0xba0>
 80077aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80077ae:	4681      	mov	r9, r0
 80077b0:	2000      	movs	r0, #0
 80077b2:	4605      	mov	r5, r0
 80077b4:	3a30      	subs	r2, #48	@ 0x30
 80077b6:	f100 0301 	add.w	r3, r0, #1
 80077ba:	d02a      	beq.n	8007812 <_strtod_l+0x262>
 80077bc:	4499      	add	r9, r3
 80077be:	eb00 0c05 	add.w	ip, r0, r5
 80077c2:	462b      	mov	r3, r5
 80077c4:	210a      	movs	r1, #10
 80077c6:	4563      	cmp	r3, ip
 80077c8:	d10d      	bne.n	80077e6 <_strtod_l+0x236>
 80077ca:	1c69      	adds	r1, r5, #1
 80077cc:	4401      	add	r1, r0
 80077ce:	4428      	add	r0, r5
 80077d0:	2808      	cmp	r0, #8
 80077d2:	dc16      	bgt.n	8007802 <_strtod_l+0x252>
 80077d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077d6:	230a      	movs	r3, #10
 80077d8:	fb03 2300 	mla	r3, r3, r0, r2
 80077dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80077de:	2300      	movs	r3, #0
 80077e0:	e018      	b.n	8007814 <_strtod_l+0x264>
 80077e2:	4638      	mov	r0, r7
 80077e4:	e7da      	b.n	800779c <_strtod_l+0x1ec>
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	f103 0301 	add.w	r3, r3, #1
 80077ec:	dc03      	bgt.n	80077f6 <_strtod_l+0x246>
 80077ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80077f0:	434e      	muls	r6, r1
 80077f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80077f4:	e7e7      	b.n	80077c6 <_strtod_l+0x216>
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	bfde      	ittt	le
 80077fa:	9e08      	ldrle	r6, [sp, #32]
 80077fc:	434e      	mulle	r6, r1
 80077fe:	9608      	strle	r6, [sp, #32]
 8007800:	e7e1      	b.n	80077c6 <_strtod_l+0x216>
 8007802:	280f      	cmp	r0, #15
 8007804:	dceb      	bgt.n	80077de <_strtod_l+0x22e>
 8007806:	9808      	ldr	r0, [sp, #32]
 8007808:	230a      	movs	r3, #10
 800780a:	fb03 2300 	mla	r3, r3, r0, r2
 800780e:	9308      	str	r3, [sp, #32]
 8007810:	e7e5      	b.n	80077de <_strtod_l+0x22e>
 8007812:	4629      	mov	r1, r5
 8007814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007816:	1c50      	adds	r0, r2, #1
 8007818:	9019      	str	r0, [sp, #100]	@ 0x64
 800781a:	7852      	ldrb	r2, [r2, #1]
 800781c:	4618      	mov	r0, r3
 800781e:	460d      	mov	r5, r1
 8007820:	e7b1      	b.n	8007786 <_strtod_l+0x1d6>
 8007822:	f04f 0900 	mov.w	r9, #0
 8007826:	2301      	movs	r3, #1
 8007828:	e77d      	b.n	8007726 <_strtod_l+0x176>
 800782a:	f04f 0c00 	mov.w	ip, #0
 800782e:	1ca2      	adds	r2, r4, #2
 8007830:	9219      	str	r2, [sp, #100]	@ 0x64
 8007832:	78a2      	ldrb	r2, [r4, #2]
 8007834:	e785      	b.n	8007742 <_strtod_l+0x192>
 8007836:	f04f 0c01 	mov.w	ip, #1
 800783a:	e7f8      	b.n	800782e <_strtod_l+0x27e>
 800783c:	080096b0 	.word	0x080096b0
 8007840:	08009698 	.word	0x08009698
 8007844:	7ff00000 	.word	0x7ff00000
 8007848:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800784a:	1c51      	adds	r1, r2, #1
 800784c:	9119      	str	r1, [sp, #100]	@ 0x64
 800784e:	7852      	ldrb	r2, [r2, #1]
 8007850:	2a30      	cmp	r2, #48	@ 0x30
 8007852:	d0f9      	beq.n	8007848 <_strtod_l+0x298>
 8007854:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007858:	2908      	cmp	r1, #8
 800785a:	f63f af78 	bhi.w	800774e <_strtod_l+0x19e>
 800785e:	3a30      	subs	r2, #48	@ 0x30
 8007860:	920e      	str	r2, [sp, #56]	@ 0x38
 8007862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007864:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007866:	f04f 080a 	mov.w	r8, #10
 800786a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800786c:	1c56      	adds	r6, r2, #1
 800786e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007870:	7852      	ldrb	r2, [r2, #1]
 8007872:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007876:	f1be 0f09 	cmp.w	lr, #9
 800787a:	d939      	bls.n	80078f0 <_strtod_l+0x340>
 800787c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800787e:	1a76      	subs	r6, r6, r1
 8007880:	2e08      	cmp	r6, #8
 8007882:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007886:	dc03      	bgt.n	8007890 <_strtod_l+0x2e0>
 8007888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800788a:	4588      	cmp	r8, r1
 800788c:	bfa8      	it	ge
 800788e:	4688      	movge	r8, r1
 8007890:	f1bc 0f00 	cmp.w	ip, #0
 8007894:	d001      	beq.n	800789a <_strtod_l+0x2ea>
 8007896:	f1c8 0800 	rsb	r8, r8, #0
 800789a:	2d00      	cmp	r5, #0
 800789c:	d14e      	bne.n	800793c <_strtod_l+0x38c>
 800789e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078a0:	4308      	orrs	r0, r1
 80078a2:	f47f aebe 	bne.w	8007622 <_strtod_l+0x72>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f aed6 	bne.w	8007658 <_strtod_l+0xa8>
 80078ac:	2a69      	cmp	r2, #105	@ 0x69
 80078ae:	d028      	beq.n	8007902 <_strtod_l+0x352>
 80078b0:	dc25      	bgt.n	80078fe <_strtod_l+0x34e>
 80078b2:	2a49      	cmp	r2, #73	@ 0x49
 80078b4:	d025      	beq.n	8007902 <_strtod_l+0x352>
 80078b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80078b8:	f47f aece 	bne.w	8007658 <_strtod_l+0xa8>
 80078bc:	499b      	ldr	r1, [pc, #620]	@ (8007b2c <_strtod_l+0x57c>)
 80078be:	a819      	add	r0, sp, #100	@ 0x64
 80078c0:	f001 f9ee 	bl	8008ca0 <__match>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f aec7 	beq.w	8007658 <_strtod_l+0xa8>
 80078ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b28      	cmp	r3, #40	@ 0x28
 80078d0:	d12e      	bne.n	8007930 <_strtod_l+0x380>
 80078d2:	4997      	ldr	r1, [pc, #604]	@ (8007b30 <_strtod_l+0x580>)
 80078d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80078d6:	a819      	add	r0, sp, #100	@ 0x64
 80078d8:	f001 f9f6 	bl	8008cc8 <__hexnan>
 80078dc:	2805      	cmp	r0, #5
 80078de:	d127      	bne.n	8007930 <_strtod_l+0x380>
 80078e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80078e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80078ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078ee:	e698      	b.n	8007622 <_strtod_l+0x72>
 80078f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078f2:	fb08 2101 	mla	r1, r8, r1, r2
 80078f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80078fc:	e7b5      	b.n	800786a <_strtod_l+0x2ba>
 80078fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8007900:	e7da      	b.n	80078b8 <_strtod_l+0x308>
 8007902:	498c      	ldr	r1, [pc, #560]	@ (8007b34 <_strtod_l+0x584>)
 8007904:	a819      	add	r0, sp, #100	@ 0x64
 8007906:	f001 f9cb 	bl	8008ca0 <__match>
 800790a:	2800      	cmp	r0, #0
 800790c:	f43f aea4 	beq.w	8007658 <_strtod_l+0xa8>
 8007910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007912:	4989      	ldr	r1, [pc, #548]	@ (8007b38 <_strtod_l+0x588>)
 8007914:	3b01      	subs	r3, #1
 8007916:	a819      	add	r0, sp, #100	@ 0x64
 8007918:	9319      	str	r3, [sp, #100]	@ 0x64
 800791a:	f001 f9c1 	bl	8008ca0 <__match>
 800791e:	b910      	cbnz	r0, 8007926 <_strtod_l+0x376>
 8007920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007922:	3301      	adds	r3, #1
 8007924:	9319      	str	r3, [sp, #100]	@ 0x64
 8007926:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007b48 <_strtod_l+0x598>
 800792a:	f04f 0a00 	mov.w	sl, #0
 800792e:	e678      	b.n	8007622 <_strtod_l+0x72>
 8007930:	4882      	ldr	r0, [pc, #520]	@ (8007b3c <_strtod_l+0x58c>)
 8007932:	f000 fef1 	bl	8008718 <nan>
 8007936:	ec5b ab10 	vmov	sl, fp, d0
 800793a:	e672      	b.n	8007622 <_strtod_l+0x72>
 800793c:	eba8 0309 	sub.w	r3, r8, r9
 8007940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007942:	9309      	str	r3, [sp, #36]	@ 0x24
 8007944:	2f00      	cmp	r7, #0
 8007946:	bf08      	it	eq
 8007948:	462f      	moveq	r7, r5
 800794a:	2d10      	cmp	r5, #16
 800794c:	462c      	mov	r4, r5
 800794e:	bfa8      	it	ge
 8007950:	2410      	movge	r4, #16
 8007952:	f7f8 fdd7 	bl	8000504 <__aeabi_ui2d>
 8007956:	2d09      	cmp	r5, #9
 8007958:	4682      	mov	sl, r0
 800795a:	468b      	mov	fp, r1
 800795c:	dc13      	bgt.n	8007986 <_strtod_l+0x3d6>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	f43f ae5e 	beq.w	8007622 <_strtod_l+0x72>
 8007966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007968:	dd78      	ble.n	8007a5c <_strtod_l+0x4ac>
 800796a:	2b16      	cmp	r3, #22
 800796c:	dc5f      	bgt.n	8007a2e <_strtod_l+0x47e>
 800796e:	4974      	ldr	r1, [pc, #464]	@ (8007b40 <_strtod_l+0x590>)
 8007970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007978:	4652      	mov	r2, sl
 800797a:	465b      	mov	r3, fp
 800797c:	f7f8 fe3c 	bl	80005f8 <__aeabi_dmul>
 8007980:	4682      	mov	sl, r0
 8007982:	468b      	mov	fp, r1
 8007984:	e64d      	b.n	8007622 <_strtod_l+0x72>
 8007986:	4b6e      	ldr	r3, [pc, #440]	@ (8007b40 <_strtod_l+0x590>)
 8007988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800798c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007990:	f7f8 fe32 	bl	80005f8 <__aeabi_dmul>
 8007994:	4682      	mov	sl, r0
 8007996:	9808      	ldr	r0, [sp, #32]
 8007998:	468b      	mov	fp, r1
 800799a:	f7f8 fdb3 	bl	8000504 <__aeabi_ui2d>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4650      	mov	r0, sl
 80079a4:	4659      	mov	r1, fp
 80079a6:	f7f8 fc71 	bl	800028c <__adddf3>
 80079aa:	2d0f      	cmp	r5, #15
 80079ac:	4682      	mov	sl, r0
 80079ae:	468b      	mov	fp, r1
 80079b0:	ddd5      	ble.n	800795e <_strtod_l+0x3ae>
 80079b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b4:	1b2c      	subs	r4, r5, r4
 80079b6:	441c      	add	r4, r3
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	f340 8096 	ble.w	8007aea <_strtod_l+0x53a>
 80079be:	f014 030f 	ands.w	r3, r4, #15
 80079c2:	d00a      	beq.n	80079da <_strtod_l+0x42a>
 80079c4:	495e      	ldr	r1, [pc, #376]	@ (8007b40 <_strtod_l+0x590>)
 80079c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079ca:	4652      	mov	r2, sl
 80079cc:	465b      	mov	r3, fp
 80079ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d2:	f7f8 fe11 	bl	80005f8 <__aeabi_dmul>
 80079d6:	4682      	mov	sl, r0
 80079d8:	468b      	mov	fp, r1
 80079da:	f034 040f 	bics.w	r4, r4, #15
 80079de:	d073      	beq.n	8007ac8 <_strtod_l+0x518>
 80079e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80079e4:	dd48      	ble.n	8007a78 <_strtod_l+0x4c8>
 80079e6:	2400      	movs	r4, #0
 80079e8:	46a0      	mov	r8, r4
 80079ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80079ec:	46a1      	mov	r9, r4
 80079ee:	9a05      	ldr	r2, [sp, #20]
 80079f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007b48 <_strtod_l+0x598>
 80079f4:	2322      	movs	r3, #34	@ 0x22
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	f04f 0a00 	mov.w	sl, #0
 80079fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f43f ae0f 	beq.w	8007622 <_strtod_l+0x72>
 8007a04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a06:	9805      	ldr	r0, [sp, #20]
 8007a08:	f7ff f942 	bl	8006c90 <_Bfree>
 8007a0c:	9805      	ldr	r0, [sp, #20]
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7ff f93e 	bl	8006c90 <_Bfree>
 8007a14:	9805      	ldr	r0, [sp, #20]
 8007a16:	4641      	mov	r1, r8
 8007a18:	f7ff f93a 	bl	8006c90 <_Bfree>
 8007a1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a1e:	9805      	ldr	r0, [sp, #20]
 8007a20:	f7ff f936 	bl	8006c90 <_Bfree>
 8007a24:	9805      	ldr	r0, [sp, #20]
 8007a26:	4621      	mov	r1, r4
 8007a28:	f7ff f932 	bl	8006c90 <_Bfree>
 8007a2c:	e5f9      	b.n	8007622 <_strtod_l+0x72>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a34:	4293      	cmp	r3, r2
 8007a36:	dbbc      	blt.n	80079b2 <_strtod_l+0x402>
 8007a38:	4c41      	ldr	r4, [pc, #260]	@ (8007b40 <_strtod_l+0x590>)
 8007a3a:	f1c5 050f 	rsb	r5, r5, #15
 8007a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a42:	4652      	mov	r2, sl
 8007a44:	465b      	mov	r3, fp
 8007a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4a:	f7f8 fdd5 	bl	80005f8 <__aeabi_dmul>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	1b5d      	subs	r5, r3, r5
 8007a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a5a:	e78f      	b.n	800797c <_strtod_l+0x3cc>
 8007a5c:	3316      	adds	r3, #22
 8007a5e:	dba8      	blt.n	80079b2 <_strtod_l+0x402>
 8007a60:	4b37      	ldr	r3, [pc, #220]	@ (8007b40 <_strtod_l+0x590>)
 8007a62:	eba9 0808 	sub.w	r8, r9, r8
 8007a66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	f7f8 feeb 	bl	800084c <__aeabi_ddiv>
 8007a76:	e783      	b.n	8007980 <_strtod_l+0x3d0>
 8007a78:	4b32      	ldr	r3, [pc, #200]	@ (8007b44 <_strtod_l+0x594>)
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	1124      	asrs	r4, r4, #4
 8007a80:	4650      	mov	r0, sl
 8007a82:	4659      	mov	r1, fp
 8007a84:	461e      	mov	r6, r3
 8007a86:	2c01      	cmp	r4, #1
 8007a88:	dc21      	bgt.n	8007ace <_strtod_l+0x51e>
 8007a8a:	b10b      	cbz	r3, 8007a90 <_strtod_l+0x4e0>
 8007a8c:	4682      	mov	sl, r0
 8007a8e:	468b      	mov	fp, r1
 8007a90:	492c      	ldr	r1, [pc, #176]	@ (8007b44 <_strtod_l+0x594>)
 8007a92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aa2:	f7f8 fda9 	bl	80005f8 <__aeabi_dmul>
 8007aa6:	4b28      	ldr	r3, [pc, #160]	@ (8007b48 <_strtod_l+0x598>)
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	400b      	ands	r3, r1
 8007aac:	4927      	ldr	r1, [pc, #156]	@ (8007b4c <_strtod_l+0x59c>)
 8007aae:	428b      	cmp	r3, r1
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	d898      	bhi.n	80079e6 <_strtod_l+0x436>
 8007ab4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf86      	itte	hi
 8007abc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007b50 <_strtod_l+0x5a0>
 8007ac0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ac4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	e07a      	b.n	8007bc4 <_strtod_l+0x614>
 8007ace:	07e2      	lsls	r2, r4, #31
 8007ad0:	d505      	bpl.n	8007ade <_strtod_l+0x52e>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fd8e 	bl	80005f8 <__aeabi_dmul>
 8007adc:	2301      	movs	r3, #1
 8007ade:	9a08      	ldr	r2, [sp, #32]
 8007ae0:	3208      	adds	r2, #8
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	1064      	asrs	r4, r4, #1
 8007ae6:	9208      	str	r2, [sp, #32]
 8007ae8:	e7cd      	b.n	8007a86 <_strtod_l+0x4d6>
 8007aea:	d0ed      	beq.n	8007ac8 <_strtod_l+0x518>
 8007aec:	4264      	negs	r4, r4
 8007aee:	f014 020f 	ands.w	r2, r4, #15
 8007af2:	d00a      	beq.n	8007b0a <_strtod_l+0x55a>
 8007af4:	4b12      	ldr	r3, [pc, #72]	@ (8007b40 <_strtod_l+0x590>)
 8007af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fea3 	bl	800084c <__aeabi_ddiv>
 8007b06:	4682      	mov	sl, r0
 8007b08:	468b      	mov	fp, r1
 8007b0a:	1124      	asrs	r4, r4, #4
 8007b0c:	d0dc      	beq.n	8007ac8 <_strtod_l+0x518>
 8007b0e:	2c1f      	cmp	r4, #31
 8007b10:	dd20      	ble.n	8007b54 <_strtod_l+0x5a4>
 8007b12:	2400      	movs	r4, #0
 8007b14:	46a0      	mov	r8, r4
 8007b16:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b18:	46a1      	mov	r9, r4
 8007b1a:	9a05      	ldr	r2, [sp, #20]
 8007b1c:	2322      	movs	r3, #34	@ 0x22
 8007b1e:	f04f 0a00 	mov.w	sl, #0
 8007b22:	f04f 0b00 	mov.w	fp, #0
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e768      	b.n	80079fc <_strtod_l+0x44c>
 8007b2a:	bf00      	nop
 8007b2c:	08009485 	.word	0x08009485
 8007b30:	0800969c 	.word	0x0800969c
 8007b34:	0800947d 	.word	0x0800947d
 8007b38:	080094b4 	.word	0x080094b4
 8007b3c:	08009845 	.word	0x08009845
 8007b40:	080095d0 	.word	0x080095d0
 8007b44:	080095a8 	.word	0x080095a8
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	7ca00000 	.word	0x7ca00000
 8007b50:	7fefffff 	.word	0x7fefffff
 8007b54:	f014 0310 	ands.w	r3, r4, #16
 8007b58:	bf18      	it	ne
 8007b5a:	236a      	movne	r3, #106	@ 0x6a
 8007b5c:	4ea9      	ldr	r6, [pc, #676]	@ (8007e04 <_strtod_l+0x854>)
 8007b5e:	9308      	str	r3, [sp, #32]
 8007b60:	4650      	mov	r0, sl
 8007b62:	4659      	mov	r1, fp
 8007b64:	2300      	movs	r3, #0
 8007b66:	07e2      	lsls	r2, r4, #31
 8007b68:	d504      	bpl.n	8007b74 <_strtod_l+0x5c4>
 8007b6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	2301      	movs	r3, #1
 8007b74:	1064      	asrs	r4, r4, #1
 8007b76:	f106 0608 	add.w	r6, r6, #8
 8007b7a:	d1f4      	bne.n	8007b66 <_strtod_l+0x5b6>
 8007b7c:	b10b      	cbz	r3, 8007b82 <_strtod_l+0x5d2>
 8007b7e:	4682      	mov	sl, r0
 8007b80:	468b      	mov	fp, r1
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	b1b3      	cbz	r3, 8007bb4 <_strtod_l+0x604>
 8007b86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	4659      	mov	r1, fp
 8007b92:	dd0f      	ble.n	8007bb4 <_strtod_l+0x604>
 8007b94:	2b1f      	cmp	r3, #31
 8007b96:	dd55      	ble.n	8007c44 <_strtod_l+0x694>
 8007b98:	2b34      	cmp	r3, #52	@ 0x34
 8007b9a:	bfde      	ittt	le
 8007b9c:	f04f 33ff 	movle.w	r3, #4294967295
 8007ba0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ba4:	4093      	lslle	r3, r2
 8007ba6:	f04f 0a00 	mov.w	sl, #0
 8007baa:	bfcc      	ite	gt
 8007bac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007bb0:	ea03 0b01 	andle.w	fp, r3, r1
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4650      	mov	r0, sl
 8007bba:	4659      	mov	r1, fp
 8007bbc:	f7f8 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1a6      	bne.n	8007b12 <_strtod_l+0x562>
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bca:	9805      	ldr	r0, [sp, #20]
 8007bcc:	462b      	mov	r3, r5
 8007bce:	463a      	mov	r2, r7
 8007bd0:	f7ff f8c6 	bl	8006d60 <__s2b>
 8007bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f43f af05 	beq.w	80079e6 <_strtod_l+0x436>
 8007bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	eba9 0308 	sub.w	r3, r9, r8
 8007be4:	bfa8      	it	ge
 8007be6:	2300      	movge	r3, #0
 8007be8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bea:	2400      	movs	r4, #0
 8007bec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007bf0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007bf2:	46a0      	mov	r8, r4
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	f7ff f809 	bl	8006c10 <_Balloc>
 8007bfe:	4681      	mov	r9, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f aef4 	beq.w	80079ee <_strtod_l+0x43e>
 8007c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	3202      	adds	r2, #2
 8007c0c:	f103 010c 	add.w	r1, r3, #12
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	300c      	adds	r0, #12
 8007c14:	f000 fd72 	bl	80086fc <memcpy>
 8007c18:	ec4b ab10 	vmov	d0, sl, fp
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c20:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c26:	f7ff fbd7 	bl	80073d8 <__d2b>
 8007c2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f aede 	beq.w	80079ee <_strtod_l+0x43e>
 8007c32:	9805      	ldr	r0, [sp, #20]
 8007c34:	2101      	movs	r1, #1
 8007c36:	f7ff f929 	bl	8006e8c <__i2b>
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	b948      	cbnz	r0, 8007c52 <_strtod_l+0x6a2>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	e6d4      	b.n	80079ee <_strtod_l+0x43e>
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295
 8007c48:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4c:	ea03 0a0a 	and.w	sl, r3, sl
 8007c50:	e7b0      	b.n	8007bb4 <_strtod_l+0x604>
 8007c52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	bfab      	itete	ge
 8007c5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c62:	bfac      	ite	ge
 8007c64:	18ef      	addge	r7, r5, r3
 8007c66:	1b5e      	sublt	r6, r3, r5
 8007c68:	9b08      	ldr	r3, [sp, #32]
 8007c6a:	1aed      	subs	r5, r5, r3
 8007c6c:	4415      	add	r5, r2
 8007c6e:	4b66      	ldr	r3, [pc, #408]	@ (8007e08 <_strtod_l+0x858>)
 8007c70:	3d01      	subs	r5, #1
 8007c72:	429d      	cmp	r5, r3
 8007c74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c78:	da50      	bge.n	8007d1c <_strtod_l+0x76c>
 8007c7a:	1b5b      	subs	r3, r3, r5
 8007c7c:	2b1f      	cmp	r3, #31
 8007c7e:	eba2 0203 	sub.w	r2, r2, r3
 8007c82:	f04f 0101 	mov.w	r1, #1
 8007c86:	dc3d      	bgt.n	8007d04 <_strtod_l+0x754>
 8007c88:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c92:	18bd      	adds	r5, r7, r2
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	42af      	cmp	r7, r5
 8007c98:	4416      	add	r6, r2
 8007c9a:	441e      	add	r6, r3
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	bfa8      	it	ge
 8007ca0:	462b      	movge	r3, r5
 8007ca2:	42b3      	cmp	r3, r6
 8007ca4:	bfa8      	it	ge
 8007ca6:	4633      	movge	r3, r6
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	bfc2      	ittt	gt
 8007cac:	1aed      	subgt	r5, r5, r3
 8007cae:	1af6      	subgt	r6, r6, r3
 8007cb0:	1aff      	subgt	r7, r7, r3
 8007cb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd16      	ble.n	8007ce6 <_strtod_l+0x736>
 8007cb8:	4641      	mov	r1, r8
 8007cba:	9805      	ldr	r0, [sp, #20]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f7ff f9a5 	bl	800700c <__pow5mult>
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d0ba      	beq.n	8007c3e <_strtod_l+0x68e>
 8007cc8:	4601      	mov	r1, r0
 8007cca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ccc:	9805      	ldr	r0, [sp, #20]
 8007cce:	f7ff f8f3 	bl	8006eb8 <__multiply>
 8007cd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f ae8a 	beq.w	80079ee <_strtod_l+0x43e>
 8007cda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cdc:	9805      	ldr	r0, [sp, #20]
 8007cde:	f7fe ffd7 	bl	8006c90 <_Bfree>
 8007ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	dc1d      	bgt.n	8007d26 <_strtod_l+0x776>
 8007cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dd23      	ble.n	8007d38 <_strtod_l+0x788>
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007cf4:	9805      	ldr	r0, [sp, #20]
 8007cf6:	f7ff f989 	bl	800700c <__pow5mult>
 8007cfa:	4681      	mov	r9, r0
 8007cfc:	b9e0      	cbnz	r0, 8007d38 <_strtod_l+0x788>
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	e674      	b.n	80079ee <_strtod_l+0x43e>
 8007d04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d10:	35e2      	adds	r5, #226	@ 0xe2
 8007d12:	fa01 f305 	lsl.w	r3, r1, r5
 8007d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d1a:	e7ba      	b.n	8007c92 <_strtod_l+0x6e2>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d20:	2301      	movs	r3, #1
 8007d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d24:	e7b5      	b.n	8007c92 <_strtod_l+0x6e2>
 8007d26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d28:	9805      	ldr	r0, [sp, #20]
 8007d2a:	462a      	mov	r2, r5
 8007d2c:	f7ff f9c8 	bl	80070c0 <__lshift>
 8007d30:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d1d9      	bne.n	8007cea <_strtod_l+0x73a>
 8007d36:	e65a      	b.n	80079ee <_strtod_l+0x43e>
 8007d38:	2e00      	cmp	r6, #0
 8007d3a:	dd07      	ble.n	8007d4c <_strtod_l+0x79c>
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	4632      	mov	r2, r6
 8007d42:	f7ff f9bd 	bl	80070c0 <__lshift>
 8007d46:	4681      	mov	r9, r0
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0d8      	beq.n	8007cfe <_strtod_l+0x74e>
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	dd08      	ble.n	8007d62 <_strtod_l+0x7b2>
 8007d50:	4641      	mov	r1, r8
 8007d52:	9805      	ldr	r0, [sp, #20]
 8007d54:	463a      	mov	r2, r7
 8007d56:	f7ff f9b3 	bl	80070c0 <__lshift>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f43f ae46 	beq.w	80079ee <_strtod_l+0x43e>
 8007d62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d64:	9805      	ldr	r0, [sp, #20]
 8007d66:	464a      	mov	r2, r9
 8007d68:	f7ff fa32 	bl	80071d0 <__mdiff>
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f ae3d 	beq.w	80079ee <_strtod_l+0x43e>
 8007d74:	68c3      	ldr	r3, [r0, #12]
 8007d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60c3      	str	r3, [r0, #12]
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	f7ff fa0b 	bl	8007198 <__mcmp>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	da46      	bge.n	8007e14 <_strtod_l+0x864>
 8007d86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d88:	ea53 030a 	orrs.w	r3, r3, sl
 8007d8c:	d16c      	bne.n	8007e68 <_strtod_l+0x8b8>
 8007d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d168      	bne.n	8007e68 <_strtod_l+0x8b8>
 8007d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d9a:	0d1b      	lsrs	r3, r3, #20
 8007d9c:	051b      	lsls	r3, r3, #20
 8007d9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007da2:	d961      	bls.n	8007e68 <_strtod_l+0x8b8>
 8007da4:	6963      	ldr	r3, [r4, #20]
 8007da6:	b913      	cbnz	r3, 8007dae <_strtod_l+0x7fe>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	dd5c      	ble.n	8007e68 <_strtod_l+0x8b8>
 8007dae:	4621      	mov	r1, r4
 8007db0:	2201      	movs	r2, #1
 8007db2:	9805      	ldr	r0, [sp, #20]
 8007db4:	f7ff f984 	bl	80070c0 <__lshift>
 8007db8:	4641      	mov	r1, r8
 8007dba:	4604      	mov	r4, r0
 8007dbc:	f7ff f9ec 	bl	8007198 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dd51      	ble.n	8007e68 <_strtod_l+0x8b8>
 8007dc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dc8:	9a08      	ldr	r2, [sp, #32]
 8007dca:	0d1b      	lsrs	r3, r3, #20
 8007dcc:	051b      	lsls	r3, r3, #20
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d06b      	beq.n	8007eaa <_strtod_l+0x8fa>
 8007dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007dd6:	d868      	bhi.n	8007eaa <_strtod_l+0x8fa>
 8007dd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007ddc:	f67f ae9d 	bls.w	8007b1a <_strtod_l+0x56a>
 8007de0:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <_strtod_l+0x85c>)
 8007de2:	4650      	mov	r0, sl
 8007de4:	4659      	mov	r1, fp
 8007de6:	2200      	movs	r2, #0
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <_strtod_l+0x860>)
 8007dee:	400b      	ands	r3, r1
 8007df0:	4682      	mov	sl, r0
 8007df2:	468b      	mov	fp, r1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f47f ae05 	bne.w	8007a04 <_strtod_l+0x454>
 8007dfa:	9a05      	ldr	r2, [sp, #20]
 8007dfc:	2322      	movs	r3, #34	@ 0x22
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e600      	b.n	8007a04 <_strtod_l+0x454>
 8007e02:	bf00      	nop
 8007e04:	080096c8 	.word	0x080096c8
 8007e08:	fffffc02 	.word	0xfffffc02
 8007e0c:	39500000 	.word	0x39500000
 8007e10:	7ff00000 	.word	0x7ff00000
 8007e14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e18:	d165      	bne.n	8007ee6 <_strtod_l+0x936>
 8007e1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e20:	b35a      	cbz	r2, 8007e7a <_strtod_l+0x8ca>
 8007e22:	4a9f      	ldr	r2, [pc, #636]	@ (80080a0 <_strtod_l+0xaf0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d12b      	bne.n	8007e80 <_strtod_l+0x8d0>
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	4651      	mov	r1, sl
 8007e2c:	b303      	cbz	r3, 8007e70 <_strtod_l+0x8c0>
 8007e2e:	4b9d      	ldr	r3, [pc, #628]	@ (80080a4 <_strtod_l+0xaf4>)
 8007e30:	465a      	mov	r2, fp
 8007e32:	4013      	ands	r3, r2
 8007e34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e38:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3c:	d81b      	bhi.n	8007e76 <_strtod_l+0x8c6>
 8007e3e:	0d1b      	lsrs	r3, r3, #20
 8007e40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d119      	bne.n	8007e80 <_strtod_l+0x8d0>
 8007e4c:	4b96      	ldr	r3, [pc, #600]	@ (80080a8 <_strtod_l+0xaf8>)
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d102      	bne.n	8007e5a <_strtod_l+0x8aa>
 8007e54:	3101      	adds	r1, #1
 8007e56:	f43f adca 	beq.w	80079ee <_strtod_l+0x43e>
 8007e5a:	4b92      	ldr	r3, [pc, #584]	@ (80080a4 <_strtod_l+0xaf4>)
 8007e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5e:	401a      	ands	r2, r3
 8007e60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e64:	f04f 0a00 	mov.w	sl, #0
 8007e68:	9b08      	ldr	r3, [sp, #32]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1b8      	bne.n	8007de0 <_strtod_l+0x830>
 8007e6e:	e5c9      	b.n	8007a04 <_strtod_l+0x454>
 8007e70:	f04f 33ff 	mov.w	r3, #4294967295
 8007e74:	e7e8      	b.n	8007e48 <_strtod_l+0x898>
 8007e76:	4613      	mov	r3, r2
 8007e78:	e7e6      	b.n	8007e48 <_strtod_l+0x898>
 8007e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e7e:	d0a1      	beq.n	8007dc4 <_strtod_l+0x814>
 8007e80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e82:	b1db      	cbz	r3, 8007ebc <_strtod_l+0x90c>
 8007e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e86:	4213      	tst	r3, r2
 8007e88:	d0ee      	beq.n	8007e68 <_strtod_l+0x8b8>
 8007e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8c:	9a08      	ldr	r2, [sp, #32]
 8007e8e:	4650      	mov	r0, sl
 8007e90:	4659      	mov	r1, fp
 8007e92:	b1bb      	cbz	r3, 8007ec4 <_strtod_l+0x914>
 8007e94:	f7ff fb6e 	bl	8007574 <sulp>
 8007e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ea0:	f7f8 f9f4 	bl	800028c <__adddf3>
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	468b      	mov	fp, r1
 8007ea8:	e7de      	b.n	8007e68 <_strtod_l+0x8b8>
 8007eaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007eae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007eb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007eb6:	f04f 3aff 	mov.w	sl, #4294967295
 8007eba:	e7d5      	b.n	8007e68 <_strtod_l+0x8b8>
 8007ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ebe:	ea13 0f0a 	tst.w	r3, sl
 8007ec2:	e7e1      	b.n	8007e88 <_strtod_l+0x8d8>
 8007ec4:	f7ff fb56 	bl	8007574 <sulp>
 8007ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ecc:	ec53 2b10 	vmov	r2, r3, d0
 8007ed0:	f7f8 f9da 	bl	8000288 <__aeabi_dsub>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4682      	mov	sl, r0
 8007eda:	468b      	mov	fp, r1
 8007edc:	f7f8 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d0c1      	beq.n	8007e68 <_strtod_l+0x8b8>
 8007ee4:	e619      	b.n	8007b1a <_strtod_l+0x56a>
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f7ff facd 	bl	8007488 <__ratio>
 8007eee:	ec57 6b10 	vmov	r6, r7, d0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4639      	mov	r1, r7
 8007efc:	f7f8 fdf8 	bl	8000af0 <__aeabi_dcmple>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d06f      	beq.n	8007fe4 <_strtod_l+0xa34>
 8007f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d17a      	bne.n	8008000 <_strtod_l+0xa50>
 8007f0a:	f1ba 0f00 	cmp.w	sl, #0
 8007f0e:	d158      	bne.n	8007fc2 <_strtod_l+0xa12>
 8007f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d15a      	bne.n	8007fd0 <_strtod_l+0xa20>
 8007f1a:	4b64      	ldr	r3, [pc, #400]	@ (80080ac <_strtod_l+0xafc>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 fddb 	bl	8000adc <__aeabi_dcmplt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d159      	bne.n	8007fde <_strtod_l+0xa2e>
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4b60      	ldr	r3, [pc, #384]	@ (80080b0 <_strtod_l+0xb00>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	f7f8 fb61 	bl	80005f8 <__aeabi_dmul>
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f3e:	9606      	str	r6, [sp, #24]
 8007f40:	9307      	str	r3, [sp, #28]
 8007f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f46:	4d57      	ldr	r5, [pc, #348]	@ (80080a4 <_strtod_l+0xaf4>)
 8007f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4e:	401d      	ands	r5, r3
 8007f50:	4b58      	ldr	r3, [pc, #352]	@ (80080b4 <_strtod_l+0xb04>)
 8007f52:	429d      	cmp	r5, r3
 8007f54:	f040 80b2 	bne.w	80080bc <_strtod_l+0xb0c>
 8007f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f5e:	ec4b ab10 	vmov	d0, sl, fp
 8007f62:	f7ff f9c9 	bl	80072f8 <__ulp>
 8007f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f6a:	ec51 0b10 	vmov	r0, r1, d0
 8007f6e:	f7f8 fb43 	bl	80005f8 <__aeabi_dmul>
 8007f72:	4652      	mov	r2, sl
 8007f74:	465b      	mov	r3, fp
 8007f76:	f7f8 f989 	bl	800028c <__adddf3>
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4949      	ldr	r1, [pc, #292]	@ (80080a4 <_strtod_l+0xaf4>)
 8007f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80080b8 <_strtod_l+0xb08>)
 8007f80:	4019      	ands	r1, r3
 8007f82:	4291      	cmp	r1, r2
 8007f84:	4682      	mov	sl, r0
 8007f86:	d942      	bls.n	800800e <_strtod_l+0xa5e>
 8007f88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f8a:	4b47      	ldr	r3, [pc, #284]	@ (80080a8 <_strtod_l+0xaf8>)
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d103      	bne.n	8007f98 <_strtod_l+0x9e8>
 8007f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f92:	3301      	adds	r3, #1
 8007f94:	f43f ad2b 	beq.w	80079ee <_strtod_l+0x43e>
 8007f98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80080a8 <_strtod_l+0xaf8>
 8007f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8007fa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fa2:	9805      	ldr	r0, [sp, #20]
 8007fa4:	f7fe fe74 	bl	8006c90 <_Bfree>
 8007fa8:	9805      	ldr	r0, [sp, #20]
 8007faa:	4649      	mov	r1, r9
 8007fac:	f7fe fe70 	bl	8006c90 <_Bfree>
 8007fb0:	9805      	ldr	r0, [sp, #20]
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	f7fe fe6c 	bl	8006c90 <_Bfree>
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f7fe fe68 	bl	8006c90 <_Bfree>
 8007fc0:	e618      	b.n	8007bf4 <_strtod_l+0x644>
 8007fc2:	f1ba 0f01 	cmp.w	sl, #1
 8007fc6:	d103      	bne.n	8007fd0 <_strtod_l+0xa20>
 8007fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f43f ada5 	beq.w	8007b1a <_strtod_l+0x56a>
 8007fd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008080 <_strtod_l+0xad0>
 8007fd4:	4f35      	ldr	r7, [pc, #212]	@ (80080ac <_strtod_l+0xafc>)
 8007fd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fda:	2600      	movs	r6, #0
 8007fdc:	e7b1      	b.n	8007f42 <_strtod_l+0x992>
 8007fde:	4f34      	ldr	r7, [pc, #208]	@ (80080b0 <_strtod_l+0xb00>)
 8007fe0:	2600      	movs	r6, #0
 8007fe2:	e7aa      	b.n	8007f3a <_strtod_l+0x98a>
 8007fe4:	4b32      	ldr	r3, [pc, #200]	@ (80080b0 <_strtod_l+0xb00>)
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	2200      	movs	r2, #0
 8007fec:	f7f8 fb04 	bl	80005f8 <__aeabi_dmul>
 8007ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d09f      	beq.n	8007f3a <_strtod_l+0x98a>
 8007ffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ffe:	e7a0      	b.n	8007f42 <_strtod_l+0x992>
 8008000:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008088 <_strtod_l+0xad8>
 8008004:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008008:	ec57 6b17 	vmov	r6, r7, d7
 800800c:	e799      	b.n	8007f42 <_strtod_l+0x992>
 800800e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1c1      	bne.n	8007fa0 <_strtod_l+0x9f0>
 800801c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008020:	0d1b      	lsrs	r3, r3, #20
 8008022:	051b      	lsls	r3, r3, #20
 8008024:	429d      	cmp	r5, r3
 8008026:	d1bb      	bne.n	8007fa0 <_strtod_l+0x9f0>
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 fe2c 	bl	8000c88 <__aeabi_d2lz>
 8008030:	f7f8 fab4 	bl	800059c <__aeabi_l2d>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 f924 	bl	8000288 <__aeabi_dsub>
 8008040:	460b      	mov	r3, r1
 8008042:	4602      	mov	r2, r0
 8008044:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008048:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800804c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804e:	ea46 060a 	orr.w	r6, r6, sl
 8008052:	431e      	orrs	r6, r3
 8008054:	d06f      	beq.n	8008136 <_strtod_l+0xb86>
 8008056:	a30e      	add	r3, pc, #56	@ (adr r3, 8008090 <_strtod_l+0xae0>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 fd3e 	bl	8000adc <__aeabi_dcmplt>
 8008060:	2800      	cmp	r0, #0
 8008062:	f47f accf 	bne.w	8007a04 <_strtod_l+0x454>
 8008066:	a30c      	add	r3, pc, #48	@ (adr r3, 8008098 <_strtod_l+0xae8>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008070:	f7f8 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d093      	beq.n	8007fa0 <_strtod_l+0x9f0>
 8008078:	e4c4      	b.n	8007a04 <_strtod_l+0x454>
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w
 8008080:	00000000 	.word	0x00000000
 8008084:	bff00000 	.word	0xbff00000
 8008088:	00000000 	.word	0x00000000
 800808c:	3ff00000 	.word	0x3ff00000
 8008090:	94a03595 	.word	0x94a03595
 8008094:	3fdfffff 	.word	0x3fdfffff
 8008098:	35afe535 	.word	0x35afe535
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	000fffff 	.word	0x000fffff
 80080a4:	7ff00000 	.word	0x7ff00000
 80080a8:	7fefffff 	.word	0x7fefffff
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	3fe00000 	.word	0x3fe00000
 80080b4:	7fe00000 	.word	0x7fe00000
 80080b8:	7c9fffff 	.word	0x7c9fffff
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	b323      	cbz	r3, 800810a <_strtod_l+0xb5a>
 80080c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80080c4:	d821      	bhi.n	800810a <_strtod_l+0xb5a>
 80080c6:	a328      	add	r3, pc, #160	@ (adr r3, 8008168 <_strtod_l+0xbb8>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fd0e 	bl	8000af0 <__aeabi_dcmple>
 80080d4:	b1a0      	cbz	r0, 8008100 <_strtod_l+0xb50>
 80080d6:	4639      	mov	r1, r7
 80080d8:	4630      	mov	r0, r6
 80080da:	f7f8 fd65 	bl	8000ba8 <__aeabi_d2uiz>
 80080de:	2801      	cmp	r0, #1
 80080e0:	bf38      	it	cc
 80080e2:	2001      	movcc	r0, #1
 80080e4:	f7f8 fa0e 	bl	8000504 <__aeabi_ui2d>
 80080e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ea:	4606      	mov	r6, r0
 80080ec:	460f      	mov	r7, r1
 80080ee:	b9fb      	cbnz	r3, 8008130 <_strtod_l+0xb80>
 80080f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80080f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80080f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008102:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008106:	1b5b      	subs	r3, r3, r5
 8008108:	9311      	str	r3, [sp, #68]	@ 0x44
 800810a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800810e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008112:	f7ff f8f1 	bl	80072f8 <__ulp>
 8008116:	4650      	mov	r0, sl
 8008118:	ec53 2b10 	vmov	r2, r3, d0
 800811c:	4659      	mov	r1, fp
 800811e:	f7f8 fa6b 	bl	80005f8 <__aeabi_dmul>
 8008122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008126:	f7f8 f8b1 	bl	800028c <__adddf3>
 800812a:	4682      	mov	sl, r0
 800812c:	468b      	mov	fp, r1
 800812e:	e770      	b.n	8008012 <_strtod_l+0xa62>
 8008130:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008134:	e7e0      	b.n	80080f8 <_strtod_l+0xb48>
 8008136:	a30e      	add	r3, pc, #56	@ (adr r3, 8008170 <_strtod_l+0xbc0>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 fcce 	bl	8000adc <__aeabi_dcmplt>
 8008140:	e798      	b.n	8008074 <_strtod_l+0xac4>
 8008142:	2300      	movs	r3, #0
 8008144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008146:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	f7ff ba6d 	b.w	800762a <_strtod_l+0x7a>
 8008150:	2a65      	cmp	r2, #101	@ 0x65
 8008152:	f43f ab66 	beq.w	8007822 <_strtod_l+0x272>
 8008156:	2a45      	cmp	r2, #69	@ 0x45
 8008158:	f43f ab63 	beq.w	8007822 <_strtod_l+0x272>
 800815c:	2301      	movs	r3, #1
 800815e:	f7ff bb9e 	b.w	800789e <_strtod_l+0x2ee>
 8008162:	bf00      	nop
 8008164:	f3af 8000 	nop.w
 8008168:	ffc00000 	.word	0xffc00000
 800816c:	41dfffff 	.word	0x41dfffff
 8008170:	94a03595 	.word	0x94a03595
 8008174:	3fcfffff 	.word	0x3fcfffff

08008178 <_strtod_r>:
 8008178:	4b01      	ldr	r3, [pc, #4]	@ (8008180 <_strtod_r+0x8>)
 800817a:	f7ff ba19 	b.w	80075b0 <_strtod_l>
 800817e:	bf00      	nop
 8008180:	20000068 	.word	0x20000068

08008184 <_strtol_l.constprop.0>:
 8008184:	2b24      	cmp	r3, #36	@ 0x24
 8008186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818a:	4686      	mov	lr, r0
 800818c:	4690      	mov	r8, r2
 800818e:	d801      	bhi.n	8008194 <_strtol_l.constprop.0+0x10>
 8008190:	2b01      	cmp	r3, #1
 8008192:	d106      	bne.n	80081a2 <_strtol_l.constprop.0+0x1e>
 8008194:	f7fd fdbc 	bl	8005d10 <__errno>
 8008198:	2316      	movs	r3, #22
 800819a:	6003      	str	r3, [r0, #0]
 800819c:	2000      	movs	r0, #0
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	4834      	ldr	r0, [pc, #208]	@ (8008274 <_strtol_l.constprop.0+0xf0>)
 80081a4:	460d      	mov	r5, r1
 80081a6:	462a      	mov	r2, r5
 80081a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081ac:	5d06      	ldrb	r6, [r0, r4]
 80081ae:	f016 0608 	ands.w	r6, r6, #8
 80081b2:	d1f8      	bne.n	80081a6 <_strtol_l.constprop.0+0x22>
 80081b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80081b6:	d12d      	bne.n	8008214 <_strtol_l.constprop.0+0x90>
 80081b8:	782c      	ldrb	r4, [r5, #0]
 80081ba:	2601      	movs	r6, #1
 80081bc:	1c95      	adds	r5, r2, #2
 80081be:	f033 0210 	bics.w	r2, r3, #16
 80081c2:	d109      	bne.n	80081d8 <_strtol_l.constprop.0+0x54>
 80081c4:	2c30      	cmp	r4, #48	@ 0x30
 80081c6:	d12a      	bne.n	800821e <_strtol_l.constprop.0+0x9a>
 80081c8:	782a      	ldrb	r2, [r5, #0]
 80081ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081ce:	2a58      	cmp	r2, #88	@ 0x58
 80081d0:	d125      	bne.n	800821e <_strtol_l.constprop.0+0x9a>
 80081d2:	786c      	ldrb	r4, [r5, #1]
 80081d4:	2310      	movs	r3, #16
 80081d6:	3502      	adds	r5, #2
 80081d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081e0:	2200      	movs	r2, #0
 80081e2:	fbbc f9f3 	udiv	r9, ip, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80081ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081f0:	2f09      	cmp	r7, #9
 80081f2:	d81b      	bhi.n	800822c <_strtol_l.constprop.0+0xa8>
 80081f4:	463c      	mov	r4, r7
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	dd27      	ble.n	800824a <_strtol_l.constprop.0+0xc6>
 80081fa:	1c57      	adds	r7, r2, #1
 80081fc:	d007      	beq.n	800820e <_strtol_l.constprop.0+0x8a>
 80081fe:	4581      	cmp	r9, r0
 8008200:	d320      	bcc.n	8008244 <_strtol_l.constprop.0+0xc0>
 8008202:	d101      	bne.n	8008208 <_strtol_l.constprop.0+0x84>
 8008204:	45a2      	cmp	sl, r4
 8008206:	db1d      	blt.n	8008244 <_strtol_l.constprop.0+0xc0>
 8008208:	fb00 4003 	mla	r0, r0, r3, r4
 800820c:	2201      	movs	r2, #1
 800820e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008212:	e7eb      	b.n	80081ec <_strtol_l.constprop.0+0x68>
 8008214:	2c2b      	cmp	r4, #43	@ 0x2b
 8008216:	bf04      	itt	eq
 8008218:	782c      	ldrbeq	r4, [r5, #0]
 800821a:	1c95      	addeq	r5, r2, #2
 800821c:	e7cf      	b.n	80081be <_strtol_l.constprop.0+0x3a>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1da      	bne.n	80081d8 <_strtol_l.constprop.0+0x54>
 8008222:	2c30      	cmp	r4, #48	@ 0x30
 8008224:	bf0c      	ite	eq
 8008226:	2308      	moveq	r3, #8
 8008228:	230a      	movne	r3, #10
 800822a:	e7d5      	b.n	80081d8 <_strtol_l.constprop.0+0x54>
 800822c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008230:	2f19      	cmp	r7, #25
 8008232:	d801      	bhi.n	8008238 <_strtol_l.constprop.0+0xb4>
 8008234:	3c37      	subs	r4, #55	@ 0x37
 8008236:	e7de      	b.n	80081f6 <_strtol_l.constprop.0+0x72>
 8008238:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800823c:	2f19      	cmp	r7, #25
 800823e:	d804      	bhi.n	800824a <_strtol_l.constprop.0+0xc6>
 8008240:	3c57      	subs	r4, #87	@ 0x57
 8008242:	e7d8      	b.n	80081f6 <_strtol_l.constprop.0+0x72>
 8008244:	f04f 32ff 	mov.w	r2, #4294967295
 8008248:	e7e1      	b.n	800820e <_strtol_l.constprop.0+0x8a>
 800824a:	1c53      	adds	r3, r2, #1
 800824c:	d108      	bne.n	8008260 <_strtol_l.constprop.0+0xdc>
 800824e:	2322      	movs	r3, #34	@ 0x22
 8008250:	f8ce 3000 	str.w	r3, [lr]
 8008254:	4660      	mov	r0, ip
 8008256:	f1b8 0f00 	cmp.w	r8, #0
 800825a:	d0a0      	beq.n	800819e <_strtol_l.constprop.0+0x1a>
 800825c:	1e69      	subs	r1, r5, #1
 800825e:	e006      	b.n	800826e <_strtol_l.constprop.0+0xea>
 8008260:	b106      	cbz	r6, 8008264 <_strtol_l.constprop.0+0xe0>
 8008262:	4240      	negs	r0, r0
 8008264:	f1b8 0f00 	cmp.w	r8, #0
 8008268:	d099      	beq.n	800819e <_strtol_l.constprop.0+0x1a>
 800826a:	2a00      	cmp	r2, #0
 800826c:	d1f6      	bne.n	800825c <_strtol_l.constprop.0+0xd8>
 800826e:	f8c8 1000 	str.w	r1, [r8]
 8008272:	e794      	b.n	800819e <_strtol_l.constprop.0+0x1a>
 8008274:	080096f1 	.word	0x080096f1

08008278 <_strtol_r>:
 8008278:	f7ff bf84 	b.w	8008184 <_strtol_l.constprop.0>

0800827c <__ssputs_r>:
 800827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	688e      	ldr	r6, [r1, #8]
 8008282:	461f      	mov	r7, r3
 8008284:	42be      	cmp	r6, r7
 8008286:	680b      	ldr	r3, [r1, #0]
 8008288:	4682      	mov	sl, r0
 800828a:	460c      	mov	r4, r1
 800828c:	4690      	mov	r8, r2
 800828e:	d82d      	bhi.n	80082ec <__ssputs_r+0x70>
 8008290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008298:	d026      	beq.n	80082e8 <__ssputs_r+0x6c>
 800829a:	6965      	ldr	r5, [r4, #20]
 800829c:	6909      	ldr	r1, [r1, #16]
 800829e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a2:	eba3 0901 	sub.w	r9, r3, r1
 80082a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082aa:	1c7b      	adds	r3, r7, #1
 80082ac:	444b      	add	r3, r9
 80082ae:	106d      	asrs	r5, r5, #1
 80082b0:	429d      	cmp	r5, r3
 80082b2:	bf38      	it	cc
 80082b4:	461d      	movcc	r5, r3
 80082b6:	0553      	lsls	r3, r2, #21
 80082b8:	d527      	bpl.n	800830a <__ssputs_r+0x8e>
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7fe fc1c 	bl	8006af8 <_malloc_r>
 80082c0:	4606      	mov	r6, r0
 80082c2:	b360      	cbz	r0, 800831e <__ssputs_r+0xa2>
 80082c4:	6921      	ldr	r1, [r4, #16]
 80082c6:	464a      	mov	r2, r9
 80082c8:	f000 fa18 	bl	80086fc <memcpy>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	6126      	str	r6, [r4, #16]
 80082da:	6165      	str	r5, [r4, #20]
 80082dc:	444e      	add	r6, r9
 80082de:	eba5 0509 	sub.w	r5, r5, r9
 80082e2:	6026      	str	r6, [r4, #0]
 80082e4:	60a5      	str	r5, [r4, #8]
 80082e6:	463e      	mov	r6, r7
 80082e8:	42be      	cmp	r6, r7
 80082ea:	d900      	bls.n	80082ee <__ssputs_r+0x72>
 80082ec:	463e      	mov	r6, r7
 80082ee:	6820      	ldr	r0, [r4, #0]
 80082f0:	4632      	mov	r2, r6
 80082f2:	4641      	mov	r1, r8
 80082f4:	f000 f9c6 	bl	8008684 <memmove>
 80082f8:	68a3      	ldr	r3, [r4, #8]
 80082fa:	1b9b      	subs	r3, r3, r6
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	4433      	add	r3, r6
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	2000      	movs	r0, #0
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	462a      	mov	r2, r5
 800830c:	f000 fd89 	bl	8008e22 <_realloc_r>
 8008310:	4606      	mov	r6, r0
 8008312:	2800      	cmp	r0, #0
 8008314:	d1e0      	bne.n	80082d8 <__ssputs_r+0x5c>
 8008316:	6921      	ldr	r1, [r4, #16]
 8008318:	4650      	mov	r0, sl
 800831a:	f7fe fb79 	bl	8006a10 <_free_r>
 800831e:	230c      	movs	r3, #12
 8008320:	f8ca 3000 	str.w	r3, [sl]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e7e9      	b.n	8008306 <__ssputs_r+0x8a>
	...

08008334 <_svfiprintf_r>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	4698      	mov	r8, r3
 800833a:	898b      	ldrh	r3, [r1, #12]
 800833c:	061b      	lsls	r3, r3, #24
 800833e:	b09d      	sub	sp, #116	@ 0x74
 8008340:	4607      	mov	r7, r0
 8008342:	460d      	mov	r5, r1
 8008344:	4614      	mov	r4, r2
 8008346:	d510      	bpl.n	800836a <_svfiprintf_r+0x36>
 8008348:	690b      	ldr	r3, [r1, #16]
 800834a:	b973      	cbnz	r3, 800836a <_svfiprintf_r+0x36>
 800834c:	2140      	movs	r1, #64	@ 0x40
 800834e:	f7fe fbd3 	bl	8006af8 <_malloc_r>
 8008352:	6028      	str	r0, [r5, #0]
 8008354:	6128      	str	r0, [r5, #16]
 8008356:	b930      	cbnz	r0, 8008366 <_svfiprintf_r+0x32>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	b01d      	add	sp, #116	@ 0x74
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	2340      	movs	r3, #64	@ 0x40
 8008368:	616b      	str	r3, [r5, #20]
 800836a:	2300      	movs	r3, #0
 800836c:	9309      	str	r3, [sp, #36]	@ 0x24
 800836e:	2320      	movs	r3, #32
 8008370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008374:	f8cd 800c 	str.w	r8, [sp, #12]
 8008378:	2330      	movs	r3, #48	@ 0x30
 800837a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008518 <_svfiprintf_r+0x1e4>
 800837e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008382:	f04f 0901 	mov.w	r9, #1
 8008386:	4623      	mov	r3, r4
 8008388:	469a      	mov	sl, r3
 800838a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800838e:	b10a      	cbz	r2, 8008394 <_svfiprintf_r+0x60>
 8008390:	2a25      	cmp	r2, #37	@ 0x25
 8008392:	d1f9      	bne.n	8008388 <_svfiprintf_r+0x54>
 8008394:	ebba 0b04 	subs.w	fp, sl, r4
 8008398:	d00b      	beq.n	80083b2 <_svfiprintf_r+0x7e>
 800839a:	465b      	mov	r3, fp
 800839c:	4622      	mov	r2, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff ff6b 	bl	800827c <__ssputs_r>
 80083a6:	3001      	adds	r0, #1
 80083a8:	f000 80a7 	beq.w	80084fa <_svfiprintf_r+0x1c6>
 80083ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ae:	445a      	add	r2, fp
 80083b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b2:	f89a 3000 	ldrb.w	r3, [sl]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 809f 	beq.w	80084fa <_svfiprintf_r+0x1c6>
 80083bc:	2300      	movs	r3, #0
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c6:	f10a 0a01 	add.w	sl, sl, #1
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	9307      	str	r3, [sp, #28]
 80083ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d4:	4654      	mov	r4, sl
 80083d6:	2205      	movs	r2, #5
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	484e      	ldr	r0, [pc, #312]	@ (8008518 <_svfiprintf_r+0x1e4>)
 80083de:	f7f7 fef7 	bl	80001d0 <memchr>
 80083e2:	9a04      	ldr	r2, [sp, #16]
 80083e4:	b9d8      	cbnz	r0, 800841e <_svfiprintf_r+0xea>
 80083e6:	06d0      	lsls	r0, r2, #27
 80083e8:	bf44      	itt	mi
 80083ea:	2320      	movmi	r3, #32
 80083ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f0:	0711      	lsls	r1, r2, #28
 80083f2:	bf44      	itt	mi
 80083f4:	232b      	movmi	r3, #43	@ 0x2b
 80083f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fa:	f89a 3000 	ldrb.w	r3, [sl]
 80083fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008400:	d015      	beq.n	800842e <_svfiprintf_r+0xfa>
 8008402:	9a07      	ldr	r2, [sp, #28]
 8008404:	4654      	mov	r4, sl
 8008406:	2000      	movs	r0, #0
 8008408:	f04f 0c0a 	mov.w	ip, #10
 800840c:	4621      	mov	r1, r4
 800840e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008412:	3b30      	subs	r3, #48	@ 0x30
 8008414:	2b09      	cmp	r3, #9
 8008416:	d94b      	bls.n	80084b0 <_svfiprintf_r+0x17c>
 8008418:	b1b0      	cbz	r0, 8008448 <_svfiprintf_r+0x114>
 800841a:	9207      	str	r2, [sp, #28]
 800841c:	e014      	b.n	8008448 <_svfiprintf_r+0x114>
 800841e:	eba0 0308 	sub.w	r3, r0, r8
 8008422:	fa09 f303 	lsl.w	r3, r9, r3
 8008426:	4313      	orrs	r3, r2
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	46a2      	mov	sl, r4
 800842c:	e7d2      	b.n	80083d4 <_svfiprintf_r+0xa0>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	9103      	str	r1, [sp, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfbb      	ittet	lt
 800843a:	425b      	neglt	r3, r3
 800843c:	f042 0202 	orrlt.w	r2, r2, #2
 8008440:	9307      	strge	r3, [sp, #28]
 8008442:	9307      	strlt	r3, [sp, #28]
 8008444:	bfb8      	it	lt
 8008446:	9204      	strlt	r2, [sp, #16]
 8008448:	7823      	ldrb	r3, [r4, #0]
 800844a:	2b2e      	cmp	r3, #46	@ 0x2e
 800844c:	d10a      	bne.n	8008464 <_svfiprintf_r+0x130>
 800844e:	7863      	ldrb	r3, [r4, #1]
 8008450:	2b2a      	cmp	r3, #42	@ 0x2a
 8008452:	d132      	bne.n	80084ba <_svfiprintf_r+0x186>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	1d1a      	adds	r2, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	9203      	str	r2, [sp, #12]
 800845c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008460:	3402      	adds	r4, #2
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008528 <_svfiprintf_r+0x1f4>
 8008468:	7821      	ldrb	r1, [r4, #0]
 800846a:	2203      	movs	r2, #3
 800846c:	4650      	mov	r0, sl
 800846e:	f7f7 feaf 	bl	80001d0 <memchr>
 8008472:	b138      	cbz	r0, 8008484 <_svfiprintf_r+0x150>
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	eba0 000a 	sub.w	r0, r0, sl
 800847a:	2240      	movs	r2, #64	@ 0x40
 800847c:	4082      	lsls	r2, r0
 800847e:	4313      	orrs	r3, r2
 8008480:	3401      	adds	r4, #1
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008488:	4824      	ldr	r0, [pc, #144]	@ (800851c <_svfiprintf_r+0x1e8>)
 800848a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800848e:	2206      	movs	r2, #6
 8008490:	f7f7 fe9e 	bl	80001d0 <memchr>
 8008494:	2800      	cmp	r0, #0
 8008496:	d036      	beq.n	8008506 <_svfiprintf_r+0x1d2>
 8008498:	4b21      	ldr	r3, [pc, #132]	@ (8008520 <_svfiprintf_r+0x1ec>)
 800849a:	bb1b      	cbnz	r3, 80084e4 <_svfiprintf_r+0x1b0>
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	3307      	adds	r3, #7
 80084a0:	f023 0307 	bic.w	r3, r3, #7
 80084a4:	3308      	adds	r3, #8
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084aa:	4433      	add	r3, r6
 80084ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ae:	e76a      	b.n	8008386 <_svfiprintf_r+0x52>
 80084b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b4:	460c      	mov	r4, r1
 80084b6:	2001      	movs	r0, #1
 80084b8:	e7a8      	b.n	800840c <_svfiprintf_r+0xd8>
 80084ba:	2300      	movs	r3, #0
 80084bc:	3401      	adds	r4, #1
 80084be:	9305      	str	r3, [sp, #20]
 80084c0:	4619      	mov	r1, r3
 80084c2:	f04f 0c0a 	mov.w	ip, #10
 80084c6:	4620      	mov	r0, r4
 80084c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084cc:	3a30      	subs	r2, #48	@ 0x30
 80084ce:	2a09      	cmp	r2, #9
 80084d0:	d903      	bls.n	80084da <_svfiprintf_r+0x1a6>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0c6      	beq.n	8008464 <_svfiprintf_r+0x130>
 80084d6:	9105      	str	r1, [sp, #20]
 80084d8:	e7c4      	b.n	8008464 <_svfiprintf_r+0x130>
 80084da:	fb0c 2101 	mla	r1, ip, r1, r2
 80084de:	4604      	mov	r4, r0
 80084e0:	2301      	movs	r3, #1
 80084e2:	e7f0      	b.n	80084c6 <_svfiprintf_r+0x192>
 80084e4:	ab03      	add	r3, sp, #12
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	462a      	mov	r2, r5
 80084ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <_svfiprintf_r+0x1f0>)
 80084ec:	a904      	add	r1, sp, #16
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7fc fcca 	bl	8004e88 <_printf_float>
 80084f4:	1c42      	adds	r2, r0, #1
 80084f6:	4606      	mov	r6, r0
 80084f8:	d1d6      	bne.n	80084a8 <_svfiprintf_r+0x174>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	065b      	lsls	r3, r3, #25
 80084fe:	f53f af2d 	bmi.w	800835c <_svfiprintf_r+0x28>
 8008502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008504:	e72c      	b.n	8008360 <_svfiprintf_r+0x2c>
 8008506:	ab03      	add	r3, sp, #12
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	462a      	mov	r2, r5
 800850c:	4b05      	ldr	r3, [pc, #20]	@ (8008524 <_svfiprintf_r+0x1f0>)
 800850e:	a904      	add	r1, sp, #16
 8008510:	4638      	mov	r0, r7
 8008512:	f7fc ff51 	bl	80053b8 <_printf_i>
 8008516:	e7ed      	b.n	80084f4 <_svfiprintf_r+0x1c0>
 8008518:	080097f1 	.word	0x080097f1
 800851c:	080097fb 	.word	0x080097fb
 8008520:	08004e89 	.word	0x08004e89
 8008524:	0800827d 	.word	0x0800827d
 8008528:	080097f7 	.word	0x080097f7

0800852c <__sflush_r>:
 800852c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	0716      	lsls	r6, r2, #28
 8008536:	4605      	mov	r5, r0
 8008538:	460c      	mov	r4, r1
 800853a:	d454      	bmi.n	80085e6 <__sflush_r+0xba>
 800853c:	684b      	ldr	r3, [r1, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	dc02      	bgt.n	8008548 <__sflush_r+0x1c>
 8008542:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	dd48      	ble.n	80085da <__sflush_r+0xae>
 8008548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800854a:	2e00      	cmp	r6, #0
 800854c:	d045      	beq.n	80085da <__sflush_r+0xae>
 800854e:	2300      	movs	r3, #0
 8008550:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008554:	682f      	ldr	r7, [r5, #0]
 8008556:	6a21      	ldr	r1, [r4, #32]
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	d030      	beq.n	80085be <__sflush_r+0x92>
 800855c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	0759      	lsls	r1, r3, #29
 8008562:	d505      	bpl.n	8008570 <__sflush_r+0x44>
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800856a:	b10b      	cbz	r3, 8008570 <__sflush_r+0x44>
 800856c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2300      	movs	r3, #0
 8008572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008574:	6a21      	ldr	r1, [r4, #32]
 8008576:	4628      	mov	r0, r5
 8008578:	47b0      	blx	r6
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	d106      	bne.n	800858e <__sflush_r+0x62>
 8008580:	6829      	ldr	r1, [r5, #0]
 8008582:	291d      	cmp	r1, #29
 8008584:	d82b      	bhi.n	80085de <__sflush_r+0xb2>
 8008586:	4a2a      	ldr	r2, [pc, #168]	@ (8008630 <__sflush_r+0x104>)
 8008588:	410a      	asrs	r2, r1
 800858a:	07d6      	lsls	r6, r2, #31
 800858c:	d427      	bmi.n	80085de <__sflush_r+0xb2>
 800858e:	2200      	movs	r2, #0
 8008590:	6062      	str	r2, [r4, #4]
 8008592:	04d9      	lsls	r1, r3, #19
 8008594:	6922      	ldr	r2, [r4, #16]
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	d504      	bpl.n	80085a4 <__sflush_r+0x78>
 800859a:	1c42      	adds	r2, r0, #1
 800859c:	d101      	bne.n	80085a2 <__sflush_r+0x76>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	b903      	cbnz	r3, 80085a4 <__sflush_r+0x78>
 80085a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80085a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085a6:	602f      	str	r7, [r5, #0]
 80085a8:	b1b9      	cbz	r1, 80085da <__sflush_r+0xae>
 80085aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ae:	4299      	cmp	r1, r3
 80085b0:	d002      	beq.n	80085b8 <__sflush_r+0x8c>
 80085b2:	4628      	mov	r0, r5
 80085b4:	f7fe fa2c 	bl	8006a10 <_free_r>
 80085b8:	2300      	movs	r3, #0
 80085ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80085bc:	e00d      	b.n	80085da <__sflush_r+0xae>
 80085be:	2301      	movs	r3, #1
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b0      	blx	r6
 80085c4:	4602      	mov	r2, r0
 80085c6:	1c50      	adds	r0, r2, #1
 80085c8:	d1c9      	bne.n	800855e <__sflush_r+0x32>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0c6      	beq.n	800855e <__sflush_r+0x32>
 80085d0:	2b1d      	cmp	r3, #29
 80085d2:	d001      	beq.n	80085d8 <__sflush_r+0xac>
 80085d4:	2b16      	cmp	r3, #22
 80085d6:	d11e      	bne.n	8008616 <__sflush_r+0xea>
 80085d8:	602f      	str	r7, [r5, #0]
 80085da:	2000      	movs	r0, #0
 80085dc:	e022      	b.n	8008624 <__sflush_r+0xf8>
 80085de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	e01b      	b.n	800861e <__sflush_r+0xf2>
 80085e6:	690f      	ldr	r7, [r1, #16]
 80085e8:	2f00      	cmp	r7, #0
 80085ea:	d0f6      	beq.n	80085da <__sflush_r+0xae>
 80085ec:	0793      	lsls	r3, r2, #30
 80085ee:	680e      	ldr	r6, [r1, #0]
 80085f0:	bf08      	it	eq
 80085f2:	694b      	ldreq	r3, [r1, #20]
 80085f4:	600f      	str	r7, [r1, #0]
 80085f6:	bf18      	it	ne
 80085f8:	2300      	movne	r3, #0
 80085fa:	eba6 0807 	sub.w	r8, r6, r7
 80085fe:	608b      	str	r3, [r1, #8]
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	dde9      	ble.n	80085da <__sflush_r+0xae>
 8008606:	6a21      	ldr	r1, [r4, #32]
 8008608:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800860a:	4643      	mov	r3, r8
 800860c:	463a      	mov	r2, r7
 800860e:	4628      	mov	r0, r5
 8008610:	47b0      	blx	r6
 8008612:	2800      	cmp	r0, #0
 8008614:	dc08      	bgt.n	8008628 <__sflush_r+0xfc>
 8008616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	4407      	add	r7, r0
 800862a:	eba8 0800 	sub.w	r8, r8, r0
 800862e:	e7e7      	b.n	8008600 <__sflush_r+0xd4>
 8008630:	dfbffffe 	.word	0xdfbffffe

08008634 <_fflush_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	690b      	ldr	r3, [r1, #16]
 8008638:	4605      	mov	r5, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b913      	cbnz	r3, 8008644 <_fflush_r+0x10>
 800863e:	2500      	movs	r5, #0
 8008640:	4628      	mov	r0, r5
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	b118      	cbz	r0, 800864e <_fflush_r+0x1a>
 8008646:	6a03      	ldr	r3, [r0, #32]
 8008648:	b90b      	cbnz	r3, 800864e <_fflush_r+0x1a>
 800864a:	f7fd fa75 	bl	8005b38 <__sinit>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f3      	beq.n	800863e <_fflush_r+0xa>
 8008656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008658:	07d0      	lsls	r0, r2, #31
 800865a:	d404      	bmi.n	8008666 <_fflush_r+0x32>
 800865c:	0599      	lsls	r1, r3, #22
 800865e:	d402      	bmi.n	8008666 <_fflush_r+0x32>
 8008660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008662:	f7fd fb80 	bl	8005d66 <__retarget_lock_acquire_recursive>
 8008666:	4628      	mov	r0, r5
 8008668:	4621      	mov	r1, r4
 800866a:	f7ff ff5f 	bl	800852c <__sflush_r>
 800866e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008670:	07da      	lsls	r2, r3, #31
 8008672:	4605      	mov	r5, r0
 8008674:	d4e4      	bmi.n	8008640 <_fflush_r+0xc>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	059b      	lsls	r3, r3, #22
 800867a:	d4e1      	bmi.n	8008640 <_fflush_r+0xc>
 800867c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800867e:	f7fd fb73 	bl	8005d68 <__retarget_lock_release_recursive>
 8008682:	e7dd      	b.n	8008640 <_fflush_r+0xc>

08008684 <memmove>:
 8008684:	4288      	cmp	r0, r1
 8008686:	b510      	push	{r4, lr}
 8008688:	eb01 0402 	add.w	r4, r1, r2
 800868c:	d902      	bls.n	8008694 <memmove+0x10>
 800868e:	4284      	cmp	r4, r0
 8008690:	4623      	mov	r3, r4
 8008692:	d807      	bhi.n	80086a4 <memmove+0x20>
 8008694:	1e43      	subs	r3, r0, #1
 8008696:	42a1      	cmp	r1, r4
 8008698:	d008      	beq.n	80086ac <memmove+0x28>
 800869a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800869e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086a2:	e7f8      	b.n	8008696 <memmove+0x12>
 80086a4:	4402      	add	r2, r0
 80086a6:	4601      	mov	r1, r0
 80086a8:	428a      	cmp	r2, r1
 80086aa:	d100      	bne.n	80086ae <memmove+0x2a>
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086b6:	e7f7      	b.n	80086a8 <memmove+0x24>

080086b8 <strncmp>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	b16a      	cbz	r2, 80086d8 <strncmp+0x20>
 80086bc:	3901      	subs	r1, #1
 80086be:	1884      	adds	r4, r0, r2
 80086c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d103      	bne.n	80086d4 <strncmp+0x1c>
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d001      	beq.n	80086d4 <strncmp+0x1c>
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	d1f5      	bne.n	80086c0 <strncmp+0x8>
 80086d4:	1ad0      	subs	r0, r2, r3
 80086d6:	bd10      	pop	{r4, pc}
 80086d8:	4610      	mov	r0, r2
 80086da:	e7fc      	b.n	80086d6 <strncmp+0x1e>

080086dc <_sbrk_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d06      	ldr	r5, [pc, #24]	@ (80086f8 <_sbrk_r+0x1c>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7f8 ff08 	bl	80014fc <_sbrk>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_sbrk_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_sbrk_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	2000049c 	.word	0x2000049c

080086fc <memcpy>:
 80086fc:	440a      	add	r2, r1
 80086fe:	4291      	cmp	r1, r2
 8008700:	f100 33ff 	add.w	r3, r0, #4294967295
 8008704:	d100      	bne.n	8008708 <memcpy+0xc>
 8008706:	4770      	bx	lr
 8008708:	b510      	push	{r4, lr}
 800870a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008712:	4291      	cmp	r1, r2
 8008714:	d1f9      	bne.n	800870a <memcpy+0xe>
 8008716:	bd10      	pop	{r4, pc}

08008718 <nan>:
 8008718:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008720 <nan+0x8>
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	00000000 	.word	0x00000000
 8008724:	7ff80000 	.word	0x7ff80000

08008728 <__assert_func>:
 8008728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872a:	4614      	mov	r4, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <__assert_func+0x2c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	68d8      	ldr	r0, [r3, #12]
 8008736:	b954      	cbnz	r4, 800874e <__assert_func+0x26>
 8008738:	4b07      	ldr	r3, [pc, #28]	@ (8008758 <__assert_func+0x30>)
 800873a:	461c      	mov	r4, r3
 800873c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008740:	9100      	str	r1, [sp, #0]
 8008742:	462b      	mov	r3, r5
 8008744:	4905      	ldr	r1, [pc, #20]	@ (800875c <__assert_func+0x34>)
 8008746:	f000 fba7 	bl	8008e98 <fiprintf>
 800874a:	f000 fbb7 	bl	8008ebc <abort>
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <__assert_func+0x38>)
 8008750:	e7f4      	b.n	800873c <__assert_func+0x14>
 8008752:	bf00      	nop
 8008754:	20000018 	.word	0x20000018
 8008758:	08009845 	.word	0x08009845
 800875c:	08009817 	.word	0x08009817
 8008760:	0800980a 	.word	0x0800980a

08008764 <_calloc_r>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	fba1 5402 	umull	r5, r4, r1, r2
 800876a:	b93c      	cbnz	r4, 800877c <_calloc_r+0x18>
 800876c:	4629      	mov	r1, r5
 800876e:	f7fe f9c3 	bl	8006af8 <_malloc_r>
 8008772:	4606      	mov	r6, r0
 8008774:	b928      	cbnz	r0, 8008782 <_calloc_r+0x1e>
 8008776:	2600      	movs	r6, #0
 8008778:	4630      	mov	r0, r6
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	220c      	movs	r2, #12
 800877e:	6002      	str	r2, [r0, #0]
 8008780:	e7f9      	b.n	8008776 <_calloc_r+0x12>
 8008782:	462a      	mov	r2, r5
 8008784:	4621      	mov	r1, r4
 8008786:	f7fd fa70 	bl	8005c6a <memset>
 800878a:	e7f5      	b.n	8008778 <_calloc_r+0x14>

0800878c <rshift>:
 800878c:	6903      	ldr	r3, [r0, #16]
 800878e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008796:	ea4f 1261 	mov.w	r2, r1, asr #5
 800879a:	f100 0414 	add.w	r4, r0, #20
 800879e:	dd45      	ble.n	800882c <rshift+0xa0>
 80087a0:	f011 011f 	ands.w	r1, r1, #31
 80087a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087ac:	d10c      	bne.n	80087c8 <rshift+0x3c>
 80087ae:	f100 0710 	add.w	r7, r0, #16
 80087b2:	4629      	mov	r1, r5
 80087b4:	42b1      	cmp	r1, r6
 80087b6:	d334      	bcc.n	8008822 <rshift+0x96>
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	1eea      	subs	r2, r5, #3
 80087be:	4296      	cmp	r6, r2
 80087c0:	bf38      	it	cc
 80087c2:	2300      	movcc	r3, #0
 80087c4:	4423      	add	r3, r4
 80087c6:	e015      	b.n	80087f4 <rshift+0x68>
 80087c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087cc:	f1c1 0820 	rsb	r8, r1, #32
 80087d0:	40cf      	lsrs	r7, r1
 80087d2:	f105 0e04 	add.w	lr, r5, #4
 80087d6:	46a1      	mov	r9, r4
 80087d8:	4576      	cmp	r6, lr
 80087da:	46f4      	mov	ip, lr
 80087dc:	d815      	bhi.n	800880a <rshift+0x7e>
 80087de:	1a9a      	subs	r2, r3, r2
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	3a04      	subs	r2, #4
 80087e4:	3501      	adds	r5, #1
 80087e6:	42ae      	cmp	r6, r5
 80087e8:	bf38      	it	cc
 80087ea:	2200      	movcc	r2, #0
 80087ec:	18a3      	adds	r3, r4, r2
 80087ee:	50a7      	str	r7, [r4, r2]
 80087f0:	b107      	cbz	r7, 80087f4 <rshift+0x68>
 80087f2:	3304      	adds	r3, #4
 80087f4:	1b1a      	subs	r2, r3, r4
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087fc:	bf08      	it	eq
 80087fe:	2300      	moveq	r3, #0
 8008800:	6102      	str	r2, [r0, #16]
 8008802:	bf08      	it	eq
 8008804:	6143      	streq	r3, [r0, #20]
 8008806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880a:	f8dc c000 	ldr.w	ip, [ip]
 800880e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008812:	ea4c 0707 	orr.w	r7, ip, r7
 8008816:	f849 7b04 	str.w	r7, [r9], #4
 800881a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800881e:	40cf      	lsrs	r7, r1
 8008820:	e7da      	b.n	80087d8 <rshift+0x4c>
 8008822:	f851 cb04 	ldr.w	ip, [r1], #4
 8008826:	f847 cf04 	str.w	ip, [r7, #4]!
 800882a:	e7c3      	b.n	80087b4 <rshift+0x28>
 800882c:	4623      	mov	r3, r4
 800882e:	e7e1      	b.n	80087f4 <rshift+0x68>

08008830 <__hexdig_fun>:
 8008830:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008834:	2b09      	cmp	r3, #9
 8008836:	d802      	bhi.n	800883e <__hexdig_fun+0xe>
 8008838:	3820      	subs	r0, #32
 800883a:	b2c0      	uxtb	r0, r0
 800883c:	4770      	bx	lr
 800883e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008842:	2b05      	cmp	r3, #5
 8008844:	d801      	bhi.n	800884a <__hexdig_fun+0x1a>
 8008846:	3847      	subs	r0, #71	@ 0x47
 8008848:	e7f7      	b.n	800883a <__hexdig_fun+0xa>
 800884a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800884e:	2b05      	cmp	r3, #5
 8008850:	d801      	bhi.n	8008856 <__hexdig_fun+0x26>
 8008852:	3827      	subs	r0, #39	@ 0x27
 8008854:	e7f1      	b.n	800883a <__hexdig_fun+0xa>
 8008856:	2000      	movs	r0, #0
 8008858:	4770      	bx	lr
	...

0800885c <__gethex>:
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	b085      	sub	sp, #20
 8008862:	468a      	mov	sl, r1
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	680b      	ldr	r3, [r1, #0]
 8008868:	9001      	str	r0, [sp, #4]
 800886a:	4690      	mov	r8, r2
 800886c:	1c9c      	adds	r4, r3, #2
 800886e:	46a1      	mov	r9, r4
 8008870:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008874:	2830      	cmp	r0, #48	@ 0x30
 8008876:	d0fa      	beq.n	800886e <__gethex+0x12>
 8008878:	eba9 0303 	sub.w	r3, r9, r3
 800887c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008880:	f7ff ffd6 	bl	8008830 <__hexdig_fun>
 8008884:	4605      	mov	r5, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	d168      	bne.n	800895c <__gethex+0x100>
 800888a:	49a0      	ldr	r1, [pc, #640]	@ (8008b0c <__gethex+0x2b0>)
 800888c:	2201      	movs	r2, #1
 800888e:	4648      	mov	r0, r9
 8008890:	f7ff ff12 	bl	80086b8 <strncmp>
 8008894:	4607      	mov	r7, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	d167      	bne.n	800896a <__gethex+0x10e>
 800889a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800889e:	4626      	mov	r6, r4
 80088a0:	f7ff ffc6 	bl	8008830 <__hexdig_fun>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d062      	beq.n	800896e <__gethex+0x112>
 80088a8:	4623      	mov	r3, r4
 80088aa:	7818      	ldrb	r0, [r3, #0]
 80088ac:	2830      	cmp	r0, #48	@ 0x30
 80088ae:	4699      	mov	r9, r3
 80088b0:	f103 0301 	add.w	r3, r3, #1
 80088b4:	d0f9      	beq.n	80088aa <__gethex+0x4e>
 80088b6:	f7ff ffbb 	bl	8008830 <__hexdig_fun>
 80088ba:	fab0 f580 	clz	r5, r0
 80088be:	096d      	lsrs	r5, r5, #5
 80088c0:	f04f 0b01 	mov.w	fp, #1
 80088c4:	464a      	mov	r2, r9
 80088c6:	4616      	mov	r6, r2
 80088c8:	3201      	adds	r2, #1
 80088ca:	7830      	ldrb	r0, [r6, #0]
 80088cc:	f7ff ffb0 	bl	8008830 <__hexdig_fun>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d1f8      	bne.n	80088c6 <__gethex+0x6a>
 80088d4:	498d      	ldr	r1, [pc, #564]	@ (8008b0c <__gethex+0x2b0>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff feed 	bl	80086b8 <strncmp>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d13f      	bne.n	8008962 <__gethex+0x106>
 80088e2:	b944      	cbnz	r4, 80088f6 <__gethex+0x9a>
 80088e4:	1c74      	adds	r4, r6, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4616      	mov	r6, r2
 80088ea:	3201      	adds	r2, #1
 80088ec:	7830      	ldrb	r0, [r6, #0]
 80088ee:	f7ff ff9f 	bl	8008830 <__hexdig_fun>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1f8      	bne.n	80088e8 <__gethex+0x8c>
 80088f6:	1ba4      	subs	r4, r4, r6
 80088f8:	00a7      	lsls	r7, r4, #2
 80088fa:	7833      	ldrb	r3, [r6, #0]
 80088fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008900:	2b50      	cmp	r3, #80	@ 0x50
 8008902:	d13e      	bne.n	8008982 <__gethex+0x126>
 8008904:	7873      	ldrb	r3, [r6, #1]
 8008906:	2b2b      	cmp	r3, #43	@ 0x2b
 8008908:	d033      	beq.n	8008972 <__gethex+0x116>
 800890a:	2b2d      	cmp	r3, #45	@ 0x2d
 800890c:	d034      	beq.n	8008978 <__gethex+0x11c>
 800890e:	1c71      	adds	r1, r6, #1
 8008910:	2400      	movs	r4, #0
 8008912:	7808      	ldrb	r0, [r1, #0]
 8008914:	f7ff ff8c 	bl	8008830 <__hexdig_fun>
 8008918:	1e43      	subs	r3, r0, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b18      	cmp	r3, #24
 800891e:	d830      	bhi.n	8008982 <__gethex+0x126>
 8008920:	f1a0 0210 	sub.w	r2, r0, #16
 8008924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008928:	f7ff ff82 	bl	8008830 <__hexdig_fun>
 800892c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008930:	fa5f fc8c 	uxtb.w	ip, ip
 8008934:	f1bc 0f18 	cmp.w	ip, #24
 8008938:	f04f 030a 	mov.w	r3, #10
 800893c:	d91e      	bls.n	800897c <__gethex+0x120>
 800893e:	b104      	cbz	r4, 8008942 <__gethex+0xe6>
 8008940:	4252      	negs	r2, r2
 8008942:	4417      	add	r7, r2
 8008944:	f8ca 1000 	str.w	r1, [sl]
 8008948:	b1ed      	cbz	r5, 8008986 <__gethex+0x12a>
 800894a:	f1bb 0f00 	cmp.w	fp, #0
 800894e:	bf0c      	ite	eq
 8008950:	2506      	moveq	r5, #6
 8008952:	2500      	movne	r5, #0
 8008954:	4628      	mov	r0, r5
 8008956:	b005      	add	sp, #20
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	2500      	movs	r5, #0
 800895e:	462c      	mov	r4, r5
 8008960:	e7b0      	b.n	80088c4 <__gethex+0x68>
 8008962:	2c00      	cmp	r4, #0
 8008964:	d1c7      	bne.n	80088f6 <__gethex+0x9a>
 8008966:	4627      	mov	r7, r4
 8008968:	e7c7      	b.n	80088fa <__gethex+0x9e>
 800896a:	464e      	mov	r6, r9
 800896c:	462f      	mov	r7, r5
 800896e:	2501      	movs	r5, #1
 8008970:	e7c3      	b.n	80088fa <__gethex+0x9e>
 8008972:	2400      	movs	r4, #0
 8008974:	1cb1      	adds	r1, r6, #2
 8008976:	e7cc      	b.n	8008912 <__gethex+0xb6>
 8008978:	2401      	movs	r4, #1
 800897a:	e7fb      	b.n	8008974 <__gethex+0x118>
 800897c:	fb03 0002 	mla	r0, r3, r2, r0
 8008980:	e7ce      	b.n	8008920 <__gethex+0xc4>
 8008982:	4631      	mov	r1, r6
 8008984:	e7de      	b.n	8008944 <__gethex+0xe8>
 8008986:	eba6 0309 	sub.w	r3, r6, r9
 800898a:	3b01      	subs	r3, #1
 800898c:	4629      	mov	r1, r5
 800898e:	2b07      	cmp	r3, #7
 8008990:	dc0a      	bgt.n	80089a8 <__gethex+0x14c>
 8008992:	9801      	ldr	r0, [sp, #4]
 8008994:	f7fe f93c 	bl	8006c10 <_Balloc>
 8008998:	4604      	mov	r4, r0
 800899a:	b940      	cbnz	r0, 80089ae <__gethex+0x152>
 800899c:	4b5c      	ldr	r3, [pc, #368]	@ (8008b10 <__gethex+0x2b4>)
 800899e:	4602      	mov	r2, r0
 80089a0:	21e4      	movs	r1, #228	@ 0xe4
 80089a2:	485c      	ldr	r0, [pc, #368]	@ (8008b14 <__gethex+0x2b8>)
 80089a4:	f7ff fec0 	bl	8008728 <__assert_func>
 80089a8:	3101      	adds	r1, #1
 80089aa:	105b      	asrs	r3, r3, #1
 80089ac:	e7ef      	b.n	800898e <__gethex+0x132>
 80089ae:	f100 0a14 	add.w	sl, r0, #20
 80089b2:	2300      	movs	r3, #0
 80089b4:	4655      	mov	r5, sl
 80089b6:	469b      	mov	fp, r3
 80089b8:	45b1      	cmp	r9, r6
 80089ba:	d337      	bcc.n	8008a2c <__gethex+0x1d0>
 80089bc:	f845 bb04 	str.w	fp, [r5], #4
 80089c0:	eba5 050a 	sub.w	r5, r5, sl
 80089c4:	10ad      	asrs	r5, r5, #2
 80089c6:	6125      	str	r5, [r4, #16]
 80089c8:	4658      	mov	r0, fp
 80089ca:	f7fe fa13 	bl	8006df4 <__hi0bits>
 80089ce:	016d      	lsls	r5, r5, #5
 80089d0:	f8d8 6000 	ldr.w	r6, [r8]
 80089d4:	1a2d      	subs	r5, r5, r0
 80089d6:	42b5      	cmp	r5, r6
 80089d8:	dd54      	ble.n	8008a84 <__gethex+0x228>
 80089da:	1bad      	subs	r5, r5, r6
 80089dc:	4629      	mov	r1, r5
 80089de:	4620      	mov	r0, r4
 80089e0:	f7fe fda7 	bl	8007532 <__any_on>
 80089e4:	4681      	mov	r9, r0
 80089e6:	b178      	cbz	r0, 8008a08 <__gethex+0x1ac>
 80089e8:	1e6b      	subs	r3, r5, #1
 80089ea:	1159      	asrs	r1, r3, #5
 80089ec:	f003 021f 	and.w	r2, r3, #31
 80089f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089f4:	f04f 0901 	mov.w	r9, #1
 80089f8:	fa09 f202 	lsl.w	r2, r9, r2
 80089fc:	420a      	tst	r2, r1
 80089fe:	d003      	beq.n	8008a08 <__gethex+0x1ac>
 8008a00:	454b      	cmp	r3, r9
 8008a02:	dc36      	bgt.n	8008a72 <__gethex+0x216>
 8008a04:	f04f 0902 	mov.w	r9, #2
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff febe 	bl	800878c <rshift>
 8008a10:	442f      	add	r7, r5
 8008a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a16:	42bb      	cmp	r3, r7
 8008a18:	da42      	bge.n	8008aa0 <__gethex+0x244>
 8008a1a:	9801      	ldr	r0, [sp, #4]
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	f7fe f937 	bl	8006c90 <_Bfree>
 8008a22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a24:	2300      	movs	r3, #0
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	25a3      	movs	r5, #163	@ 0xa3
 8008a2a:	e793      	b.n	8008954 <__gethex+0xf8>
 8008a2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a30:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a32:	d012      	beq.n	8008a5a <__gethex+0x1fe>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d104      	bne.n	8008a42 <__gethex+0x1e6>
 8008a38:	f845 bb04 	str.w	fp, [r5], #4
 8008a3c:	f04f 0b00 	mov.w	fp, #0
 8008a40:	465b      	mov	r3, fp
 8008a42:	7830      	ldrb	r0, [r6, #0]
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	f7ff fef3 	bl	8008830 <__hexdig_fun>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	f000 000f 	and.w	r0, r0, #15
 8008a50:	4098      	lsls	r0, r3
 8008a52:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a56:	3304      	adds	r3, #4
 8008a58:	e7ae      	b.n	80089b8 <__gethex+0x15c>
 8008a5a:	45b1      	cmp	r9, r6
 8008a5c:	d8ea      	bhi.n	8008a34 <__gethex+0x1d8>
 8008a5e:	492b      	ldr	r1, [pc, #172]	@ (8008b0c <__gethex+0x2b0>)
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff fe27 	bl	80086b8 <strncmp>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1e1      	bne.n	8008a34 <__gethex+0x1d8>
 8008a70:	e7a2      	b.n	80089b8 <__gethex+0x15c>
 8008a72:	1ea9      	subs	r1, r5, #2
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7fe fd5c 	bl	8007532 <__any_on>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0c2      	beq.n	8008a04 <__gethex+0x1a8>
 8008a7e:	f04f 0903 	mov.w	r9, #3
 8008a82:	e7c1      	b.n	8008a08 <__gethex+0x1ac>
 8008a84:	da09      	bge.n	8008a9a <__gethex+0x23e>
 8008a86:	1b75      	subs	r5, r6, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	9801      	ldr	r0, [sp, #4]
 8008a8c:	462a      	mov	r2, r5
 8008a8e:	f7fe fb17 	bl	80070c0 <__lshift>
 8008a92:	1b7f      	subs	r7, r7, r5
 8008a94:	4604      	mov	r4, r0
 8008a96:	f100 0a14 	add.w	sl, r0, #20
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	e7b8      	b.n	8008a12 <__gethex+0x1b6>
 8008aa0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008aa4:	42bd      	cmp	r5, r7
 8008aa6:	dd6f      	ble.n	8008b88 <__gethex+0x32c>
 8008aa8:	1bed      	subs	r5, r5, r7
 8008aaa:	42ae      	cmp	r6, r5
 8008aac:	dc34      	bgt.n	8008b18 <__gethex+0x2bc>
 8008aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d022      	beq.n	8008afc <__gethex+0x2a0>
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d024      	beq.n	8008b04 <__gethex+0x2a8>
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d115      	bne.n	8008aea <__gethex+0x28e>
 8008abe:	42ae      	cmp	r6, r5
 8008ac0:	d113      	bne.n	8008aea <__gethex+0x28e>
 8008ac2:	2e01      	cmp	r6, #1
 8008ac4:	d10b      	bne.n	8008ade <__gethex+0x282>
 8008ac6:	9a02      	ldr	r2, [sp, #8]
 8008ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	f8ca 3000 	str.w	r3, [sl]
 8008ad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad8:	2562      	movs	r5, #98	@ 0x62
 8008ada:	601c      	str	r4, [r3, #0]
 8008adc:	e73a      	b.n	8008954 <__gethex+0xf8>
 8008ade:	1e71      	subs	r1, r6, #1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7fe fd26 	bl	8007532 <__any_on>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d1ed      	bne.n	8008ac6 <__gethex+0x26a>
 8008aea:	9801      	ldr	r0, [sp, #4]
 8008aec:	4621      	mov	r1, r4
 8008aee:	f7fe f8cf 	bl	8006c90 <_Bfree>
 8008af2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008af4:	2300      	movs	r3, #0
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	2550      	movs	r5, #80	@ 0x50
 8008afa:	e72b      	b.n	8008954 <__gethex+0xf8>
 8008afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f3      	bne.n	8008aea <__gethex+0x28e>
 8008b02:	e7e0      	b.n	8008ac6 <__gethex+0x26a>
 8008b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1dd      	bne.n	8008ac6 <__gethex+0x26a>
 8008b0a:	e7ee      	b.n	8008aea <__gethex+0x28e>
 8008b0c:	08009698 	.word	0x08009698
 8008b10:	0800952d 	.word	0x0800952d
 8008b14:	08009846 	.word	0x08009846
 8008b18:	1e6f      	subs	r7, r5, #1
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	d130      	bne.n	8008b82 <__gethex+0x326>
 8008b20:	b127      	cbz	r7, 8008b2c <__gethex+0x2d0>
 8008b22:	4639      	mov	r1, r7
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7fe fd04 	bl	8007532 <__any_on>
 8008b2a:	4681      	mov	r9, r0
 8008b2c:	117a      	asrs	r2, r7, #5
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b34:	f007 071f 	and.w	r7, r7, #31
 8008b38:	40bb      	lsls	r3, r7
 8008b3a:	4213      	tst	r3, r2
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4620      	mov	r0, r4
 8008b40:	bf18      	it	ne
 8008b42:	f049 0902 	orrne.w	r9, r9, #2
 8008b46:	f7ff fe21 	bl	800878c <rshift>
 8008b4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b4e:	1b76      	subs	r6, r6, r5
 8008b50:	2502      	movs	r5, #2
 8008b52:	f1b9 0f00 	cmp.w	r9, #0
 8008b56:	d047      	beq.n	8008be8 <__gethex+0x38c>
 8008b58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d015      	beq.n	8008b8c <__gethex+0x330>
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d017      	beq.n	8008b94 <__gethex+0x338>
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d109      	bne.n	8008b7c <__gethex+0x320>
 8008b68:	f019 0f02 	tst.w	r9, #2
 8008b6c:	d006      	beq.n	8008b7c <__gethex+0x320>
 8008b6e:	f8da 3000 	ldr.w	r3, [sl]
 8008b72:	ea49 0903 	orr.w	r9, r9, r3
 8008b76:	f019 0f01 	tst.w	r9, #1
 8008b7a:	d10e      	bne.n	8008b9a <__gethex+0x33e>
 8008b7c:	f045 0510 	orr.w	r5, r5, #16
 8008b80:	e032      	b.n	8008be8 <__gethex+0x38c>
 8008b82:	f04f 0901 	mov.w	r9, #1
 8008b86:	e7d1      	b.n	8008b2c <__gethex+0x2d0>
 8008b88:	2501      	movs	r5, #1
 8008b8a:	e7e2      	b.n	8008b52 <__gethex+0x2f6>
 8008b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b8e:	f1c3 0301 	rsb	r3, r3, #1
 8008b92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <__gethex+0x320>
 8008b9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b9e:	f104 0314 	add.w	r3, r4, #20
 8008ba2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ba6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008baa:	f04f 0c00 	mov.w	ip, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bb8:	d01b      	beq.n	8008bf2 <__gethex+0x396>
 8008bba:	3201      	adds	r2, #1
 8008bbc:	6002      	str	r2, [r0, #0]
 8008bbe:	2d02      	cmp	r5, #2
 8008bc0:	f104 0314 	add.w	r3, r4, #20
 8008bc4:	d13c      	bne.n	8008c40 <__gethex+0x3e4>
 8008bc6:	f8d8 2000 	ldr.w	r2, [r8]
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	42b2      	cmp	r2, r6
 8008bce:	d109      	bne.n	8008be4 <__gethex+0x388>
 8008bd0:	1171      	asrs	r1, r6, #5
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bd8:	f006 061f 	and.w	r6, r6, #31
 8008bdc:	fa02 f606 	lsl.w	r6, r2, r6
 8008be0:	421e      	tst	r6, r3
 8008be2:	d13a      	bne.n	8008c5a <__gethex+0x3fe>
 8008be4:	f045 0520 	orr.w	r5, r5, #32
 8008be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bea:	601c      	str	r4, [r3, #0]
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	601f      	str	r7, [r3, #0]
 8008bf0:	e6b0      	b.n	8008954 <__gethex+0xf8>
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bf8:	d8d9      	bhi.n	8008bae <__gethex+0x352>
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	459b      	cmp	fp, r3
 8008bfe:	db17      	blt.n	8008c30 <__gethex+0x3d4>
 8008c00:	6861      	ldr	r1, [r4, #4]
 8008c02:	9801      	ldr	r0, [sp, #4]
 8008c04:	3101      	adds	r1, #1
 8008c06:	f7fe f803 	bl	8006c10 <_Balloc>
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	b918      	cbnz	r0, 8008c16 <__gethex+0x3ba>
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c78 <__gethex+0x41c>)
 8008c10:	4602      	mov	r2, r0
 8008c12:	2184      	movs	r1, #132	@ 0x84
 8008c14:	e6c5      	b.n	80089a2 <__gethex+0x146>
 8008c16:	6922      	ldr	r2, [r4, #16]
 8008c18:	3202      	adds	r2, #2
 8008c1a:	f104 010c 	add.w	r1, r4, #12
 8008c1e:	0092      	lsls	r2, r2, #2
 8008c20:	300c      	adds	r0, #12
 8008c22:	f7ff fd6b 	bl	80086fc <memcpy>
 8008c26:	4621      	mov	r1, r4
 8008c28:	9801      	ldr	r0, [sp, #4]
 8008c2a:	f7fe f831 	bl	8006c90 <_Bfree>
 8008c2e:	464c      	mov	r4, r9
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c38:	6122      	str	r2, [r4, #16]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	615a      	str	r2, [r3, #20]
 8008c3e:	e7be      	b.n	8008bbe <__gethex+0x362>
 8008c40:	6922      	ldr	r2, [r4, #16]
 8008c42:	455a      	cmp	r2, fp
 8008c44:	dd0b      	ble.n	8008c5e <__gethex+0x402>
 8008c46:	2101      	movs	r1, #1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7ff fd9f 	bl	800878c <rshift>
 8008c4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c52:	3701      	adds	r7, #1
 8008c54:	42bb      	cmp	r3, r7
 8008c56:	f6ff aee0 	blt.w	8008a1a <__gethex+0x1be>
 8008c5a:	2501      	movs	r5, #1
 8008c5c:	e7c2      	b.n	8008be4 <__gethex+0x388>
 8008c5e:	f016 061f 	ands.w	r6, r6, #31
 8008c62:	d0fa      	beq.n	8008c5a <__gethex+0x3fe>
 8008c64:	4453      	add	r3, sl
 8008c66:	f1c6 0620 	rsb	r6, r6, #32
 8008c6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c6e:	f7fe f8c1 	bl	8006df4 <__hi0bits>
 8008c72:	42b0      	cmp	r0, r6
 8008c74:	dbe7      	blt.n	8008c46 <__gethex+0x3ea>
 8008c76:	e7f0      	b.n	8008c5a <__gethex+0x3fe>
 8008c78:	0800952d 	.word	0x0800952d

08008c7c <L_shift>:
 8008c7c:	f1c2 0208 	rsb	r2, r2, #8
 8008c80:	0092      	lsls	r2, r2, #2
 8008c82:	b570      	push	{r4, r5, r6, lr}
 8008c84:	f1c2 0620 	rsb	r6, r2, #32
 8008c88:	6843      	ldr	r3, [r0, #4]
 8008c8a:	6804      	ldr	r4, [r0, #0]
 8008c8c:	fa03 f506 	lsl.w	r5, r3, r6
 8008c90:	432c      	orrs	r4, r5
 8008c92:	40d3      	lsrs	r3, r2
 8008c94:	6004      	str	r4, [r0, #0]
 8008c96:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c9a:	4288      	cmp	r0, r1
 8008c9c:	d3f4      	bcc.n	8008c88 <L_shift+0xc>
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}

08008ca0 <__match>:
 8008ca0:	b530      	push	{r4, r5, lr}
 8008ca2:	6803      	ldr	r3, [r0, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008caa:	b914      	cbnz	r4, 8008cb2 <__match+0x12>
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	2001      	movs	r0, #1
 8008cb0:	bd30      	pop	{r4, r5, pc}
 8008cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008cba:	2d19      	cmp	r5, #25
 8008cbc:	bf98      	it	ls
 8008cbe:	3220      	addls	r2, #32
 8008cc0:	42a2      	cmp	r2, r4
 8008cc2:	d0f0      	beq.n	8008ca6 <__match+0x6>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7f3      	b.n	8008cb0 <__match+0x10>

08008cc8 <__hexnan>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	680b      	ldr	r3, [r1, #0]
 8008cce:	6801      	ldr	r1, [r0, #0]
 8008cd0:	115e      	asrs	r6, r3, #5
 8008cd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cd6:	f013 031f 	ands.w	r3, r3, #31
 8008cda:	b087      	sub	sp, #28
 8008cdc:	bf18      	it	ne
 8008cde:	3604      	addne	r6, #4
 8008ce0:	2500      	movs	r5, #0
 8008ce2:	1f37      	subs	r7, r6, #4
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	4690      	mov	r8, r2
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cee:	46b9      	mov	r9, r7
 8008cf0:	463c      	mov	r4, r7
 8008cf2:	9502      	str	r5, [sp, #8]
 8008cf4:	46ab      	mov	fp, r5
 8008cf6:	784a      	ldrb	r2, [r1, #1]
 8008cf8:	1c4b      	adds	r3, r1, #1
 8008cfa:	9303      	str	r3, [sp, #12]
 8008cfc:	b342      	cbz	r2, 8008d50 <__hexnan+0x88>
 8008cfe:	4610      	mov	r0, r2
 8008d00:	9105      	str	r1, [sp, #20]
 8008d02:	9204      	str	r2, [sp, #16]
 8008d04:	f7ff fd94 	bl	8008830 <__hexdig_fun>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d151      	bne.n	8008db0 <__hexnan+0xe8>
 8008d0c:	9a04      	ldr	r2, [sp, #16]
 8008d0e:	9905      	ldr	r1, [sp, #20]
 8008d10:	2a20      	cmp	r2, #32
 8008d12:	d818      	bhi.n	8008d46 <__hexnan+0x7e>
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	459b      	cmp	fp, r3
 8008d18:	dd13      	ble.n	8008d42 <__hexnan+0x7a>
 8008d1a:	454c      	cmp	r4, r9
 8008d1c:	d206      	bcs.n	8008d2c <__hexnan+0x64>
 8008d1e:	2d07      	cmp	r5, #7
 8008d20:	dc04      	bgt.n	8008d2c <__hexnan+0x64>
 8008d22:	462a      	mov	r2, r5
 8008d24:	4649      	mov	r1, r9
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff ffa8 	bl	8008c7c <L_shift>
 8008d2c:	4544      	cmp	r4, r8
 8008d2e:	d952      	bls.n	8008dd6 <__hexnan+0x10e>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f1a4 0904 	sub.w	r9, r4, #4
 8008d36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008d3e:	464c      	mov	r4, r9
 8008d40:	461d      	mov	r5, r3
 8008d42:	9903      	ldr	r1, [sp, #12]
 8008d44:	e7d7      	b.n	8008cf6 <__hexnan+0x2e>
 8008d46:	2a29      	cmp	r2, #41	@ 0x29
 8008d48:	d157      	bne.n	8008dfa <__hexnan+0x132>
 8008d4a:	3102      	adds	r1, #2
 8008d4c:	f8ca 1000 	str.w	r1, [sl]
 8008d50:	f1bb 0f00 	cmp.w	fp, #0
 8008d54:	d051      	beq.n	8008dfa <__hexnan+0x132>
 8008d56:	454c      	cmp	r4, r9
 8008d58:	d206      	bcs.n	8008d68 <__hexnan+0xa0>
 8008d5a:	2d07      	cmp	r5, #7
 8008d5c:	dc04      	bgt.n	8008d68 <__hexnan+0xa0>
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4649      	mov	r1, r9
 8008d62:	4620      	mov	r0, r4
 8008d64:	f7ff ff8a 	bl	8008c7c <L_shift>
 8008d68:	4544      	cmp	r4, r8
 8008d6a:	d936      	bls.n	8008dda <__hexnan+0x112>
 8008d6c:	f1a8 0204 	sub.w	r2, r8, #4
 8008d70:	4623      	mov	r3, r4
 8008d72:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d76:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d7a:	429f      	cmp	r7, r3
 8008d7c:	d2f9      	bcs.n	8008d72 <__hexnan+0xaa>
 8008d7e:	1b3b      	subs	r3, r7, r4
 8008d80:	f023 0303 	bic.w	r3, r3, #3
 8008d84:	3304      	adds	r3, #4
 8008d86:	3401      	adds	r4, #1
 8008d88:	3e03      	subs	r6, #3
 8008d8a:	42b4      	cmp	r4, r6
 8008d8c:	bf88      	it	hi
 8008d8e:	2304      	movhi	r3, #4
 8008d90:	4443      	add	r3, r8
 8008d92:	2200      	movs	r2, #0
 8008d94:	f843 2b04 	str.w	r2, [r3], #4
 8008d98:	429f      	cmp	r7, r3
 8008d9a:	d2fb      	bcs.n	8008d94 <__hexnan+0xcc>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	b91b      	cbnz	r3, 8008da8 <__hexnan+0xe0>
 8008da0:	4547      	cmp	r7, r8
 8008da2:	d128      	bne.n	8008df6 <__hexnan+0x12e>
 8008da4:	2301      	movs	r3, #1
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	2005      	movs	r0, #5
 8008daa:	b007      	add	sp, #28
 8008dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db0:	3501      	adds	r5, #1
 8008db2:	2d08      	cmp	r5, #8
 8008db4:	f10b 0b01 	add.w	fp, fp, #1
 8008db8:	dd06      	ble.n	8008dc8 <__hexnan+0x100>
 8008dba:	4544      	cmp	r4, r8
 8008dbc:	d9c1      	bls.n	8008d42 <__hexnan+0x7a>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dc4:	2501      	movs	r5, #1
 8008dc6:	3c04      	subs	r4, #4
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	f000 000f 	and.w	r0, r0, #15
 8008dce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	e7b5      	b.n	8008d42 <__hexnan+0x7a>
 8008dd6:	2508      	movs	r5, #8
 8008dd8:	e7b3      	b.n	8008d42 <__hexnan+0x7a>
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0dd      	beq.n	8008d9c <__hexnan+0xd4>
 8008de0:	f1c3 0320 	rsb	r3, r3, #32
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295
 8008de8:	40da      	lsrs	r2, r3
 8008dea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008dee:	4013      	ands	r3, r2
 8008df0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008df4:	e7d2      	b.n	8008d9c <__hexnan+0xd4>
 8008df6:	3f04      	subs	r7, #4
 8008df8:	e7d0      	b.n	8008d9c <__hexnan+0xd4>
 8008dfa:	2004      	movs	r0, #4
 8008dfc:	e7d5      	b.n	8008daa <__hexnan+0xe2>

08008dfe <__ascii_mbtowc>:
 8008dfe:	b082      	sub	sp, #8
 8008e00:	b901      	cbnz	r1, 8008e04 <__ascii_mbtowc+0x6>
 8008e02:	a901      	add	r1, sp, #4
 8008e04:	b142      	cbz	r2, 8008e18 <__ascii_mbtowc+0x1a>
 8008e06:	b14b      	cbz	r3, 8008e1c <__ascii_mbtowc+0x1e>
 8008e08:	7813      	ldrb	r3, [r2, #0]
 8008e0a:	600b      	str	r3, [r1, #0]
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	1e10      	subs	r0, r2, #0
 8008e10:	bf18      	it	ne
 8008e12:	2001      	movne	r0, #1
 8008e14:	b002      	add	sp, #8
 8008e16:	4770      	bx	lr
 8008e18:	4610      	mov	r0, r2
 8008e1a:	e7fb      	b.n	8008e14 <__ascii_mbtowc+0x16>
 8008e1c:	f06f 0001 	mvn.w	r0, #1
 8008e20:	e7f8      	b.n	8008e14 <__ascii_mbtowc+0x16>

08008e22 <_realloc_r>:
 8008e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e26:	4680      	mov	r8, r0
 8008e28:	4615      	mov	r5, r2
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	b921      	cbnz	r1, 8008e38 <_realloc_r+0x16>
 8008e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	4611      	mov	r1, r2
 8008e34:	f7fd be60 	b.w	8006af8 <_malloc_r>
 8008e38:	b92a      	cbnz	r2, 8008e46 <_realloc_r+0x24>
 8008e3a:	f7fd fde9 	bl	8006a10 <_free_r>
 8008e3e:	2400      	movs	r4, #0
 8008e40:	4620      	mov	r0, r4
 8008e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e46:	f000 f840 	bl	8008eca <_malloc_usable_size_r>
 8008e4a:	4285      	cmp	r5, r0
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	d802      	bhi.n	8008e56 <_realloc_r+0x34>
 8008e50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e54:	d8f4      	bhi.n	8008e40 <_realloc_r+0x1e>
 8008e56:	4629      	mov	r1, r5
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f7fd fe4d 	bl	8006af8 <_malloc_r>
 8008e5e:	4607      	mov	r7, r0
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d0ec      	beq.n	8008e3e <_realloc_r+0x1c>
 8008e64:	42b5      	cmp	r5, r6
 8008e66:	462a      	mov	r2, r5
 8008e68:	4621      	mov	r1, r4
 8008e6a:	bf28      	it	cs
 8008e6c:	4632      	movcs	r2, r6
 8008e6e:	f7ff fc45 	bl	80086fc <memcpy>
 8008e72:	4621      	mov	r1, r4
 8008e74:	4640      	mov	r0, r8
 8008e76:	f7fd fdcb 	bl	8006a10 <_free_r>
 8008e7a:	463c      	mov	r4, r7
 8008e7c:	e7e0      	b.n	8008e40 <_realloc_r+0x1e>

08008e7e <__ascii_wctomb>:
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	b141      	cbz	r1, 8008e96 <__ascii_wctomb+0x18>
 8008e84:	2aff      	cmp	r2, #255	@ 0xff
 8008e86:	d904      	bls.n	8008e92 <__ascii_wctomb+0x14>
 8008e88:	228a      	movs	r2, #138	@ 0x8a
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	4770      	bx	lr
 8008e92:	700a      	strb	r2, [r1, #0]
 8008e94:	2001      	movs	r0, #1
 8008e96:	4770      	bx	lr

08008e98 <fiprintf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b503      	push	{r0, r1, lr}
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	4805      	ldr	r0, [pc, #20]	@ (8008eb8 <fiprintf+0x20>)
 8008ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f000 f83f 	bl	8008f2c <_vfiprintf_r>
 8008eae:	b002      	add	sp, #8
 8008eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb4:	b003      	add	sp, #12
 8008eb6:	4770      	bx	lr
 8008eb8:	20000018 	.word	0x20000018

08008ebc <abort>:
 8008ebc:	b508      	push	{r3, lr}
 8008ebe:	2006      	movs	r0, #6
 8008ec0:	f000 fa08 	bl	80092d4 <raise>
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f7f8 faa1 	bl	800140c <_exit>

08008eca <_malloc_usable_size_r>:
 8008eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ece:	1f18      	subs	r0, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfbc      	itt	lt
 8008ed4:	580b      	ldrlt	r3, [r1, r0]
 8008ed6:	18c0      	addlt	r0, r0, r3
 8008ed8:	4770      	bx	lr

08008eda <__sfputc_r>:
 8008eda:	6893      	ldr	r3, [r2, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	b410      	push	{r4}
 8008ee2:	6093      	str	r3, [r2, #8]
 8008ee4:	da08      	bge.n	8008ef8 <__sfputc_r+0x1e>
 8008ee6:	6994      	ldr	r4, [r2, #24]
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	db01      	blt.n	8008ef0 <__sfputc_r+0x16>
 8008eec:	290a      	cmp	r1, #10
 8008eee:	d103      	bne.n	8008ef8 <__sfputc_r+0x1e>
 8008ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef4:	f000 b932 	b.w	800915c <__swbuf_r>
 8008ef8:	6813      	ldr	r3, [r2, #0]
 8008efa:	1c58      	adds	r0, r3, #1
 8008efc:	6010      	str	r0, [r2, #0]
 8008efe:	7019      	strb	r1, [r3, #0]
 8008f00:	4608      	mov	r0, r1
 8008f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <__sfputs_r>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	4614      	mov	r4, r2
 8008f10:	18d5      	adds	r5, r2, r3
 8008f12:	42ac      	cmp	r4, r5
 8008f14:	d101      	bne.n	8008f1a <__sfputs_r+0x12>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e007      	b.n	8008f2a <__sfputs_r+0x22>
 8008f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1e:	463a      	mov	r2, r7
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff ffda 	bl	8008eda <__sfputc_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d1f3      	bne.n	8008f12 <__sfputs_r+0xa>
 8008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f2c <_vfiprintf_r>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	460d      	mov	r5, r1
 8008f32:	b09d      	sub	sp, #116	@ 0x74
 8008f34:	4614      	mov	r4, r2
 8008f36:	4698      	mov	r8, r3
 8008f38:	4606      	mov	r6, r0
 8008f3a:	b118      	cbz	r0, 8008f44 <_vfiprintf_r+0x18>
 8008f3c:	6a03      	ldr	r3, [r0, #32]
 8008f3e:	b90b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x18>
 8008f40:	f7fc fdfa 	bl	8005b38 <__sinit>
 8008f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f52:	f7fc ff08 	bl	8005d66 <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x34>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b99b      	cbnz	r3, 8008f88 <_vfiprintf_r+0x5c>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f000 f938 	bl	80091d8 <__swsetup_r>
 8008f68:	b170      	cbz	r0, 8008f88 <_vfiprintf_r+0x5c>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d504      	bpl.n	8008f7a <_vfiprintf_r+0x4e>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	@ 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	0598      	lsls	r0, r3, #22
 8008f7e:	d4f7      	bmi.n	8008f70 <_vfiprintf_r+0x44>
 8008f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f82:	f7fc fef1 	bl	8005d68 <__retarget_lock_release_recursive>
 8008f86:	e7f3      	b.n	8008f70 <_vfiprintf_r+0x44>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f96:	2330      	movs	r3, #48	@ 0x30
 8008f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009148 <_vfiprintf_r+0x21c>
 8008f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fa0:	f04f 0901 	mov.w	r9, #1
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	469a      	mov	sl, r3
 8008fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fac:	b10a      	cbz	r2, 8008fb2 <_vfiprintf_r+0x86>
 8008fae:	2a25      	cmp	r2, #37	@ 0x25
 8008fb0:	d1f9      	bne.n	8008fa6 <_vfiprintf_r+0x7a>
 8008fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb6:	d00b      	beq.n	8008fd0 <_vfiprintf_r+0xa4>
 8008fb8:	465b      	mov	r3, fp
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffa2 	bl	8008f08 <__sfputs_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f000 80a7 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fcc:	445a      	add	r2, fp
 8008fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 809f 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ff2:	4654      	mov	r4, sl
 8008ff4:	2205      	movs	r2, #5
 8008ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffa:	4853      	ldr	r0, [pc, #332]	@ (8009148 <_vfiprintf_r+0x21c>)
 8008ffc:	f7f7 f8e8 	bl	80001d0 <memchr>
 8009000:	9a04      	ldr	r2, [sp, #16]
 8009002:	b9d8      	cbnz	r0, 800903c <_vfiprintf_r+0x110>
 8009004:	06d1      	lsls	r1, r2, #27
 8009006:	bf44      	itt	mi
 8009008:	2320      	movmi	r3, #32
 800900a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900e:	0713      	lsls	r3, r2, #28
 8009010:	bf44      	itt	mi
 8009012:	232b      	movmi	r3, #43	@ 0x2b
 8009014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009018:	f89a 3000 	ldrb.w	r3, [sl]
 800901c:	2b2a      	cmp	r3, #42	@ 0x2a
 800901e:	d015      	beq.n	800904c <_vfiprintf_r+0x120>
 8009020:	9a07      	ldr	r2, [sp, #28]
 8009022:	4654      	mov	r4, sl
 8009024:	2000      	movs	r0, #0
 8009026:	f04f 0c0a 	mov.w	ip, #10
 800902a:	4621      	mov	r1, r4
 800902c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009030:	3b30      	subs	r3, #48	@ 0x30
 8009032:	2b09      	cmp	r3, #9
 8009034:	d94b      	bls.n	80090ce <_vfiprintf_r+0x1a2>
 8009036:	b1b0      	cbz	r0, 8009066 <_vfiprintf_r+0x13a>
 8009038:	9207      	str	r2, [sp, #28]
 800903a:	e014      	b.n	8009066 <_vfiprintf_r+0x13a>
 800903c:	eba0 0308 	sub.w	r3, r0, r8
 8009040:	fa09 f303 	lsl.w	r3, r9, r3
 8009044:	4313      	orrs	r3, r2
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	46a2      	mov	sl, r4
 800904a:	e7d2      	b.n	8008ff2 <_vfiprintf_r+0xc6>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	1d19      	adds	r1, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfbb      	ittet	lt
 8009058:	425b      	neglt	r3, r3
 800905a:	f042 0202 	orrlt.w	r2, r2, #2
 800905e:	9307      	strge	r3, [sp, #28]
 8009060:	9307      	strlt	r3, [sp, #28]
 8009062:	bfb8      	it	lt
 8009064:	9204      	strlt	r2, [sp, #16]
 8009066:	7823      	ldrb	r3, [r4, #0]
 8009068:	2b2e      	cmp	r3, #46	@ 0x2e
 800906a:	d10a      	bne.n	8009082 <_vfiprintf_r+0x156>
 800906c:	7863      	ldrb	r3, [r4, #1]
 800906e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009070:	d132      	bne.n	80090d8 <_vfiprintf_r+0x1ac>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	1d1a      	adds	r2, r3, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	9203      	str	r2, [sp, #12]
 800907a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800907e:	3402      	adds	r4, #2
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009158 <_vfiprintf_r+0x22c>
 8009086:	7821      	ldrb	r1, [r4, #0]
 8009088:	2203      	movs	r2, #3
 800908a:	4650      	mov	r0, sl
 800908c:	f7f7 f8a0 	bl	80001d0 <memchr>
 8009090:	b138      	cbz	r0, 80090a2 <_vfiprintf_r+0x176>
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	eba0 000a 	sub.w	r0, r0, sl
 8009098:	2240      	movs	r2, #64	@ 0x40
 800909a:	4082      	lsls	r2, r0
 800909c:	4313      	orrs	r3, r2
 800909e:	3401      	adds	r4, #1
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a6:	4829      	ldr	r0, [pc, #164]	@ (800914c <_vfiprintf_r+0x220>)
 80090a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ac:	2206      	movs	r2, #6
 80090ae:	f7f7 f88f 	bl	80001d0 <memchr>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d03f      	beq.n	8009136 <_vfiprintf_r+0x20a>
 80090b6:	4b26      	ldr	r3, [pc, #152]	@ (8009150 <_vfiprintf_r+0x224>)
 80090b8:	bb1b      	cbnz	r3, 8009102 <_vfiprintf_r+0x1d6>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	3307      	adds	r3, #7
 80090be:	f023 0307 	bic.w	r3, r3, #7
 80090c2:	3308      	adds	r3, #8
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c8:	443b      	add	r3, r7
 80090ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80090cc:	e76a      	b.n	8008fa4 <_vfiprintf_r+0x78>
 80090ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d2:	460c      	mov	r4, r1
 80090d4:	2001      	movs	r0, #1
 80090d6:	e7a8      	b.n	800902a <_vfiprintf_r+0xfe>
 80090d8:	2300      	movs	r3, #0
 80090da:	3401      	adds	r4, #1
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	4619      	mov	r1, r3
 80090e0:	f04f 0c0a 	mov.w	ip, #10
 80090e4:	4620      	mov	r0, r4
 80090e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ea:	3a30      	subs	r2, #48	@ 0x30
 80090ec:	2a09      	cmp	r2, #9
 80090ee:	d903      	bls.n	80090f8 <_vfiprintf_r+0x1cc>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0c6      	beq.n	8009082 <_vfiprintf_r+0x156>
 80090f4:	9105      	str	r1, [sp, #20]
 80090f6:	e7c4      	b.n	8009082 <_vfiprintf_r+0x156>
 80090f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090fc:	4604      	mov	r4, r0
 80090fe:	2301      	movs	r3, #1
 8009100:	e7f0      	b.n	80090e4 <_vfiprintf_r+0x1b8>
 8009102:	ab03      	add	r3, sp, #12
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	462a      	mov	r2, r5
 8009108:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <_vfiprintf_r+0x228>)
 800910a:	a904      	add	r1, sp, #16
 800910c:	4630      	mov	r0, r6
 800910e:	f7fb febb 	bl	8004e88 <_printf_float>
 8009112:	4607      	mov	r7, r0
 8009114:	1c78      	adds	r0, r7, #1
 8009116:	d1d6      	bne.n	80090c6 <_vfiprintf_r+0x19a>
 8009118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800911a:	07d9      	lsls	r1, r3, #31
 800911c:	d405      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	059a      	lsls	r2, r3, #22
 8009122:	d402      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 8009124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009126:	f7fc fe1f 	bl	8005d68 <__retarget_lock_release_recursive>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	065b      	lsls	r3, r3, #25
 800912e:	f53f af1f 	bmi.w	8008f70 <_vfiprintf_r+0x44>
 8009132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009134:	e71e      	b.n	8008f74 <_vfiprintf_r+0x48>
 8009136:	ab03      	add	r3, sp, #12
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	462a      	mov	r2, r5
 800913c:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <_vfiprintf_r+0x228>)
 800913e:	a904      	add	r1, sp, #16
 8009140:	4630      	mov	r0, r6
 8009142:	f7fc f939 	bl	80053b8 <_printf_i>
 8009146:	e7e4      	b.n	8009112 <_vfiprintf_r+0x1e6>
 8009148:	080097f1 	.word	0x080097f1
 800914c:	080097fb 	.word	0x080097fb
 8009150:	08004e89 	.word	0x08004e89
 8009154:	08008f09 	.word	0x08008f09
 8009158:	080097f7 	.word	0x080097f7

0800915c <__swbuf_r>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	460e      	mov	r6, r1
 8009160:	4614      	mov	r4, r2
 8009162:	4605      	mov	r5, r0
 8009164:	b118      	cbz	r0, 800916e <__swbuf_r+0x12>
 8009166:	6a03      	ldr	r3, [r0, #32]
 8009168:	b90b      	cbnz	r3, 800916e <__swbuf_r+0x12>
 800916a:	f7fc fce5 	bl	8005b38 <__sinit>
 800916e:	69a3      	ldr	r3, [r4, #24]
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	071a      	lsls	r2, r3, #28
 8009176:	d501      	bpl.n	800917c <__swbuf_r+0x20>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b943      	cbnz	r3, 800918e <__swbuf_r+0x32>
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f82a 	bl	80091d8 <__swsetup_r>
 8009184:	b118      	cbz	r0, 800918e <__swbuf_r+0x32>
 8009186:	f04f 37ff 	mov.w	r7, #4294967295
 800918a:	4638      	mov	r0, r7
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	1a98      	subs	r0, r3, r2
 8009194:	6963      	ldr	r3, [r4, #20]
 8009196:	b2f6      	uxtb	r6, r6
 8009198:	4283      	cmp	r3, r0
 800919a:	4637      	mov	r7, r6
 800919c:	dc05      	bgt.n	80091aa <__swbuf_r+0x4e>
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f7ff fa47 	bl	8008634 <_fflush_r>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d1ed      	bne.n	8009186 <__swbuf_r+0x2a>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	60a3      	str	r3, [r4, #8]
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	701e      	strb	r6, [r3, #0]
 80091b8:	6962      	ldr	r2, [r4, #20]
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	429a      	cmp	r2, r3
 80091be:	d004      	beq.n	80091ca <__swbuf_r+0x6e>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	07db      	lsls	r3, r3, #31
 80091c4:	d5e1      	bpl.n	800918a <__swbuf_r+0x2e>
 80091c6:	2e0a      	cmp	r6, #10
 80091c8:	d1df      	bne.n	800918a <__swbuf_r+0x2e>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7ff fa31 	bl	8008634 <_fflush_r>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0d9      	beq.n	800918a <__swbuf_r+0x2e>
 80091d6:	e7d6      	b.n	8009186 <__swbuf_r+0x2a>

080091d8 <__swsetup_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4b29      	ldr	r3, [pc, #164]	@ (8009280 <__swsetup_r+0xa8>)
 80091dc:	4605      	mov	r5, r0
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	460c      	mov	r4, r1
 80091e2:	b118      	cbz	r0, 80091ec <__swsetup_r+0x14>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b90b      	cbnz	r3, 80091ec <__swsetup_r+0x14>
 80091e8:	f7fc fca6 	bl	8005b38 <__sinit>
 80091ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f0:	0719      	lsls	r1, r3, #28
 80091f2:	d422      	bmi.n	800923a <__swsetup_r+0x62>
 80091f4:	06da      	lsls	r2, r3, #27
 80091f6:	d407      	bmi.n	8009208 <__swsetup_r+0x30>
 80091f8:	2209      	movs	r2, #9
 80091fa:	602a      	str	r2, [r5, #0]
 80091fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	f04f 30ff 	mov.w	r0, #4294967295
 8009206:	e033      	b.n	8009270 <__swsetup_r+0x98>
 8009208:	0758      	lsls	r0, r3, #29
 800920a:	d512      	bpl.n	8009232 <__swsetup_r+0x5a>
 800920c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800920e:	b141      	cbz	r1, 8009222 <__swsetup_r+0x4a>
 8009210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009214:	4299      	cmp	r1, r3
 8009216:	d002      	beq.n	800921e <__swsetup_r+0x46>
 8009218:	4628      	mov	r0, r5
 800921a:	f7fd fbf9 	bl	8006a10 <_free_r>
 800921e:	2300      	movs	r3, #0
 8009220:	6363      	str	r3, [r4, #52]	@ 0x34
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	2300      	movs	r3, #0
 800922c:	6063      	str	r3, [r4, #4]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f043 0308 	orr.w	r3, r3, #8
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	b94b      	cbnz	r3, 8009252 <__swsetup_r+0x7a>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009248:	d003      	beq.n	8009252 <__swsetup_r+0x7a>
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f883 	bl	8009358 <__smakebuf_r>
 8009252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009256:	f013 0201 	ands.w	r2, r3, #1
 800925a:	d00a      	beq.n	8009272 <__swsetup_r+0x9a>
 800925c:	2200      	movs	r2, #0
 800925e:	60a2      	str	r2, [r4, #8]
 8009260:	6962      	ldr	r2, [r4, #20]
 8009262:	4252      	negs	r2, r2
 8009264:	61a2      	str	r2, [r4, #24]
 8009266:	6922      	ldr	r2, [r4, #16]
 8009268:	b942      	cbnz	r2, 800927c <__swsetup_r+0xa4>
 800926a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800926e:	d1c5      	bne.n	80091fc <__swsetup_r+0x24>
 8009270:	bd38      	pop	{r3, r4, r5, pc}
 8009272:	0799      	lsls	r1, r3, #30
 8009274:	bf58      	it	pl
 8009276:	6962      	ldrpl	r2, [r4, #20]
 8009278:	60a2      	str	r2, [r4, #8]
 800927a:	e7f4      	b.n	8009266 <__swsetup_r+0x8e>
 800927c:	2000      	movs	r0, #0
 800927e:	e7f7      	b.n	8009270 <__swsetup_r+0x98>
 8009280:	20000018 	.word	0x20000018

08009284 <_raise_r>:
 8009284:	291f      	cmp	r1, #31
 8009286:	b538      	push	{r3, r4, r5, lr}
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	d904      	bls.n	8009298 <_raise_r+0x14>
 800928e:	2316      	movs	r3, #22
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800929a:	b112      	cbz	r2, 80092a2 <_raise_r+0x1e>
 800929c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a0:	b94b      	cbnz	r3, 80092b6 <_raise_r+0x32>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 f830 	bl	8009308 <_getpid_r>
 80092a8:	4622      	mov	r2, r4
 80092aa:	4601      	mov	r1, r0
 80092ac:	4628      	mov	r0, r5
 80092ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b2:	f000 b817 	b.w	80092e4 <_kill_r>
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d00a      	beq.n	80092d0 <_raise_r+0x4c>
 80092ba:	1c59      	adds	r1, r3, #1
 80092bc:	d103      	bne.n	80092c6 <_raise_r+0x42>
 80092be:	2316      	movs	r3, #22
 80092c0:	6003      	str	r3, [r0, #0]
 80092c2:	2001      	movs	r0, #1
 80092c4:	e7e7      	b.n	8009296 <_raise_r+0x12>
 80092c6:	2100      	movs	r1, #0
 80092c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092cc:	4620      	mov	r0, r4
 80092ce:	4798      	blx	r3
 80092d0:	2000      	movs	r0, #0
 80092d2:	e7e0      	b.n	8009296 <_raise_r+0x12>

080092d4 <raise>:
 80092d4:	4b02      	ldr	r3, [pc, #8]	@ (80092e0 <raise+0xc>)
 80092d6:	4601      	mov	r1, r0
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f7ff bfd3 	b.w	8009284 <_raise_r>
 80092de:	bf00      	nop
 80092e0:	20000018 	.word	0x20000018

080092e4 <_kill_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d07      	ldr	r5, [pc, #28]	@ (8009304 <_kill_r+0x20>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	f7f8 f87b 	bl	80013ec <_kill>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	d102      	bne.n	8009300 <_kill_r+0x1c>
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	b103      	cbz	r3, 8009300 <_kill_r+0x1c>
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	bd38      	pop	{r3, r4, r5, pc}
 8009302:	bf00      	nop
 8009304:	2000049c 	.word	0x2000049c

08009308 <_getpid_r>:
 8009308:	f7f8 b868 	b.w	80013dc <_getpid>

0800930c <__swhatbuf_r>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	2900      	cmp	r1, #0
 8009316:	b096      	sub	sp, #88	@ 0x58
 8009318:	4615      	mov	r5, r2
 800931a:	461e      	mov	r6, r3
 800931c:	da0d      	bge.n	800933a <__swhatbuf_r+0x2e>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009324:	f04f 0100 	mov.w	r1, #0
 8009328:	bf14      	ite	ne
 800932a:	2340      	movne	r3, #64	@ 0x40
 800932c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009330:	2000      	movs	r0, #0
 8009332:	6031      	str	r1, [r6, #0]
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	b016      	add	sp, #88	@ 0x58
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	466a      	mov	r2, sp
 800933c:	f000 f848 	bl	80093d0 <_fstat_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	dbec      	blt.n	800931e <__swhatbuf_r+0x12>
 8009344:	9901      	ldr	r1, [sp, #4]
 8009346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800934a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800934e:	4259      	negs	r1, r3
 8009350:	4159      	adcs	r1, r3
 8009352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009356:	e7eb      	b.n	8009330 <__swhatbuf_r+0x24>

08009358 <__smakebuf_r>:
 8009358:	898b      	ldrh	r3, [r1, #12]
 800935a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800935c:	079d      	lsls	r5, r3, #30
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	d507      	bpl.n	8009374 <__smakebuf_r+0x1c>
 8009364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	2301      	movs	r3, #1
 800936e:	6163      	str	r3, [r4, #20]
 8009370:	b003      	add	sp, #12
 8009372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009374:	ab01      	add	r3, sp, #4
 8009376:	466a      	mov	r2, sp
 8009378:	f7ff ffc8 	bl	800930c <__swhatbuf_r>
 800937c:	9f00      	ldr	r7, [sp, #0]
 800937e:	4605      	mov	r5, r0
 8009380:	4639      	mov	r1, r7
 8009382:	4630      	mov	r0, r6
 8009384:	f7fd fbb8 	bl	8006af8 <_malloc_r>
 8009388:	b948      	cbnz	r0, 800939e <__smakebuf_r+0x46>
 800938a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938e:	059a      	lsls	r2, r3, #22
 8009390:	d4ee      	bmi.n	8009370 <__smakebuf_r+0x18>
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	f043 0302 	orr.w	r3, r3, #2
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	e7e2      	b.n	8009364 <__smakebuf_r+0xc>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	6020      	str	r0, [r4, #0]
 80093a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093ae:	b15b      	cbz	r3, 80093c8 <__smakebuf_r+0x70>
 80093b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b4:	4630      	mov	r0, r6
 80093b6:	f000 f81d 	bl	80093f4 <_isatty_r>
 80093ba:	b128      	cbz	r0, 80093c8 <__smakebuf_r+0x70>
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f023 0303 	bic.w	r3, r3, #3
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	81a3      	strh	r3, [r4, #12]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	431d      	orrs	r5, r3
 80093cc:	81a5      	strh	r5, [r4, #12]
 80093ce:	e7cf      	b.n	8009370 <__smakebuf_r+0x18>

080093d0 <_fstat_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d07      	ldr	r5, [pc, #28]	@ (80093f0 <_fstat_r+0x20>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	4611      	mov	r1, r2
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	f7f8 f865 	bl	80014ac <_fstat>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d102      	bne.n	80093ec <_fstat_r+0x1c>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	b103      	cbz	r3, 80093ec <_fstat_r+0x1c>
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	2000049c 	.word	0x2000049c

080093f4 <_isatty_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d06      	ldr	r5, [pc, #24]	@ (8009410 <_isatty_r+0x1c>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f8 f864 	bl	80014cc <_isatty>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_isatty_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_isatty_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	2000049c 	.word	0x2000049c

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
