
Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008dc0  08008dc0  00009dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009230  08009230  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009230  08009230  0000a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009238  08009238  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800923c  0800923c  0000a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009240  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  08009414  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08009414  0000b444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c351  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  00017555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  000193d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000755  00000000  00000000  00019d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca14  00000000  00000000  0001a4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6a5  00000000  00000000  00036ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5af8  00000000  00000000  00044586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  000ea0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000edc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008da4 	.word	0x08008da4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008da4 	.word	0x08008da4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fbf7 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f853 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f95f 	bl	8000fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d06:	f000 f8a7 	bl	8000e58 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d0a:	f000 f92b 	bl	8000f64 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000d0e:	f000 f8ff 	bl	8000f10 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  int color = 1000;
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	607b      	str	r3, [r7, #4]
  HAL_DAC_Init(&hdac);
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <main+0xa4>)
 8000d1a:	f001 fa20 	bl	800215e <HAL_DAC_Init>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <main+0xa4>)
 8000d22:	f001 fa5d 	bl	80021e0 <HAL_DAC_Start>
//	  HAL_Delay(500);
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(500);

	  //RGB LED
	  while (color <= 3000) {
 8000d26:	e015      	b.n	8000d54 <main+0x60>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, color++);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <main+0xa4>)
 8000d34:	f001 fa35 	bl	80021a2 <HAL_DAC_SetValue>
		  sprintf(message, "%d\r\n", color);
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4918      	ldr	r1, [pc, #96]	@ (8000d9c <main+0xa8>)
 8000d3c:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <main+0xac>)
 8000d3e:	f004 fbf9 	bl	8005534 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
 8000d42:	2364      	movs	r3, #100	@ 0x64
 8000d44:	2214      	movs	r2, #20
 8000d46:	4916      	ldr	r1, [pc, #88]	@ (8000da0 <main+0xac>)
 8000d48:	4816      	ldr	r0, [pc, #88]	@ (8000da4 <main+0xb0>)
 8000d4a:	f003 f8eb 	bl	8003f24 <HAL_UART_Transmit>
		  HAL_Delay(5);
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f000 fc32 	bl	80015b8 <HAL_Delay>
	  while (color <= 3000) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	dde4      	ble.n	8000d28 <main+0x34>
	  }

	  while (color >= 1000) {
 8000d5e:	e015      	b.n	8000d8c <main+0x98>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, color--);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <main+0xa4>)
 8000d6c:	f001 fa19 	bl	80021a2 <HAL_DAC_SetValue>
		  sprintf(message, "%d\r\n", color);
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	490a      	ldr	r1, [pc, #40]	@ (8000d9c <main+0xa8>)
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <main+0xac>)
 8000d76:	f004 fbdd 	bl	8005534 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
 8000d7a:	2364      	movs	r3, #100	@ 0x64
 8000d7c:	2214      	movs	r2, #20
 8000d7e:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <main+0xac>)
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <main+0xb0>)
 8000d82:	f003 f8cf 	bl	8003f24 <HAL_UART_Transmit>
		  HAL_Delay(5);
 8000d86:	2005      	movs	r0, #5
 8000d88:	f000 fc16 	bl	80015b8 <HAL_Delay>
	  while (color >= 1000) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d92:	dae5      	bge.n	8000d60 <main+0x6c>
	  while (color <= 3000) {
 8000d94:	e7de      	b.n	8000d54 <main+0x60>
 8000d96:	bf00      	nop
 8000d98:	20000240 	.word	0x20000240
 8000d9c:	08008dc0 	.word	0x08008dc0
 8000da0:	200002dc 	.word	0x200002dc
 8000da4:	20000254 	.word	0x20000254

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09c      	sub	sp, #112	@ 0x70
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000db2:	2228      	movs	r2, #40	@ 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fc1f 	bl	80055fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2234      	movs	r2, #52	@ 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fc11 	bl	80055fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2310      	movs	r3, #16
 8000de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000df0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fc56 	bl	80026a8 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e02:	f000 f935 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e18:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000e1c:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc7d 	bl	8003724 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f91e 	bl	8001070 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fe8f 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e4c:	f000 f910 	bl	8001070 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3770      	adds	r7, #112	@ 0x70
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e76:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7c:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000eca:	f000 fb99 	bl	8001600 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000ed4:	f000 f8cc 	bl	8001070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_ADC1_Init+0xb4>)
 8000ef6:	f000 fd09 	bl	800190c <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f00:	f000 f8b6 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001f0 	.word	0x200001f0

08000f10 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_DAC_Init+0x4c>)
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <MX_DAC_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <MX_DAC_Init+0x4c>)
 8000f28:	f001 f919 	bl	800215e <HAL_DAC_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000f32:	f000 f89d 	bl	8001070 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_DAC_Init+0x4c>)
 8000f46:	f001 f982 	bl	800224e <HAL_DAC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000f50:	f000 f88e 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000240 	.word	0x20000240
 8000f60:	40007400 	.word	0x40007400

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <MX_USART2_UART_Init+0x5c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f70:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART2_UART_Init+0x58>)
 8000fa8:	f002 ff6e 	bl	8003e88 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f000 f85d 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000254 	.word	0x20000254
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8000fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <MX_GPIO_Init+0xa4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2102      	movs	r1, #2
 800100e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001012:	f001 faf3 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <MX_GPIO_Init+0xa8>)
 800102e:	f001 f95b 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f001 f94c 	bl	80022e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2028      	movs	r0, #40	@ 0x28
 8001056:	f001 f84c 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105a:	2028      	movs	r0, #40	@ 0x28
 800105c:	f001 f865 	bl	800212a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	48000800 	.word	0x48000800

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <Error_Handler+0x8>

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_MspInit+0x44>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <HAL_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_MspInit+0x44>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_MspInit+0x44>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e4:	d124      	bne.n	8001130 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_ADC_MspInit+0x74>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f001 f8dc 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	@ 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <HAL_DAC_MspInit+0x74>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d124      	bne.n	80011a8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 8001164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_DAC_MspInit+0x78>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118e:	2310      	movs	r3, #16
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f001 f8a0 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40007400 	.word	0x40007400
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_UART_MspInit+0x80>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a16      	ldr	r2, [pc, #88]	@ (8001238 <HAL_UART_MspInit+0x80>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_UART_MspInit+0x80>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_UART_MspInit+0x80>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a10      	ldr	r2, [pc, #64]	@ (8001238 <HAL_UART_MspInit+0x80>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_UART_MspInit+0x80>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800120a:	230c      	movs	r3, #12
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121a:	2307      	movs	r3, #7
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001228:	f001 f85e 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40004400 	.word	0x40004400
 8001238:	40021000 	.word	0x40021000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <NMI_Handler+0x4>

08001244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <MemManage_Handler+0x4>

08001254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <UsageFault_Handler+0x4>

08001264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f971 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	for (int i = 0; i < 65535; i++);
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e002      	b.n	80012ae <EXTI15_10_IRQHandler+0x12>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012b4:	4293      	cmp	r3, r2
 80012b6:	ddf7      	ble.n	80012a8 <EXTI15_10_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin)) {
 80012b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <EXTI15_10_IRQHandler+0x48>)
 80012be:	f001 f985 	bl	80025cc <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <EXTI15_10_IRQHandler+0x36>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012c8:	2102      	movs	r1, #2
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f001 f9ad 	bl	800262c <HAL_GPIO_TogglePin>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012d6:	f001 f9c3 	bl	8002660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	48000800 	.word	0x48000800

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001302:	f004 f9cd 	bl	80056a0 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
  return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <_exit+0x12>

0800132e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e00a      	b.n	8001356 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001340:	f3af 8000 	nop.w
 8001344:	4601      	mov	r1, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf0      	blt.n	8001340 <_read+0x12>
  }

  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
  }
  return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_close>:

int _close(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_isatty>:

int _isatty(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f004 f932 	bl	80056a0 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20004000 	.word	0x20004000
 8001468:	00000400 	.word	0x00000400
 800146c:	200002f0 	.word	0x200002f0
 8001470:	20000448 	.word	0x20000448

08001474 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800149c:	f7ff ffea 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a2:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <LoopForever+0xe>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b8:	4c0a      	ldr	r4, [pc, #40]	@ (80014e4 <LoopForever+0x16>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f004 f8f1 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ca:	f7ff fc13 	bl	8000cf4 <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014dc:	08009240 	.word	0x08009240
  ldr r2, =_sbss
 80014e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014e4:	20000444 	.word	0x20000444

080014e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_IRQHandler>
	...

080014ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 fded 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fdb8 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe05 	bl	8002146 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 fdcd 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	200002f4 	.word	0x200002f4

080015a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200002f4 	.word	0x200002f4

080015b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09a      	sub	sp, #104	@ 0x68
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e169      	b.n	80018f4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d176      	bne.n	8001720 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d152      	bne.n	80016e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fd35 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d13b      	bne.n	80016e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fc01 	bl	8001e70 <ADC_Disable>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d12f      	bne.n	80016e0 <HAL_ADC_Init+0xe0>
 8001680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001684:	2b00      	cmp	r3, #0
 8001686:	d12b      	bne.n	80016e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001690:	f023 0302 	bic.w	r3, r3, #2
 8001694:	f043 0202 	orr.w	r2, r3, #2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016bc:	4b8f      	ldr	r3, [pc, #572]	@ (80018fc <HAL_ADC_Init+0x2fc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a8f      	ldr	r2, [pc, #572]	@ (8001900 <HAL_ADC_Init+0x300>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9a      	lsrs	r2, r3, #18
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d2:	e002      	b.n	80016da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f9      	bne.n	80016d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016fc:	d110      	bne.n	8001720 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f023 0312 	bic.w	r3, r3, #18
 8001706:	f043 0210 	orr.w	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 80d6 	bne.w	80018da <HAL_ADC_Init+0x2da>
 800172e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80d1 	bne.w	80018da <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 80c9 	bne.w	80018da <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001758:	4b6a      	ldr	r3, [pc, #424]	@ (8001904 <HAL_ADC_Init+0x304>)
 800175a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_ADC_Init+0x180>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_Init+0x180>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_ADC_Init+0x182>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11c      	bne.n	80017c0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001786:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_ADC_Init+0x1a8>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Init+0x1a8>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_ADC_Init+0x1aa>
 80017a8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017be:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7e5b      	ldrb	r3, [r3, #25]
 80017c4:	035b      	lsls	r3, r3, #13
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017ca:	2a01      	cmp	r2, #1
 80017cc:	d002      	beq.n	80017d4 <HAL_ADC_Init+0x1d4>
 80017ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d2:	e000      	b.n	80017d6 <HAL_ADC_Init+0x1d6>
 80017d4:	2200      	movs	r2, #0
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017e6:	4313      	orrs	r3, r2
 80017e8:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d11b      	bne.n	800182c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e5b      	ldrb	r3, [r3, #25]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	3b01      	subs	r3, #1
 8001802:	045a      	lsls	r2, r3, #17
 8001804:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001806:	4313      	orrs	r3, r2
 8001808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180c:	663b      	str	r3, [r7, #96]	@ 0x60
 800180e:	e00d      	b.n	800182c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	2b01      	cmp	r3, #1
 8001832:	d007      	beq.n	8001844 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	4313      	orrs	r3, r2
 800183e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001840:	4313      	orrs	r3, r2
 8001842:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d114      	bne.n	800187c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001860:	f023 0302 	bic.w	r3, r3, #2
 8001864:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e1b      	ldrb	r3, [r3, #24]
 800186a:	039a      	lsls	r2, r3, #14
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4313      	orrs	r3, r2
 8001876:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001878:	4313      	orrs	r3, r2
 800187a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_ADC_Init+0x308>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800188c:	430b      	orrs	r3, r1
 800188e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10c      	bne.n	80018b2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f023 010f 	bic.w	r1, r3, #15
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80018b0:	e007      	b.n	80018c2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020f 	bic.w	r2, r2, #15
 80018c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f023 0303 	bic.w	r3, r3, #3
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d8:	e00a      	b.n	80018f0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f023 0312 	bic.w	r3, r3, #18
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3768      	adds	r7, #104	@ 0x68
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83
 8001904:	50000300 	.word	0x50000300
 8001908:	fff0c007 	.word	0xfff0c007

0800190c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800190c:	b480      	push	{r7}
 800190e:	b09b      	sub	sp, #108	@ 0x6c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_ConfigChannel+0x22>
 800192a:	2302      	movs	r3, #2
 800192c:	e295      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x54e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8279 	bne.w	8001e38 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d81c      	bhi.n	8001988 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	461a      	mov	r2, r3
 8001962:	231f      	movs	r3, #31
 8001964:	4093      	lsls	r3, r2
 8001966:	43db      	mvns	r3, r3
 8001968:	4019      	ands	r1, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa00 f203 	lsl.w	r2, r0, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
 8001986:	e063      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d81e      	bhi.n	80019ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3b1e      	subs	r3, #30
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4019      	ands	r1, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	3b1e      	subs	r3, #30
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80019cc:	e040      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b0e      	cmp	r3, #14
 80019d4:	d81e      	bhi.n	8001a14 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	3b3c      	subs	r3, #60	@ 0x3c
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	3b3c      	subs	r3, #60	@ 0x3c
 8001a06:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a12:	e01d      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	3b5a      	subs	r3, #90	@ 0x5a
 8001a28:	221f      	movs	r2, #31
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	4019      	ands	r1, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	3b5a      	subs	r3, #90	@ 0x5a
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80e5 	bne.w	8001c2a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	d91c      	bls.n	8001aa2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6999      	ldr	r1, [r3, #24]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4019      	ands	r1, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	3b1e      	subs	r3, #30
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e019      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d84f      	bhi.n	8001b98 <HAL_ADC_ConfigChannel+0x28c>
 8001af8:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <HAL_ADC_ConfigChannel+0x1f4>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b33 	.word	0x08001b33
 8001b08:	08001b55 	.word	0x08001b55
 8001b0c:	08001b77 	.word	0x08001b77
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b16:	4b97      	ldr	r3, [pc, #604]	@ (8001d74 <HAL_ADC_ConfigChannel+0x468>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	0691      	lsls	r1, r2, #26
 8001b20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b22:	430a      	orrs	r2, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b2e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b30:	e07b      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b38:	4b8e      	ldr	r3, [pc, #568]	@ (8001d74 <HAL_ADC_ConfigChannel+0x468>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	0691      	lsls	r1, r2, #26
 8001b42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b44:	430a      	orrs	r2, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b50:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b52:	e06a      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b5a:	4b86      	ldr	r3, [pc, #536]	@ (8001d74 <HAL_ADC_ConfigChannel+0x468>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	0691      	lsls	r1, r2, #26
 8001b64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b66:	430a      	orrs	r2, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b72:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b74:	e059      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b7c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d74 <HAL_ADC_ConfigChannel+0x468>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	0691      	lsls	r1, r2, #26
 8001b86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b94:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b96:	e048      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	069b      	lsls	r3, r3, #26
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d107      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bba:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	069b      	lsls	r3, r3, #26
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bde:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001be6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c02:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	069b      	lsls	r3, r3, #26
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c26:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c28:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x33e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x33e>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x340>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 80fe 	bne.w	8001e4e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d00f      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c78:	e049      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d91c      	bls.n	8001cd6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6999      	ldr	r1, [r3, #24]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1b      	subs	r3, #27
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4019      	ands	r1, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	6898      	ldr	r0, [r3, #8]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b1b      	subs	r3, #27
 8001cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	619a      	str	r2, [r3, #24]
 8001cd4:	e01b      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6959      	ldr	r1, [r3, #20]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2207      	movs	r2, #7
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4019      	ands	r1, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6898      	ldr	r0, [r3, #8]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_ADC_ConfigChannel+0x46c>)
 8001d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d014      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	f040 8085 	bne.w	8001e4e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d17e      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10c      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x470>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x470>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e004      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x472>
 8001d74:	83fff000 	.word	0x83fff000
 8001d78:	50000300 	.word	0x50000300
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d150      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d107      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x498>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x498>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x49a>
 8001da4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d13c      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d11d      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x4e2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dba:	d118      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc8:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_ADC_ConfigChannel+0x55c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_ADC_ConfigChannel+0x560>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9a      	lsrs	r2, r3, #18
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dec:	e02e      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b11      	cmp	r3, #17
 8001df4:	d10b      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x502>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e0a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e0c:	e01e      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d11a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e20:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e22:	e013      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e36:	e00a      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001e4a:	e000      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e4c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	376c      	adds	r7, #108	@ 0x6c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	431bde83 	.word	0x431bde83

08001e70 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <ADC_Disable+0x2c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <ADC_Disable+0x2c>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <ADC_Disable+0x2e>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d047      	beq.n	8001f32 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030d 	and.w	r3, r3, #13
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10f      	bne.n	8001ed0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0202 	orr.w	r2, r2, #2
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff fb6a 	bl	80015a0 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ece:	e029      	b.n	8001f24 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e023      	b.n	8001f34 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eec:	f7ff fb58 	bl	80015a0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d914      	bls.n	8001f24 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10d      	bne.n	8001f24 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f043 0210 	orr.w	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e007      	b.n	8001f34 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d0dc      	beq.n	8001eec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e014      	b.n	800219a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe ffdb 	bl	800113c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	3308      	adds	r3, #8
 80021c8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	461a      	mov	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	795b      	ldrb	r3, [r3, #5]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_DAC_Start+0x16>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e025      	b.n	8002242 <HAL_DAC_Start+0x62>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	409a      	lsls	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002220:	2b3c      	cmp	r3, #60	@ 0x3c
 8002222:	d107      	bne.n	8002234 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	795b      	ldrb	r3, [r3, #5]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_DAC_ConfigChannel+0x20>
 800226a:	2302      	movs	r3, #2
 800226c:	e036      	b.n	80022dc <HAL_DAC_ConfigChannel+0x8e>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2202      	movs	r2, #2
 8002278:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002282:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	22c0      	movs	r2, #192	@ 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e14e      	b.n	8002596 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8140 	beq.w	8002590 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x40>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d017      	beq.n	80023c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 809a 	beq.w	8002590 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	4b55      	ldr	r3, [pc, #340]	@ (80025b4 <HAL_GPIO_Init+0x2cc>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a54      	ldr	r2, [pc, #336]	@ (80025b4 <HAL_GPIO_Init+0x2cc>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_GPIO_Init+0x2cc>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002474:	4a50      	ldr	r2, [pc, #320]	@ (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800249e:	d013      	beq.n	80024c8 <HAL_GPIO_Init+0x1e0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <HAL_GPIO_Init+0x2d4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00d      	beq.n	80024c4 <HAL_GPIO_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a45      	ldr	r2, [pc, #276]	@ (80025c0 <HAL_GPIO_Init+0x2d8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d007      	beq.n	80024c0 <HAL_GPIO_Init+0x1d8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a44      	ldr	r2, [pc, #272]	@ (80025c4 <HAL_GPIO_Init+0x2dc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_GPIO_Init+0x1d4>
 80024b8:	2303      	movs	r3, #3
 80024ba:	e006      	b.n	80024ca <HAL_GPIO_Init+0x1e2>
 80024bc:	2305      	movs	r3, #5
 80024be:	e004      	b.n	80024ca <HAL_GPIO_Init+0x1e2>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_Init+0x1e2>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_GPIO_Init+0x1e2>
 80024c8:	2300      	movs	r3, #0
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	f002 0203 	and.w	r2, r2, #3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4093      	lsls	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024da:	4937      	ldr	r1, [pc, #220]	@ (80025b8 <HAL_GPIO_Init+0x2d0>)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800250c:	4a2e      	ldr	r2, [pc, #184]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002512:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002536:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800258a:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <HAL_GPIO_Init+0x2e0>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f aea9 	bne.w	80022f8 <HAL_GPIO_Init+0x10>
  }
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000
 80025bc:	48000400 	.word	0x48000400
 80025c0:	48000800 	.word	0x48000800
 80025c4:	48000c00 	.word	0x48000c00
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002618:	e002      	b.n	8002620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43d9      	mvns	r1, r3
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	400b      	ands	r3, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f806 	bl	8002690 <HAL_GPIO_EXTI_Callback>
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f001 b823 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 817d 	beq.w	80029de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026e4:	4bbc      	ldr	r3, [pc, #752]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d00c      	beq.n	800270a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f0:	4bb9      	ldr	r3, [pc, #740]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d15c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x10e>
 80026fc:	4bb6      	ldr	r3, [pc, #728]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002708:	d155      	bne.n	80027b6 <HAL_RCC_OscConfig+0x10e>
 800270a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_OscConfig+0x94>
 8002736:	4ba8      	ldr	r3, [pc, #672]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0xc0>
 800273c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002740:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002750:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002754:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002758:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002764:	4b9c      	ldr	r3, [pc, #624]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800276c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002770:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800277c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 811f 	beq.w	80029dc <HAL_RCC_OscConfig+0x334>
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8116 	bne.w	80029dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f000 bfaf 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12e>
 80027c8:	4b83      	ldr	r3, [pc, #524]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a82      	ldr	r2, [pc, #520]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e036      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x158>
 80027e6:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7b      	ldr	r2, [pc, #492]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b79      	ldr	r3, [pc, #484]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a78      	ldr	r2, [pc, #480]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e021      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x184>
 8002812:	4b71      	ldr	r3, [pc, #452]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a70      	ldr	r2, [pc, #448]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6e      	ldr	r3, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6d      	ldr	r2, [pc, #436]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 800282c:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a69      	ldr	r2, [pc, #420]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a66      	ldr	r2, [pc, #408]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002842:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	f023 020f 	bic.w	r2, r3, #15
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	495f      	ldr	r1, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 800285a:	4313      	orrs	r3, r2
 800285c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d059      	beq.n	8002922 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fe97 	bl	80015a0 <HAL_GetTick>
 8002872:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fe92 	bl	80015a0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	@ 0x64
 8002886:	d902      	bls.n	800288e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	f000 bf43 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 800288e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002892:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80028a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x218>
 80028ba:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x244>
 80028c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028c4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80028d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80028dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028e8:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002900:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ab      	beq.n	8002878 <HAL_RCC_OscConfig+0x1d0>
 8002920:	e05d      	b.n	80029de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe fe3d 	bl	80015a0 <HAL_GetTick>
 8002926:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fe38 	bl	80015a0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	@ 0x64
 800293a:	d902      	bls.n	8002942 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	f000 bee9 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002946:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002956:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_OscConfig+0x2cc>
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e015      	b.n	80029a0 <HAL_RCC_OscConfig+0x2f8>
 8002974:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002978:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002988:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800298c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002990:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_RCC_OscConfig+0x330>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029a4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80029a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80029ac:	fa92 f2a2 	rbit	r2, r2
 80029b0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80029b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80029b8:	fab2 f282 	clz	r2, r2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f002 021f 	and.w	r2, r2, #31
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ab      	bne.n	800292c <HAL_RCC_OscConfig+0x284>
 80029d4:	e003      	b.n	80029de <HAL_RCC_OscConfig+0x336>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 817d 	beq.w	8002cee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f4:	4ba6      	ldr	r3, [pc, #664]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a00:	4ba3      	ldr	r3, [pc, #652]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d172      	bne.n	8002af2 <HAL_RCC_OscConfig+0x44a>
 8002a0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d16c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x44a>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x3a0>
 8002a42:	4b93      	ldr	r3, [pc, #588]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c8>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a60:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a6c:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	2202      	movs	r2, #2
 8002a72:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a76:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a82:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x410>
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 be2e 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b75      	ldr	r3, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	21f8      	movs	r1, #248	@ 0xf8
 8002ace:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ad6:	fa91 f1a1 	rbit	r1, r1
 8002ada:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002ade:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002ae2:	fab1 f181 	clz	r1, r1
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	408b      	lsls	r3, r1
 8002aea:	4969      	ldr	r1, [pc, #420]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af0:	e0fd      	b.n	8002cee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8088 	beq.w	8002c14 <HAL_RCC_OscConfig+0x56c>
 8002b04:	2301      	movs	r3, #1
 8002b06:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b16:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fd36 	bl	80015a0 <HAL_GetTick>
 8002b34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fd31 	bl	80015a0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f000 bde2 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b62:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d8>
 8002b7a:	4b45      	ldr	r3, [pc, #276]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x500>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b98:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002bae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002bba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0af      	beq.n	8002b3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	21f8      	movs	r1, #248	@ 0xf8
 8002bf0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002bf8:	fa91 f1a1 	rbit	r1, r1
 8002bfc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c00:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c04:	fab1 f181 	clz	r1, r1
 8002c08:	b2c9      	uxtb	r1, r1
 8002c0a:	408b      	lsls	r3, r1
 8002c0c:	4920      	ldr	r1, [pc, #128]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
 8002c12:	e06c      	b.n	8002cee <HAL_RCC_OscConfig+0x646>
 8002c14:	2301      	movs	r3, #1
 8002c16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fcae 	bl	80015a0 <HAL_GetTick>
 8002c44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fca9 	bl	80015a0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d902      	bls.n	8002c60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	f000 bd5a 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5ec>
 8002c8a:	4b01      	ldr	r3, [pc, #4]	@ (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_OscConfig+0x614>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002cac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002cb8:	4bc8      	ldr	r3, [pc, #800]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002cc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002cc6:	fa92 f2a2 	rbit	r2, r2
 8002cca:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002cce:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ad      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8110 	beq.w	8002f24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d079      	beq.n	8002e08 <HAL_RCC_OscConfig+0x760>
 8002d14:	2301      	movs	r3, #1
 8002d16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4bab      	ldr	r3, [pc, #684]	@ (8002fe0 <HAL_RCC_OscConfig+0x938>)
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fc2f 	bl	80015a0 <HAL_GetTick>
 8002d42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fc2a 	bl	80015a0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d902      	bls.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f000 bcdb 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d78:	2202      	movs	r2, #2
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002db6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db8:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	6019      	str	r1, [r3, #0]
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f1a3 	rbit	r1, r3
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002dde:	6019      	str	r1, [r3, #0]
  return result;
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0a0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x6a0>
 8002e06:	e08d      	b.n	8002f24 <HAL_RCC_OscConfig+0x87c>
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b68      	ldr	r3, [pc, #416]	@ (8002fe0 <HAL_RCC_OscConfig+0x938>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	2300      	movs	r3, #0
 8002e48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fba9 	bl	80015a0 <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fba4 	bl	80015a0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d902      	bls.n	8002e6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f000 bc55 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ed4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed6:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	6019      	str	r1, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f1a3 	rbit	r1, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002efc:	6019      	str	r1, [r3, #0]
  return result;
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d197      	bne.n	8002e54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 81a1 	beq.w	800327c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f40:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
 8002f58:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11a      	bne.n	8002fbc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fb05 	bl	80015a0 <HAL_GetTick>
 8002f96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe fb00 	bl	80015a0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	@ 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e3b1      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x940>
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	@ (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e03c      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	10908120 	.word	0x10908120
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x96a>
 8002ff8:	4bc1      	ldr	r3, [pc, #772]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4ac0      	ldr	r2, [pc, #768]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4bbe      	ldr	r3, [pc, #760]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4abd      	ldr	r2, [pc, #756]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e020      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x994>
 8003022:	4bb7      	ldr	r3, [pc, #732]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4ab6      	ldr	r2, [pc, #728]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	4bb4      	ldr	r3, [pc, #720]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4ab3      	ldr	r2, [pc, #716]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 800303c:	4bb0      	ldr	r3, [pc, #704]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4aaf      	ldr	r2, [pc, #700]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	4bad      	ldr	r3, [pc, #692]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4aac      	ldr	r2, [pc, #688]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8081 	beq.w	8003168 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe fa9b 	bl	80015a0 <HAL_GetTick>
 800306a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fa96 	bl	80015a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e345      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030ce:	601a      	str	r2, [r3, #0]
  return result;
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d102      	bne.n	80030f4 <HAL_RCC_OscConfig+0xa4c>
 80030ee:	4b84      	ldr	r3, [pc, #528]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	e013      	b.n	800311c <HAL_RCC_OscConfig+0xa74>
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b79      	ldr	r3, [pc, #484]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003120:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003124:	2102      	movs	r1, #2
 8003126:	6011      	str	r1, [r2, #0]
 8003128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800312c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fa92 f1a2 	rbit	r1, r2
 8003136:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800313a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800313e:	6011      	str	r1, [r2, #0]
  return result;
 8003140:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003144:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	fab2 f282 	clz	r2, r2
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f002 021f 	and.w	r2, r2, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d084      	beq.n	8003070 <HAL_RCC_OscConfig+0x9c8>
 8003166:	e07f      	b.n	8003268 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe fa1a 	bl	80015a0 <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe fa15 	bl	80015a0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e2c4      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 800318a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031d0:	601a      	str	r2, [r3, #0]
  return result;
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_OscConfig+0xb4e>
 80031f0:	4b43      	ldr	r3, [pc, #268]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	e013      	b.n	800321e <HAL_RCC_OscConfig+0xb76>
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003222:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003226:	2102      	movs	r1, #2
 8003228:	6011      	str	r1, [r2, #0]
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fa92 f1a2 	rbit	r1, r2
 8003238:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003240:	6011      	str	r1, [r2, #0]
  return result;
 8003242:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003246:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f002 021f 	and.w	r2, r2, #31
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f202 	lsl.w	r2, r1, r2
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d184      	bne.n	8003172 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003268:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4a22      	ldr	r2, [pc, #136]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003280:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8242 	beq.w	8003712 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	f000 8213 	beq.w	80036c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f040 8162 	bne.w	8003572 <HAL_RCC_OscConfig+0xeca>
 80032ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f954 	bl	80015a0 <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_OscConfig+0xc70>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f94c 	bl	80015a0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1fd      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 8003318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003320:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003338:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003346:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0xcba>
 800335c:	4bb0      	ldr	r3, [pc, #704]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	e027      	b.n	80033b2 <HAL_RCC_OscConfig+0xd0a>
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800336a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003390:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033be:	6011      	str	r1, [r2, #0]
 80033c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	fa92 f1a2 	rbit	r1, r2
 80033ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033d2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033d6:	6011      	str	r1, [r2, #0]
  return result;
 80033d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033dc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	fab2 f282 	clz	r2, r2
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f002 021f 	and.w	r2, r2, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d182      	bne.n	8003304 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fe:	4b88      	ldr	r3, [pc, #544]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	430b      	orrs	r3, r1
 8003420:	497f      	ldr	r1, [pc, #508]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800342e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800344a:	601a      	str	r2, [r3, #0]
  return result;
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003454:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003460:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe f898 	bl	80015a0 <HAL_GetTick>
 8003470:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	e009      	b.n	800348a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe f893 	bl	80015a0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e144      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 800348a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003492:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034aa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_OscConfig+0xe2c>
 80034ce:	4b54      	ldr	r3, [pc, #336]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e027      	b.n	8003524 <HAL_RCC_OscConfig+0xe7c>
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003502:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b3f      	ldr	r3, [pc, #252]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003528:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800352c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003536:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fa92 f1a2 	rbit	r1, r2
 8003540:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003544:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003548:	6011      	str	r1, [r2, #0]
  return result;
 800354a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d082      	beq.n	8003476 <HAL_RCC_OscConfig+0xdce>
 8003570:	e0cf      	b.n	8003712 <HAL_RCC_OscConfig+0x106a>
 8003572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003576:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800357a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fff2 	bl	80015a0 <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	e009      	b.n	80035d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd ffed 	bl	80015a0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e09e      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003604:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d104      	bne.n	8003624 <HAL_RCC_OscConfig+0xf7c>
 800361a:	4b01      	ldr	r3, [pc, #4]	@ (8003620 <HAL_RCC_OscConfig+0xf78>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e029      	b.n	8003674 <HAL_RCC_OscConfig+0xfcc>
 8003620:	40021000 	.word	0x40021000
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800362c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003652:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	4b2b      	ldr	r3, [pc, #172]	@ (8003720 <HAL_RCC_OscConfig+0x1078>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003678:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800367c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003680:	6011      	str	r1, [r2, #0]
 8003682:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003686:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fa92 f1a2 	rbit	r1, r2
 8003690:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003694:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003698:	6011      	str	r1, [r2, #0]
  return result;
 800369a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d180      	bne.n	80035c2 <HAL_RCC_OscConfig+0xf1a>
 80036c0:	e027      	b.n	8003712 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e01e      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d6:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <HAL_RCC_OscConfig+0x1078>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036e2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d10b      	bne.n	800370e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b09e      	sub	sp, #120	@ 0x78
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e162      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b90      	ldr	r3, [pc, #576]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b8d      	ldr	r3, [pc, #564]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	498b      	ldr	r1, [pc, #556]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b89      	ldr	r3, [pc, #548]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e14a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b82      	ldr	r3, [pc, #520]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	497f      	ldr	r1, [pc, #508]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80dc 	beq.w	8003950 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d13c      	bne.n	800381a <HAL_RCC_ClockConfig+0xf6>
 80037a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_ClockConfig+0xa6>
 80037c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e00f      	b.n	80037ea <HAL_RCC_ClockConfig+0xc6>
 80037ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037e6:	4b67      	ldr	r3, [pc, #412]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80037f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037fa:	fab2 f282 	clz	r2, r2
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f042 0220 	orr.w	r2, r2, #32
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f002 021f 	and.w	r2, r2, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d17b      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0f3      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d13c      	bne.n	800389c <HAL_RCC_ClockConfig+0x178>
 8003822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003826:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_RCC_ClockConfig+0x128>
 8003846:	4b4f      	ldr	r3, [pc, #316]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e00f      	b.n	800386c <HAL_RCC_ClockConfig+0x148>
 800384c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003850:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	647b      	str	r3, [r7, #68]	@ 0x44
 800385a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003868:	4b46      	ldr	r3, [pc, #280]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003870:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800387a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800387c:	fab2 f282 	clz	r2, r2
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f042 0220 	orr.w	r2, r2, #32
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f002 021f 	and.w	r2, r2, #31
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f202 	lsl.w	r2, r1, r2
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13a      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b2      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
 800389c:	2302      	movs	r3, #2
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x1a0>
 80038be:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e00d      	b.n	80038e0 <HAL_RCC_ClockConfig+0x1bc>
 80038c4:	2302      	movs	r3, #2
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	2202      	movs	r2, #2
 80038e2:	61ba      	str	r2, [r7, #24]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	fa92 f2a2 	rbit	r2, r2
 80038ea:	617a      	str	r2, [r7, #20]
  return result;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	fab2 f282 	clz	r2, r2
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	f002 021f 	and.w	r2, r2, #31
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e079      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	491a      	ldr	r1, [pc, #104]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd fe3e 	bl	80015a0 <HAL_GetTick>
 8003924:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fd fe3a 	bl	80015a0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e061      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d214      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4906      	ldr	r1, [pc, #24]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e040      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
 8003980:	40022000 	.word	0x40022000
 8003984:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	491a      	ldr	r1, [pc, #104]	@ (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4912      	ldr	r1, [pc, #72]	@ (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039c6:	f000 f829 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d4:	22f0      	movs	r2, #240	@ 0xf0
 80039d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	fa92 f2a2 	rbit	r2, r2
 80039de:	60fa      	str	r2, [r7, #12]
  return result;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	fab2 f282 	clz	r2, r2
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	40d3      	lsrs	r3, r2
 80039ea:	4a09      	ldr	r2, [pc, #36]	@ (8003a10 <HAL_RCC_ClockConfig+0x2ec>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	fa21 f303 	lsr.w	r3, r1, r3
 80039f2:	4a08      	ldr	r2, [pc, #32]	@ (8003a14 <HAL_RCC_ClockConfig+0x2f0>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <HAL_RCC_ClockConfig+0x2f4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fd8c 	bl	8001518 <HAL_InitTick>
  
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3778      	adds	r7, #120	@ 0x78
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	08008dc8 	.word	0x08008dc8
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a36:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d002      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x30>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x36>
 8003a4a:	e026      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4e:	613b      	str	r3, [r7, #16]
      break;
 8003a50:	e026      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	0c9b      	lsrs	r3, r3, #18
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a78:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e004      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a9c:	613b      	str	r3, [r7, #16]
      break;
 8003a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa0:	693b      	ldr	r3, [r7, #16]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	007a1200 	.word	0x007a1200
 8003ab8:	08008de0 	.word	0x08008de0
 8003abc:	08008df0 	.word	0x08008df0
 8003ac0:	003d0900 	.word	0x003d0900

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ae2:	f7ff ffef 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003af0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	fa92 f2a2 	rbit	r2, r2
 8003afc:	603a      	str	r2, [r7, #0]
  return result;
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08008dd8 	.word	0x08008dd8

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b26:	f7ff ffcd 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003b34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003b38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	fa92 f2a2 	rbit	r2, r2
 8003b40:	603a      	str	r2, [r7, #0]
  return result;
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	40d3      	lsrs	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08008dd8 	.word	0x08008dd8

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b092      	sub	sp, #72	@ 0x48
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80d4 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b88:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	61d3      	str	r3, [r2, #28]
 8003ba0:	4b48      	ldr	r3, [pc, #288]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b45      	ldr	r3, [pc, #276]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7fd fce9 	bl	80015a0 <HAL_GetTick>
 8003bce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7fd fce5 	bl	80015a0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	@ 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e14b      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf0:	4b34      	ldr	r3, [pc, #208]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8084 	beq.w	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d07c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04b      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fc95 	bl	80015a0 <HAL_GetTick>
 8003c76:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fc91 	bl	80015a0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0f5      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c90:	2302      	movs	r3, #2
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cbe:	4b01      	ldr	r3, [pc, #4]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	10908100 	.word	0x10908100
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	4b69      	ldr	r3, [pc, #420]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	60fa      	str	r2, [r7, #12]
  return result;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0b7      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495b      	ldr	r1, [pc, #364]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b57      	ldr	r3, [pc, #348]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a56      	ldr	r2, [pc, #344]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3c:	4b51      	ldr	r3, [pc, #324]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	494e      	ldr	r1, [pc, #312]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f023 0210 	bic.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4947      	ldr	r1, [pc, #284]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d78:	4b42      	ldr	r3, [pc, #264]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	493f      	ldr	r1, [pc, #252]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d96:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f023 0220 	bic.w	r2, r3, #32
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4938      	ldr	r1, [pc, #224]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db4:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	4930      	ldr	r1, [pc, #192]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4929      	ldr	r1, [pc, #164]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003df0:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4921      	ldr	r1, [pc, #132]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	491a      	ldr	r1, [pc, #104]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e2c:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	4912      	ldr	r1, [pc, #72]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	490b      	ldr	r1, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3748      	adds	r7, #72	@ 0x48
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e040      	b.n	8003f1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd f984 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	@ 0x24
 8003eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9e8 	bl	80042a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8af 	bl	8004038 <UART_SetConfig>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e01b      	b.n	8003f1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa67 	bl	80043e8 <UART_CheckIdleState>
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d177      	bne.n	800402c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Transmit+0x24>
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e070      	b.n	800402e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2221      	movs	r2, #33	@ 0x21
 8003f58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fb21 	bl	80015a0 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f78:	d108      	bne.n	8003f8c <HAL_UART_Transmit+0x68>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e003      	b.n	8003f94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f94:	e02f      	b.n	8003ff6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2180      	movs	r1, #128	@ 0x80
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fac9 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e03b      	b.n	800402e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	3302      	adds	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e007      	b.n	8003fe4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1c9      	bne.n	8003f96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2140      	movs	r1, #64	@ 0x40
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fa93 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e005      	b.n	800402e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b8a      	ldr	r3, [pc, #552]	@ (800428c <UART_SetConfig+0x254>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	430b      	orrs	r3, r1
 800406e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a78      	ldr	r2, [pc, #480]	@ (8004290 <UART_SetConfig+0x258>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d120      	bne.n	80040f6 <UART_SetConfig+0xbe>
 80040b4:	4b77      	ldr	r3, [pc, #476]	@ (8004294 <UART_SetConfig+0x25c>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d817      	bhi.n	80040f0 <UART_SetConfig+0xb8>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <UART_SetConfig+0x90>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e5 	.word	0x080040e5
 80040d0:	080040eb 	.word	0x080040eb
 80040d4:	080040df 	.word	0x080040df
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e01d      	b.n	800411a <UART_SetConfig+0xe2>
 80040de:	2302      	movs	r3, #2
 80040e0:	77fb      	strb	r3, [r7, #31]
 80040e2:	e01a      	b.n	800411a <UART_SetConfig+0xe2>
 80040e4:	2304      	movs	r3, #4
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e017      	b.n	800411a <UART_SetConfig+0xe2>
 80040ea:	2308      	movs	r3, #8
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e014      	b.n	800411a <UART_SetConfig+0xe2>
 80040f0:	2310      	movs	r3, #16
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e011      	b.n	800411a <UART_SetConfig+0xe2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a67      	ldr	r2, [pc, #412]	@ (8004298 <UART_SetConfig+0x260>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d102      	bne.n	8004106 <UART_SetConfig+0xce>
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e009      	b.n	800411a <UART_SetConfig+0xe2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a64      	ldr	r2, [pc, #400]	@ (800429c <UART_SetConfig+0x264>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d102      	bne.n	8004116 <UART_SetConfig+0xde>
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e001      	b.n	800411a <UART_SetConfig+0xe2>
 8004116:	2310      	movs	r3, #16
 8004118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004122:	d15a      	bne.n	80041da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004124:	7ffb      	ldrb	r3, [r7, #31]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d827      	bhi.n	800417a <UART_SetConfig+0x142>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <UART_SetConfig+0xf8>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004155 	.word	0x08004155
 8004134:	0800415d 	.word	0x0800415d
 8004138:	08004165 	.word	0x08004165
 800413c:	0800417b 	.word	0x0800417b
 8004140:	0800416b 	.word	0x0800416b
 8004144:	0800417b 	.word	0x0800417b
 8004148:	0800417b 	.word	0x0800417b
 800414c:	0800417b 	.word	0x0800417b
 8004150:	08004173 	.word	0x08004173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7ff fcc2 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8004158:	61b8      	str	r0, [r7, #24]
        break;
 800415a:	e013      	b.n	8004184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7ff fce0 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8004160:	61b8      	str	r0, [r7, #24]
        break;
 8004162:	e00f      	b.n	8004184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004164:	4b4e      	ldr	r3, [pc, #312]	@ (80042a0 <UART_SetConfig+0x268>)
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e00c      	b.n	8004184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7ff fc57 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 800416e:	61b8      	str	r0, [r7, #24]
        break;
 8004170:	e008      	b.n	8004184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004176:	61bb      	str	r3, [r7, #24]
        break;
 8004178:	e004      	b.n	8004184 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	77bb      	strb	r3, [r7, #30]
        break;
 8004182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d074      	beq.n	8004274 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	005a      	lsls	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	d916      	bls.n	80041d4 <UART_SetConfig+0x19c>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d212      	bcs.n	80041d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f023 030f 	bic.w	r3, r3, #15
 80041b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	89fb      	ldrh	r3, [r7, #14]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	89fa      	ldrh	r2, [r7, #14]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e04f      	b.n	8004274 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	77bb      	strb	r3, [r7, #30]
 80041d8:	e04c      	b.n	8004274 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d828      	bhi.n	8004232 <UART_SetConfig+0x1fa>
 80041e0:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <UART_SetConfig+0x1b0>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004223 	.word	0x08004223
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
 8004208:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7ff fc66 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8004210:	61b8      	str	r0, [r7, #24]
        break;
 8004212:	e013      	b.n	800423c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7ff fc84 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8004218:	61b8      	str	r0, [r7, #24]
        break;
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <UART_SetConfig+0x268>)
 800421e:	61bb      	str	r3, [r7, #24]
        break;
 8004220:	e00c      	b.n	800423c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7ff fbfb 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8004226:	61b8      	str	r0, [r7, #24]
        break;
 8004228:	e008      	b.n	800423c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e004      	b.n	800423c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	77bb      	strb	r3, [r7, #30]
        break;
 800423a:	bf00      	nop
    }

    if (pclk != 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	085a      	lsrs	r2, r3, #1
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	441a      	add	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b0f      	cmp	r3, #15
 800425a:	d909      	bls.n	8004270 <UART_SetConfig+0x238>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004262:	d205      	bcs.n	8004270 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	e001      	b.n	8004274 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004280:	7fbb      	ldrb	r3, [r7, #30]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	efff69f3 	.word	0xefff69f3
 8004290:	40013800 	.word	0x40013800
 8004294:	40021000 	.word	0x40021000
 8004298:	40004400 	.word	0x40004400
 800429c:	40004800 	.word	0x40004800
 80042a0:	007a1200 	.word	0x007a1200

080042a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01a      	beq.n	80043ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a2:	d10a      	bne.n	80043ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b098      	sub	sp, #96	@ 0x60
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f8:	f7fd f8d2 	bl	80015a0 <HAL_GetTick>
 80043fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d12e      	bne.n	800446a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	2200      	movs	r2, #0
 8004416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f88c 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d021      	beq.n	800446a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800444a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e062      	b.n	8004530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d149      	bne.n	800450c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f856 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03c      	beq.n	800450c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	623b      	str	r3, [r7, #32]
   return(result);
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e4:	61fa      	str	r2, [r7, #28]
 80044e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	617b      	str	r3, [r7, #20]
   return(result);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e011      	b.n	8004530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3758      	adds	r7, #88	@ 0x58
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	e04f      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d04b      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fd f825 	bl	80015a0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <UART_WaitOnFlagUntilTimeout+0x30>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e04e      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d037      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d034      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d031      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d110      	bne.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2208      	movs	r2, #8
 800459a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f838 	bl	8004612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2208      	movs	r2, #8
 80045a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e029      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c4:	d111      	bne.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f81e 	bl	8004612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e00f      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	429a      	cmp	r2, r3
 8004606:	d0a0      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004612:	b480      	push	{r7}
 8004614:	b095      	sub	sp, #84	@ 0x54
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	643b      	str	r3, [r7, #64]	@ 0x40
 800463a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800463e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800466c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004684:	2b01      	cmp	r3, #1
 8004686:	d118      	bne.n	80046ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	60bb      	str	r3, [r7, #8]
   return(result);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f023 0310 	bic.w	r3, r3, #16
 800469c:	647b      	str	r3, [r7, #68]	@ 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e6      	bne.n	8004688 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ce:	bf00      	nop
 80046d0:	3754      	adds	r7, #84	@ 0x54
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <__cvt>:
 80046da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046de:	ec57 6b10 	vmov	r6, r7, d0
 80046e2:	2f00      	cmp	r7, #0
 80046e4:	460c      	mov	r4, r1
 80046e6:	4619      	mov	r1, r3
 80046e8:	463b      	mov	r3, r7
 80046ea:	bfbb      	ittet	lt
 80046ec:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80046f0:	461f      	movlt	r7, r3
 80046f2:	2300      	movge	r3, #0
 80046f4:	232d      	movlt	r3, #45	@ 0x2d
 80046f6:	700b      	strb	r3, [r1, #0]
 80046f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046fa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80046fe:	4691      	mov	r9, r2
 8004700:	f023 0820 	bic.w	r8, r3, #32
 8004704:	bfbc      	itt	lt
 8004706:	4632      	movlt	r2, r6
 8004708:	4616      	movlt	r6, r2
 800470a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800470e:	d005      	beq.n	800471c <__cvt+0x42>
 8004710:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004714:	d100      	bne.n	8004718 <__cvt+0x3e>
 8004716:	3401      	adds	r4, #1
 8004718:	2102      	movs	r1, #2
 800471a:	e000      	b.n	800471e <__cvt+0x44>
 800471c:	2103      	movs	r1, #3
 800471e:	ab03      	add	r3, sp, #12
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	ab02      	add	r3, sp, #8
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	ec47 6b10 	vmov	d0, r6, r7
 800472a:	4653      	mov	r3, sl
 800472c:	4622      	mov	r2, r4
 800472e:	f001 f873 	bl	8005818 <_dtoa_r>
 8004732:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004736:	4605      	mov	r5, r0
 8004738:	d119      	bne.n	800476e <__cvt+0x94>
 800473a:	f019 0f01 	tst.w	r9, #1
 800473e:	d00e      	beq.n	800475e <__cvt+0x84>
 8004740:	eb00 0904 	add.w	r9, r0, r4
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	4630      	mov	r0, r6
 800474a:	4639      	mov	r1, r7
 800474c:	f7fc f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004750:	b108      	cbz	r0, 8004756 <__cvt+0x7c>
 8004752:	f8cd 900c 	str.w	r9, [sp, #12]
 8004756:	2230      	movs	r2, #48	@ 0x30
 8004758:	9b03      	ldr	r3, [sp, #12]
 800475a:	454b      	cmp	r3, r9
 800475c:	d31e      	bcc.n	800479c <__cvt+0xc2>
 800475e:	9b03      	ldr	r3, [sp, #12]
 8004760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004762:	1b5b      	subs	r3, r3, r5
 8004764:	4628      	mov	r0, r5
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	b004      	add	sp, #16
 800476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004772:	eb00 0904 	add.w	r9, r0, r4
 8004776:	d1e5      	bne.n	8004744 <__cvt+0x6a>
 8004778:	7803      	ldrb	r3, [r0, #0]
 800477a:	2b30      	cmp	r3, #48	@ 0x30
 800477c:	d10a      	bne.n	8004794 <__cvt+0xba>
 800477e:	2200      	movs	r2, #0
 8004780:	2300      	movs	r3, #0
 8004782:	4630      	mov	r0, r6
 8004784:	4639      	mov	r1, r7
 8004786:	f7fc f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800478a:	b918      	cbnz	r0, 8004794 <__cvt+0xba>
 800478c:	f1c4 0401 	rsb	r4, r4, #1
 8004790:	f8ca 4000 	str.w	r4, [sl]
 8004794:	f8da 3000 	ldr.w	r3, [sl]
 8004798:	4499      	add	r9, r3
 800479a:	e7d3      	b.n	8004744 <__cvt+0x6a>
 800479c:	1c59      	adds	r1, r3, #1
 800479e:	9103      	str	r1, [sp, #12]
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e7d9      	b.n	8004758 <__cvt+0x7e>

080047a4 <__exponent>:
 80047a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047a6:	2900      	cmp	r1, #0
 80047a8:	bfba      	itte	lt
 80047aa:	4249      	neglt	r1, r1
 80047ac:	232d      	movlt	r3, #45	@ 0x2d
 80047ae:	232b      	movge	r3, #43	@ 0x2b
 80047b0:	2909      	cmp	r1, #9
 80047b2:	7002      	strb	r2, [r0, #0]
 80047b4:	7043      	strb	r3, [r0, #1]
 80047b6:	dd29      	ble.n	800480c <__exponent+0x68>
 80047b8:	f10d 0307 	add.w	r3, sp, #7
 80047bc:	461d      	mov	r5, r3
 80047be:	270a      	movs	r7, #10
 80047c0:	461a      	mov	r2, r3
 80047c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80047c6:	fb07 1416 	mls	r4, r7, r6, r1
 80047ca:	3430      	adds	r4, #48	@ 0x30
 80047cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047d0:	460c      	mov	r4, r1
 80047d2:	2c63      	cmp	r4, #99	@ 0x63
 80047d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80047d8:	4631      	mov	r1, r6
 80047da:	dcf1      	bgt.n	80047c0 <__exponent+0x1c>
 80047dc:	3130      	adds	r1, #48	@ 0x30
 80047de:	1e94      	subs	r4, r2, #2
 80047e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047e4:	1c41      	adds	r1, r0, #1
 80047e6:	4623      	mov	r3, r4
 80047e8:	42ab      	cmp	r3, r5
 80047ea:	d30a      	bcc.n	8004802 <__exponent+0x5e>
 80047ec:	f10d 0309 	add.w	r3, sp, #9
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	42ac      	cmp	r4, r5
 80047f4:	bf88      	it	hi
 80047f6:	2300      	movhi	r3, #0
 80047f8:	3302      	adds	r3, #2
 80047fa:	4403      	add	r3, r0
 80047fc:	1a18      	subs	r0, r3, r0
 80047fe:	b003      	add	sp, #12
 8004800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004802:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004806:	f801 6f01 	strb.w	r6, [r1, #1]!
 800480a:	e7ed      	b.n	80047e8 <__exponent+0x44>
 800480c:	2330      	movs	r3, #48	@ 0x30
 800480e:	3130      	adds	r1, #48	@ 0x30
 8004810:	7083      	strb	r3, [r0, #2]
 8004812:	70c1      	strb	r1, [r0, #3]
 8004814:	1d03      	adds	r3, r0, #4
 8004816:	e7f1      	b.n	80047fc <__exponent+0x58>

08004818 <_printf_float>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b08d      	sub	sp, #52	@ 0x34
 800481e:	460c      	mov	r4, r1
 8004820:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004824:	4616      	mov	r6, r2
 8004826:	461f      	mov	r7, r3
 8004828:	4605      	mov	r5, r0
 800482a:	f000 feef 	bl	800560c <_localeconv_r>
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fb fd1c 	bl	8000270 <strlen>
 8004838:	2300      	movs	r3, #0
 800483a:	930a      	str	r3, [sp, #40]	@ 0x28
 800483c:	f8d8 3000 	ldr.w	r3, [r8]
 8004840:	9005      	str	r0, [sp, #20]
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004850:	f8d4 b000 	ldr.w	fp, [r4]
 8004854:	f8c8 2000 	str.w	r2, [r8]
 8004858:	e9d3 8900 	ldrd	r8, r9, [r3]
 800485c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004860:	9307      	str	r3, [sp, #28]
 8004862:	f8cd 8018 	str.w	r8, [sp, #24]
 8004866:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800486a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800486e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae0 <_printf_float+0x2c8>)
 8004870:	f04f 32ff 	mov.w	r2, #4294967295
 8004874:	f7fc f95a 	bl	8000b2c <__aeabi_dcmpun>
 8004878:	bb70      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800487a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800487e:	4b98      	ldr	r3, [pc, #608]	@ (8004ae0 <_printf_float+0x2c8>)
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	f7fc f934 	bl	8000af0 <__aeabi_dcmple>
 8004888:	bb30      	cbnz	r0, 80048d8 <_printf_float+0xc0>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	4640      	mov	r0, r8
 8004890:	4649      	mov	r1, r9
 8004892:	f7fc f923 	bl	8000adc <__aeabi_dcmplt>
 8004896:	b110      	cbz	r0, 800489e <_printf_float+0x86>
 8004898:	232d      	movs	r3, #45	@ 0x2d
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800489e:	4a91      	ldr	r2, [pc, #580]	@ (8004ae4 <_printf_float+0x2cc>)
 80048a0:	4b91      	ldr	r3, [pc, #580]	@ (8004ae8 <_printf_float+0x2d0>)
 80048a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048a6:	bf94      	ite	ls
 80048a8:	4690      	movls	r8, r2
 80048aa:	4698      	movhi	r8, r3
 80048ac:	2303      	movs	r3, #3
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	f02b 0304 	bic.w	r3, fp, #4
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	f04f 0900 	mov.w	r9, #0
 80048ba:	9700      	str	r7, [sp, #0]
 80048bc:	4633      	mov	r3, r6
 80048be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80048c0:	4621      	mov	r1, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 f9d2 	bl	8004c6c <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f040 808d 	bne.w	80049e8 <_printf_float+0x1d0>
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	b00d      	add	sp, #52	@ 0x34
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	4649      	mov	r1, r9
 80048e0:	f7fc f924 	bl	8000b2c <__aeabi_dcmpun>
 80048e4:	b140      	cbz	r0, 80048f8 <_printf_float+0xe0>
 80048e6:	464b      	mov	r3, r9
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bfbc      	itt	lt
 80048ec:	232d      	movlt	r3, #45	@ 0x2d
 80048ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048f2:	4a7e      	ldr	r2, [pc, #504]	@ (8004aec <_printf_float+0x2d4>)
 80048f4:	4b7e      	ldr	r3, [pc, #504]	@ (8004af0 <_printf_float+0x2d8>)
 80048f6:	e7d4      	b.n	80048a2 <_printf_float+0x8a>
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80048fe:	9206      	str	r2, [sp, #24]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	d13b      	bne.n	800497c <_printf_float+0x164>
 8004904:	2306      	movs	r3, #6
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800490c:	2300      	movs	r3, #0
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	ab0a      	add	r3, sp, #40	@ 0x28
 8004914:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004918:	ab09      	add	r3, sp, #36	@ 0x24
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	6861      	ldr	r1, [r4, #4]
 800491e:	ec49 8b10 	vmov	d0, r8, r9
 8004922:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004926:	4628      	mov	r0, r5
 8004928:	f7ff fed7 	bl	80046da <__cvt>
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004930:	2b47      	cmp	r3, #71	@ 0x47
 8004932:	4680      	mov	r8, r0
 8004934:	d129      	bne.n	800498a <_printf_float+0x172>
 8004936:	1cc8      	adds	r0, r1, #3
 8004938:	db02      	blt.n	8004940 <_printf_float+0x128>
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	4299      	cmp	r1, r3
 800493e:	dd41      	ble.n	80049c4 <_printf_float+0x1ac>
 8004940:	f1aa 0a02 	sub.w	sl, sl, #2
 8004944:	fa5f fa8a 	uxtb.w	sl, sl
 8004948:	3901      	subs	r1, #1
 800494a:	4652      	mov	r2, sl
 800494c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004950:	9109      	str	r1, [sp, #36]	@ 0x24
 8004952:	f7ff ff27 	bl	80047a4 <__exponent>
 8004956:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004958:	1813      	adds	r3, r2, r0
 800495a:	2a01      	cmp	r2, #1
 800495c:	4681      	mov	r9, r0
 800495e:	6123      	str	r3, [r4, #16]
 8004960:	dc02      	bgt.n	8004968 <_printf_float+0x150>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	07d2      	lsls	r2, r2, #31
 8004966:	d501      	bpl.n	800496c <_printf_float+0x154>
 8004968:	3301      	adds	r3, #1
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0a2      	beq.n	80048ba <_printf_float+0xa2>
 8004974:	232d      	movs	r3, #45	@ 0x2d
 8004976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497a:	e79e      	b.n	80048ba <_printf_float+0xa2>
 800497c:	9a06      	ldr	r2, [sp, #24]
 800497e:	2a47      	cmp	r2, #71	@ 0x47
 8004980:	d1c2      	bne.n	8004908 <_printf_float+0xf0>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1c0      	bne.n	8004908 <_printf_float+0xf0>
 8004986:	2301      	movs	r3, #1
 8004988:	e7bd      	b.n	8004906 <_printf_float+0xee>
 800498a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800498e:	d9db      	bls.n	8004948 <_printf_float+0x130>
 8004990:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004994:	d118      	bne.n	80049c8 <_printf_float+0x1b0>
 8004996:	2900      	cmp	r1, #0
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	dd0b      	ble.n	80049b4 <_printf_float+0x19c>
 800499c:	6121      	str	r1, [r4, #16]
 800499e:	b913      	cbnz	r3, 80049a6 <_printf_float+0x18e>
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	07d0      	lsls	r0, r2, #31
 80049a4:	d502      	bpl.n	80049ac <_printf_float+0x194>
 80049a6:	3301      	adds	r3, #1
 80049a8:	440b      	add	r3, r1
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80049ae:	f04f 0900 	mov.w	r9, #0
 80049b2:	e7db      	b.n	800496c <_printf_float+0x154>
 80049b4:	b913      	cbnz	r3, 80049bc <_printf_float+0x1a4>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	07d2      	lsls	r2, r2, #31
 80049ba:	d501      	bpl.n	80049c0 <_printf_float+0x1a8>
 80049bc:	3302      	adds	r3, #2
 80049be:	e7f4      	b.n	80049aa <_printf_float+0x192>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e7f2      	b.n	80049aa <_printf_float+0x192>
 80049c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80049c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ca:	4299      	cmp	r1, r3
 80049cc:	db05      	blt.n	80049da <_printf_float+0x1c2>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6121      	str	r1, [r4, #16]
 80049d2:	07d8      	lsls	r0, r3, #31
 80049d4:	d5ea      	bpl.n	80049ac <_printf_float+0x194>
 80049d6:	1c4b      	adds	r3, r1, #1
 80049d8:	e7e7      	b.n	80049aa <_printf_float+0x192>
 80049da:	2900      	cmp	r1, #0
 80049dc:	bfd4      	ite	le
 80049de:	f1c1 0202 	rsble	r2, r1, #2
 80049e2:	2201      	movgt	r2, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	e7e0      	b.n	80049aa <_printf_float+0x192>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	055a      	lsls	r2, r3, #21
 80049ec:	d407      	bmi.n	80049fe <_printf_float+0x1e6>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	4642      	mov	r2, r8
 80049f2:	4631      	mov	r1, r6
 80049f4:	4628      	mov	r0, r5
 80049f6:	47b8      	blx	r7
 80049f8:	3001      	adds	r0, #1
 80049fa:	d12b      	bne.n	8004a54 <_printf_float+0x23c>
 80049fc:	e767      	b.n	80048ce <_printf_float+0xb6>
 80049fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a02:	f240 80dd 	bls.w	8004bc0 <_printf_float+0x3a8>
 8004a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f7fc f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d033      	beq.n	8004a7e <_printf_float+0x266>
 8004a16:	4a37      	ldr	r2, [pc, #220]	@ (8004af4 <_printf_float+0x2dc>)
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	f43f af54 	beq.w	80048ce <_printf_float+0xb6>
 8004a26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a2a:	4543      	cmp	r3, r8
 8004a2c:	db02      	blt.n	8004a34 <_printf_float+0x21c>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	07d8      	lsls	r0, r3, #31
 8004a32:	d50f      	bpl.n	8004a54 <_printf_float+0x23c>
 8004a34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f af45 	beq.w	80048ce <_printf_float+0xb6>
 8004a44:	f04f 0900 	mov.w	r9, #0
 8004a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a4c:	f104 0a1a 	add.w	sl, r4, #26
 8004a50:	45c8      	cmp	r8, r9
 8004a52:	dc09      	bgt.n	8004a68 <_printf_float+0x250>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	079b      	lsls	r3, r3, #30
 8004a58:	f100 8103 	bmi.w	8004c62 <_printf_float+0x44a>
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a60:	4298      	cmp	r0, r3
 8004a62:	bfb8      	it	lt
 8004a64:	4618      	movlt	r0, r3
 8004a66:	e734      	b.n	80048d2 <_printf_float+0xba>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f af2b 	beq.w	80048ce <_printf_float+0xb6>
 8004a78:	f109 0901 	add.w	r9, r9, #1
 8004a7c:	e7e8      	b.n	8004a50 <_printf_float+0x238>
 8004a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dc39      	bgt.n	8004af8 <_printf_float+0x2e0>
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <_printf_float+0x2dc>)
 8004a86:	2301      	movs	r3, #1
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f af1d 	beq.w	80048ce <_printf_float+0xb6>
 8004a94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a98:	ea59 0303 	orrs.w	r3, r9, r3
 8004a9c:	d102      	bne.n	8004aa4 <_printf_float+0x28c>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	07d9      	lsls	r1, r3, #31
 8004aa2:	d5d7      	bpl.n	8004a54 <_printf_float+0x23c>
 8004aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	f43f af0d 	beq.w	80048ce <_printf_float+0xb6>
 8004ab4:	f04f 0a00 	mov.w	sl, #0
 8004ab8:	f104 0b1a 	add.w	fp, r4, #26
 8004abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004abe:	425b      	negs	r3, r3
 8004ac0:	4553      	cmp	r3, sl
 8004ac2:	dc01      	bgt.n	8004ac8 <_printf_float+0x2b0>
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	e793      	b.n	80049f0 <_printf_float+0x1d8>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	465a      	mov	r2, fp
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f aefb 	beq.w	80048ce <_printf_float+0xb6>
 8004ad8:	f10a 0a01 	add.w	sl, sl, #1
 8004adc:	e7ee      	b.n	8004abc <_printf_float+0x2a4>
 8004ade:	bf00      	nop
 8004ae0:	7fefffff 	.word	0x7fefffff
 8004ae4:	08008e00 	.word	0x08008e00
 8004ae8:	08008e04 	.word	0x08008e04
 8004aec:	08008e08 	.word	0x08008e08
 8004af0:	08008e0c 	.word	0x08008e0c
 8004af4:	08008e10 	.word	0x08008e10
 8004af8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004afa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004afe:	4553      	cmp	r3, sl
 8004b00:	bfa8      	it	ge
 8004b02:	4653      	movge	r3, sl
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	4699      	mov	r9, r3
 8004b08:	dc36      	bgt.n	8004b78 <_printf_float+0x360>
 8004b0a:	f04f 0b00 	mov.w	fp, #0
 8004b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b12:	f104 021a 	add.w	r2, r4, #26
 8004b16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b18:	9306      	str	r3, [sp, #24]
 8004b1a:	eba3 0309 	sub.w	r3, r3, r9
 8004b1e:	455b      	cmp	r3, fp
 8004b20:	dc31      	bgt.n	8004b86 <_printf_float+0x36e>
 8004b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b24:	459a      	cmp	sl, r3
 8004b26:	dc3a      	bgt.n	8004b9e <_printf_float+0x386>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	07da      	lsls	r2, r3, #31
 8004b2c:	d437      	bmi.n	8004b9e <_printf_float+0x386>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b30:	ebaa 0903 	sub.w	r9, sl, r3
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	ebaa 0303 	sub.w	r3, sl, r3
 8004b3a:	4599      	cmp	r9, r3
 8004b3c:	bfa8      	it	ge
 8004b3e:	4699      	movge	r9, r3
 8004b40:	f1b9 0f00 	cmp.w	r9, #0
 8004b44:	dc33      	bgt.n	8004bae <_printf_float+0x396>
 8004b46:	f04f 0800 	mov.w	r8, #0
 8004b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b4e:	f104 0b1a 	add.w	fp, r4, #26
 8004b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b54:	ebaa 0303 	sub.w	r3, sl, r3
 8004b58:	eba3 0309 	sub.w	r3, r3, r9
 8004b5c:	4543      	cmp	r3, r8
 8004b5e:	f77f af79 	ble.w	8004a54 <_printf_float+0x23c>
 8004b62:	2301      	movs	r3, #1
 8004b64:	465a      	mov	r2, fp
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f43f aeae 	beq.w	80048ce <_printf_float+0xb6>
 8004b72:	f108 0801 	add.w	r8, r8, #1
 8004b76:	e7ec      	b.n	8004b52 <_printf_float+0x33a>
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	d1c2      	bne.n	8004b0a <_printf_float+0x2f2>
 8004b84:	e6a3      	b.n	80048ce <_printf_float+0xb6>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	9206      	str	r2, [sp, #24]
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	f43f ae9c 	beq.w	80048ce <_printf_float+0xb6>
 8004b96:	9a06      	ldr	r2, [sp, #24]
 8004b98:	f10b 0b01 	add.w	fp, fp, #1
 8004b9c:	e7bb      	b.n	8004b16 <_printf_float+0x2fe>
 8004b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d1c0      	bne.n	8004b2e <_printf_float+0x316>
 8004bac:	e68f      	b.n	80048ce <_printf_float+0xb6>
 8004bae:	9a06      	ldr	r2, [sp, #24]
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	4442      	add	r2, r8
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d1c3      	bne.n	8004b46 <_printf_float+0x32e>
 8004bbe:	e686      	b.n	80048ce <_printf_float+0xb6>
 8004bc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bc4:	f1ba 0f01 	cmp.w	sl, #1
 8004bc8:	dc01      	bgt.n	8004bce <_printf_float+0x3b6>
 8004bca:	07db      	lsls	r3, r3, #31
 8004bcc:	d536      	bpl.n	8004c3c <_printf_float+0x424>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f43f ae78 	beq.w	80048ce <_printf_float+0xb6>
 8004bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f ae70 	beq.w	80048ce <_printf_float+0xb6>
 8004bee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bfa:	f7fb ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bfe:	b9c0      	cbnz	r0, 8004c32 <_printf_float+0x41a>
 8004c00:	4653      	mov	r3, sl
 8004c02:	f108 0201 	add.w	r2, r8, #1
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d10c      	bne.n	8004c2a <_printf_float+0x412>
 8004c10:	e65d      	b.n	80048ce <_printf_float+0xb6>
 8004c12:	2301      	movs	r3, #1
 8004c14:	465a      	mov	r2, fp
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	f43f ae56 	beq.w	80048ce <_printf_float+0xb6>
 8004c22:	f108 0801 	add.w	r8, r8, #1
 8004c26:	45d0      	cmp	r8, sl
 8004c28:	dbf3      	blt.n	8004c12 <_printf_float+0x3fa>
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c30:	e6df      	b.n	80049f2 <_printf_float+0x1da>
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	f104 0b1a 	add.w	fp, r4, #26
 8004c3a:	e7f4      	b.n	8004c26 <_printf_float+0x40e>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4642      	mov	r2, r8
 8004c40:	e7e1      	b.n	8004c06 <_printf_float+0x3ee>
 8004c42:	2301      	movs	r3, #1
 8004c44:	464a      	mov	r2, r9
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f ae3e 	beq.w	80048ce <_printf_float+0xb6>
 8004c52:	f108 0801 	add.w	r8, r8, #1
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c5a:	1a5b      	subs	r3, r3, r1
 8004c5c:	4543      	cmp	r3, r8
 8004c5e:	dcf0      	bgt.n	8004c42 <_printf_float+0x42a>
 8004c60:	e6fc      	b.n	8004a5c <_printf_float+0x244>
 8004c62:	f04f 0800 	mov.w	r8, #0
 8004c66:	f104 0919 	add.w	r9, r4, #25
 8004c6a:	e7f4      	b.n	8004c56 <_printf_float+0x43e>

08004c6c <_printf_common>:
 8004c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	4616      	mov	r6, r2
 8004c72:	4698      	mov	r8, r3
 8004c74:	688a      	ldr	r2, [r1, #8]
 8004c76:	690b      	ldr	r3, [r1, #16]
 8004c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	bfb8      	it	lt
 8004c80:	4613      	movlt	r3, r2
 8004c82:	6033      	str	r3, [r6, #0]
 8004c84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c88:	4607      	mov	r7, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	b10a      	cbz	r2, 8004c92 <_printf_common+0x26>
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6033      	str	r3, [r6, #0]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	0699      	lsls	r1, r3, #26
 8004c96:	bf42      	ittt	mi
 8004c98:	6833      	ldrmi	r3, [r6, #0]
 8004c9a:	3302      	addmi	r3, #2
 8004c9c:	6033      	strmi	r3, [r6, #0]
 8004c9e:	6825      	ldr	r5, [r4, #0]
 8004ca0:	f015 0506 	ands.w	r5, r5, #6
 8004ca4:	d106      	bne.n	8004cb4 <_printf_common+0x48>
 8004ca6:	f104 0a19 	add.w	sl, r4, #25
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	6832      	ldr	r2, [r6, #0]
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	42ab      	cmp	r3, r5
 8004cb2:	dc26      	bgt.n	8004d02 <_printf_common+0x96>
 8004cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	3b00      	subs	r3, #0
 8004cbc:	bf18      	it	ne
 8004cbe:	2301      	movne	r3, #1
 8004cc0:	0692      	lsls	r2, r2, #26
 8004cc2:	d42b      	bmi.n	8004d1c <_printf_common+0xb0>
 8004cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cc8:	4641      	mov	r1, r8
 8004cca:	4638      	mov	r0, r7
 8004ccc:	47c8      	blx	r9
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d01e      	beq.n	8004d10 <_printf_common+0xa4>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	6922      	ldr	r2, [r4, #16]
 8004cd6:	f003 0306 	and.w	r3, r3, #6
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf02      	ittt	eq
 8004cde:	68e5      	ldreq	r5, [r4, #12]
 8004ce0:	6833      	ldreq	r3, [r6, #0]
 8004ce2:	1aed      	subeq	r5, r5, r3
 8004ce4:	68a3      	ldr	r3, [r4, #8]
 8004ce6:	bf0c      	ite	eq
 8004ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cec:	2500      	movne	r5, #0
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	bfc4      	itt	gt
 8004cf2:	1a9b      	subgt	r3, r3, r2
 8004cf4:	18ed      	addgt	r5, r5, r3
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	341a      	adds	r4, #26
 8004cfa:	42b5      	cmp	r5, r6
 8004cfc:	d11a      	bne.n	8004d34 <_printf_common+0xc8>
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e008      	b.n	8004d14 <_printf_common+0xa8>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4652      	mov	r2, sl
 8004d06:	4641      	mov	r1, r8
 8004d08:	4638      	mov	r0, r7
 8004d0a:	47c8      	blx	r9
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d103      	bne.n	8004d18 <_printf_common+0xac>
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7c6      	b.n	8004caa <_printf_common+0x3e>
 8004d1c:	18e1      	adds	r1, r4, r3
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	2030      	movs	r0, #48	@ 0x30
 8004d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d26:	4422      	add	r2, r4
 8004d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d30:	3302      	adds	r3, #2
 8004d32:	e7c7      	b.n	8004cc4 <_printf_common+0x58>
 8004d34:	2301      	movs	r3, #1
 8004d36:	4622      	mov	r2, r4
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	47c8      	blx	r9
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d0e6      	beq.n	8004d10 <_printf_common+0xa4>
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7d9      	b.n	8004cfa <_printf_common+0x8e>
	...

08004d48 <_printf_i>:
 8004d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	7e0f      	ldrb	r7, [r1, #24]
 8004d4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d50:	2f78      	cmp	r7, #120	@ 0x78
 8004d52:	4691      	mov	r9, r2
 8004d54:	4680      	mov	r8, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	469a      	mov	sl, r3
 8004d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d5e:	d807      	bhi.n	8004d70 <_printf_i+0x28>
 8004d60:	2f62      	cmp	r7, #98	@ 0x62
 8004d62:	d80a      	bhi.n	8004d7a <_printf_i+0x32>
 8004d64:	2f00      	cmp	r7, #0
 8004d66:	f000 80d2 	beq.w	8004f0e <_printf_i+0x1c6>
 8004d6a:	2f58      	cmp	r7, #88	@ 0x58
 8004d6c:	f000 80b9 	beq.w	8004ee2 <_printf_i+0x19a>
 8004d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d78:	e03a      	b.n	8004df0 <_printf_i+0xa8>
 8004d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d7e:	2b15      	cmp	r3, #21
 8004d80:	d8f6      	bhi.n	8004d70 <_printf_i+0x28>
 8004d82:	a101      	add	r1, pc, #4	@ (adr r1, 8004d88 <_printf_i+0x40>)
 8004d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004df5 	.word	0x08004df5
 8004d90:	08004d71 	.word	0x08004d71
 8004d94:	08004d71 	.word	0x08004d71
 8004d98:	08004d71 	.word	0x08004d71
 8004d9c:	08004d71 	.word	0x08004d71
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004d71 	.word	0x08004d71
 8004da8:	08004d71 	.word	0x08004d71
 8004dac:	08004d71 	.word	0x08004d71
 8004db0:	08004d71 	.word	0x08004d71
 8004db4:	08004ef5 	.word	0x08004ef5
 8004db8:	08004e1f 	.word	0x08004e1f
 8004dbc:	08004eaf 	.word	0x08004eaf
 8004dc0:	08004d71 	.word	0x08004d71
 8004dc4:	08004d71 	.word	0x08004d71
 8004dc8:	08004f17 	.word	0x08004f17
 8004dcc:	08004d71 	.word	0x08004d71
 8004dd0:	08004e1f 	.word	0x08004e1f
 8004dd4:	08004d71 	.word	0x08004d71
 8004dd8:	08004d71 	.word	0x08004d71
 8004ddc:	08004eb7 	.word	0x08004eb7
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6032      	str	r2, [r6, #0]
 8004de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004df0:	2301      	movs	r3, #1
 8004df2:	e09d      	b.n	8004f30 <_printf_i+0x1e8>
 8004df4:	6833      	ldr	r3, [r6, #0]
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	6031      	str	r1, [r6, #0]
 8004dfc:	0606      	lsls	r6, r0, #24
 8004dfe:	d501      	bpl.n	8004e04 <_printf_i+0xbc>
 8004e00:	681d      	ldr	r5, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <_printf_i+0xc4>
 8004e04:	0645      	lsls	r5, r0, #25
 8004e06:	d5fb      	bpl.n	8004e00 <_printf_i+0xb8>
 8004e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	da03      	bge.n	8004e18 <_printf_i+0xd0>
 8004e10:	232d      	movs	r3, #45	@ 0x2d
 8004e12:	426d      	negs	r5, r5
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e18:	4859      	ldr	r0, [pc, #356]	@ (8004f80 <_printf_i+0x238>)
 8004e1a:	230a      	movs	r3, #10
 8004e1c:	e011      	b.n	8004e42 <_printf_i+0xfa>
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	0608      	lsls	r0, r1, #24
 8004e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e28:	d402      	bmi.n	8004e30 <_printf_i+0xe8>
 8004e2a:	0649      	lsls	r1, r1, #25
 8004e2c:	bf48      	it	mi
 8004e2e:	b2ad      	uxthmi	r5, r5
 8004e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e32:	4853      	ldr	r0, [pc, #332]	@ (8004f80 <_printf_i+0x238>)
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	bf14      	ite	ne
 8004e38:	230a      	movne	r3, #10
 8004e3a:	2308      	moveq	r3, #8
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e42:	6866      	ldr	r6, [r4, #4]
 8004e44:	60a6      	str	r6, [r4, #8]
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	bfa2      	ittt	ge
 8004e4a:	6821      	ldrge	r1, [r4, #0]
 8004e4c:	f021 0104 	bicge.w	r1, r1, #4
 8004e50:	6021      	strge	r1, [r4, #0]
 8004e52:	b90d      	cbnz	r5, 8004e58 <_printf_i+0x110>
 8004e54:	2e00      	cmp	r6, #0
 8004e56:	d04b      	beq.n	8004ef0 <_printf_i+0x1a8>
 8004e58:	4616      	mov	r6, r2
 8004e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e62:	5dc7      	ldrb	r7, [r0, r7]
 8004e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e68:	462f      	mov	r7, r5
 8004e6a:	42bb      	cmp	r3, r7
 8004e6c:	460d      	mov	r5, r1
 8004e6e:	d9f4      	bls.n	8004e5a <_printf_i+0x112>
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d10b      	bne.n	8004e8c <_printf_i+0x144>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07df      	lsls	r7, r3, #31
 8004e78:	d508      	bpl.n	8004e8c <_printf_i+0x144>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	6861      	ldr	r1, [r4, #4]
 8004e7e:	4299      	cmp	r1, r3
 8004e80:	bfde      	ittt	le
 8004e82:	2330      	movle	r3, #48	@ 0x30
 8004e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e8c:	1b92      	subs	r2, r2, r6
 8004e8e:	6122      	str	r2, [r4, #16]
 8004e90:	f8cd a000 	str.w	sl, [sp]
 8004e94:	464b      	mov	r3, r9
 8004e96:	aa03      	add	r2, sp, #12
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	f7ff fee6 	bl	8004c6c <_printf_common>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d14a      	bne.n	8004f3a <_printf_i+0x1f2>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	b004      	add	sp, #16
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	4833      	ldr	r0, [pc, #204]	@ (8004f84 <_printf_i+0x23c>)
 8004eb8:	2778      	movs	r7, #120	@ 0x78
 8004eba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	6831      	ldr	r1, [r6, #0]
 8004ec2:	061f      	lsls	r7, r3, #24
 8004ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ec8:	d402      	bmi.n	8004ed0 <_printf_i+0x188>
 8004eca:	065f      	lsls	r7, r3, #25
 8004ecc:	bf48      	it	mi
 8004ece:	b2ad      	uxthmi	r5, r5
 8004ed0:	6031      	str	r1, [r6, #0]
 8004ed2:	07d9      	lsls	r1, r3, #31
 8004ed4:	bf44      	itt	mi
 8004ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eda:	6023      	strmi	r3, [r4, #0]
 8004edc:	b11d      	cbz	r5, 8004ee6 <_printf_i+0x19e>
 8004ede:	2310      	movs	r3, #16
 8004ee0:	e7ac      	b.n	8004e3c <_printf_i+0xf4>
 8004ee2:	4827      	ldr	r0, [pc, #156]	@ (8004f80 <_printf_i+0x238>)
 8004ee4:	e7e9      	b.n	8004eba <_printf_i+0x172>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	f023 0320 	bic.w	r3, r3, #32
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	e7f6      	b.n	8004ede <_printf_i+0x196>
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	e7bd      	b.n	8004e70 <_printf_i+0x128>
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	6961      	ldr	r1, [r4, #20]
 8004efa:	1d18      	adds	r0, r3, #4
 8004efc:	6030      	str	r0, [r6, #0]
 8004efe:	062e      	lsls	r6, r5, #24
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0x1c0>
 8004f04:	6019      	str	r1, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <_printf_i+0x1c6>
 8004f08:	0668      	lsls	r0, r5, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0x1bc>
 8004f0c:	8019      	strh	r1, [r3, #0]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	4616      	mov	r6, r2
 8004f14:	e7bc      	b.n	8004e90 <_printf_i+0x148>
 8004f16:	6833      	ldr	r3, [r6, #0]
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	6032      	str	r2, [r6, #0]
 8004f1c:	681e      	ldr	r6, [r3, #0]
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	2100      	movs	r1, #0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f7fb f954 	bl	80001d0 <memchr>
 8004f28:	b108      	cbz	r0, 8004f2e <_printf_i+0x1e6>
 8004f2a:	1b80      	subs	r0, r0, r6
 8004f2c:	6060      	str	r0, [r4, #4]
 8004f2e:	6863      	ldr	r3, [r4, #4]
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	2300      	movs	r3, #0
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f38:	e7aa      	b.n	8004e90 <_printf_i+0x148>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	4632      	mov	r2, r6
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4640      	mov	r0, r8
 8004f42:	47d0      	blx	sl
 8004f44:	3001      	adds	r0, #1
 8004f46:	d0ad      	beq.n	8004ea4 <_printf_i+0x15c>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	079b      	lsls	r3, r3, #30
 8004f4c:	d413      	bmi.n	8004f76 <_printf_i+0x22e>
 8004f4e:	68e0      	ldr	r0, [r4, #12]
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	4298      	cmp	r0, r3
 8004f54:	bfb8      	it	lt
 8004f56:	4618      	movlt	r0, r3
 8004f58:	e7a6      	b.n	8004ea8 <_printf_i+0x160>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	47d0      	blx	sl
 8004f64:	3001      	adds	r0, #1
 8004f66:	d09d      	beq.n	8004ea4 <_printf_i+0x15c>
 8004f68:	3501      	adds	r5, #1
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	9903      	ldr	r1, [sp, #12]
 8004f6e:	1a5b      	subs	r3, r3, r1
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dcf2      	bgt.n	8004f5a <_printf_i+0x212>
 8004f74:	e7eb      	b.n	8004f4e <_printf_i+0x206>
 8004f76:	2500      	movs	r5, #0
 8004f78:	f104 0619 	add.w	r6, r4, #25
 8004f7c:	e7f5      	b.n	8004f6a <_printf_i+0x222>
 8004f7e:	bf00      	nop
 8004f80:	08008e12 	.word	0x08008e12
 8004f84:	08008e23 	.word	0x08008e23

08004f88 <_scanf_float>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	4617      	mov	r7, r2
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	688b      	ldr	r3, [r1, #8]
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004f9a:	bf81      	itttt	hi
 8004f9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004fa0:	eb03 0b05 	addhi.w	fp, r3, r5
 8004fa4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004fa8:	608b      	strhi	r3, [r1, #8]
 8004faa:	680b      	ldr	r3, [r1, #0]
 8004fac:	460a      	mov	r2, r1
 8004fae:	f04f 0500 	mov.w	r5, #0
 8004fb2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004fb6:	f842 3b1c 	str.w	r3, [r2], #28
 8004fba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	bf98      	it	ls
 8004fc4:	f04f 0b00 	movls.w	fp, #0
 8004fc8:	9201      	str	r2, [sp, #4]
 8004fca:	4616      	mov	r6, r2
 8004fcc:	46aa      	mov	sl, r5
 8004fce:	46a9      	mov	r9, r5
 8004fd0:	9502      	str	r5, [sp, #8]
 8004fd2:	68a2      	ldr	r2, [r4, #8]
 8004fd4:	b152      	cbz	r2, 8004fec <_scanf_float+0x64>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fdc:	d864      	bhi.n	80050a8 <_scanf_float+0x120>
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d83c      	bhi.n	800505c <_scanf_float+0xd4>
 8004fe2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004fe6:	b2c8      	uxtb	r0, r1
 8004fe8:	280e      	cmp	r0, #14
 8004fea:	d93a      	bls.n	8005062 <_scanf_float+0xda>
 8004fec:	f1b9 0f00 	cmp.w	r9, #0
 8004ff0:	d003      	beq.n	8004ffa <_scanf_float+0x72>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ffe:	f1ba 0f01 	cmp.w	sl, #1
 8005002:	f200 8117 	bhi.w	8005234 <_scanf_float+0x2ac>
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	429e      	cmp	r6, r3
 800500a:	f200 8108 	bhi.w	800521e <_scanf_float+0x296>
 800500e:	2001      	movs	r0, #1
 8005010:	b007      	add	sp, #28
 8005012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005016:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800501a:	2a0d      	cmp	r2, #13
 800501c:	d8e6      	bhi.n	8004fec <_scanf_float+0x64>
 800501e:	a101      	add	r1, pc, #4	@ (adr r1, 8005024 <_scanf_float+0x9c>)
 8005020:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005024:	0800516b 	.word	0x0800516b
 8005028:	08004fed 	.word	0x08004fed
 800502c:	08004fed 	.word	0x08004fed
 8005030:	08004fed 	.word	0x08004fed
 8005034:	080051cb 	.word	0x080051cb
 8005038:	080051a3 	.word	0x080051a3
 800503c:	08004fed 	.word	0x08004fed
 8005040:	08004fed 	.word	0x08004fed
 8005044:	08005179 	.word	0x08005179
 8005048:	08004fed 	.word	0x08004fed
 800504c:	08004fed 	.word	0x08004fed
 8005050:	08004fed 	.word	0x08004fed
 8005054:	08004fed 	.word	0x08004fed
 8005058:	08005131 	.word	0x08005131
 800505c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005060:	e7db      	b.n	800501a <_scanf_float+0x92>
 8005062:	290e      	cmp	r1, #14
 8005064:	d8c2      	bhi.n	8004fec <_scanf_float+0x64>
 8005066:	a001      	add	r0, pc, #4	@ (adr r0, 800506c <_scanf_float+0xe4>)
 8005068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800506c:	08005121 	.word	0x08005121
 8005070:	08004fed 	.word	0x08004fed
 8005074:	08005121 	.word	0x08005121
 8005078:	080051b7 	.word	0x080051b7
 800507c:	08004fed 	.word	0x08004fed
 8005080:	080050c9 	.word	0x080050c9
 8005084:	08005107 	.word	0x08005107
 8005088:	08005107 	.word	0x08005107
 800508c:	08005107 	.word	0x08005107
 8005090:	08005107 	.word	0x08005107
 8005094:	08005107 	.word	0x08005107
 8005098:	08005107 	.word	0x08005107
 800509c:	08005107 	.word	0x08005107
 80050a0:	08005107 	.word	0x08005107
 80050a4:	08005107 	.word	0x08005107
 80050a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80050aa:	d809      	bhi.n	80050c0 <_scanf_float+0x138>
 80050ac:	2b60      	cmp	r3, #96	@ 0x60
 80050ae:	d8b2      	bhi.n	8005016 <_scanf_float+0x8e>
 80050b0:	2b54      	cmp	r3, #84	@ 0x54
 80050b2:	d07b      	beq.n	80051ac <_scanf_float+0x224>
 80050b4:	2b59      	cmp	r3, #89	@ 0x59
 80050b6:	d199      	bne.n	8004fec <_scanf_float+0x64>
 80050b8:	2d07      	cmp	r5, #7
 80050ba:	d197      	bne.n	8004fec <_scanf_float+0x64>
 80050bc:	2508      	movs	r5, #8
 80050be:	e02c      	b.n	800511a <_scanf_float+0x192>
 80050c0:	2b74      	cmp	r3, #116	@ 0x74
 80050c2:	d073      	beq.n	80051ac <_scanf_float+0x224>
 80050c4:	2b79      	cmp	r3, #121	@ 0x79
 80050c6:	e7f6      	b.n	80050b6 <_scanf_float+0x12e>
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	05c8      	lsls	r0, r1, #23
 80050cc:	d51b      	bpl.n	8005106 <_scanf_float+0x17e>
 80050ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80050d2:	6021      	str	r1, [r4, #0]
 80050d4:	f109 0901 	add.w	r9, r9, #1
 80050d8:	f1bb 0f00 	cmp.w	fp, #0
 80050dc:	d003      	beq.n	80050e6 <_scanf_float+0x15e>
 80050de:	3201      	adds	r2, #1
 80050e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050e4:	60a2      	str	r2, [r4, #8]
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	3301      	adds	r3, #1
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	f340 8087 	ble.w	800520c <_scanf_float+0x284>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	e765      	b.n	8004fd2 <_scanf_float+0x4a>
 8005106:	eb1a 0105 	adds.w	r1, sl, r5
 800510a:	f47f af6f 	bne.w	8004fec <_scanf_float+0x64>
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005114:	6022      	str	r2, [r4, #0]
 8005116:	460d      	mov	r5, r1
 8005118:	468a      	mov	sl, r1
 800511a:	f806 3b01 	strb.w	r3, [r6], #1
 800511e:	e7e2      	b.n	80050e6 <_scanf_float+0x15e>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	0610      	lsls	r0, r2, #24
 8005124:	f57f af62 	bpl.w	8004fec <_scanf_float+0x64>
 8005128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800512c:	6022      	str	r2, [r4, #0]
 800512e:	e7f4      	b.n	800511a <_scanf_float+0x192>
 8005130:	f1ba 0f00 	cmp.w	sl, #0
 8005134:	d10e      	bne.n	8005154 <_scanf_float+0x1cc>
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	d10e      	bne.n	800515a <_scanf_float+0x1d2>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005142:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005146:	d108      	bne.n	800515a <_scanf_float+0x1d2>
 8005148:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	f04f 0a01 	mov.w	sl, #1
 8005152:	e7e2      	b.n	800511a <_scanf_float+0x192>
 8005154:	f1ba 0f02 	cmp.w	sl, #2
 8005158:	d055      	beq.n	8005206 <_scanf_float+0x27e>
 800515a:	2d01      	cmp	r5, #1
 800515c:	d002      	beq.n	8005164 <_scanf_float+0x1dc>
 800515e:	2d04      	cmp	r5, #4
 8005160:	f47f af44 	bne.w	8004fec <_scanf_float+0x64>
 8005164:	3501      	adds	r5, #1
 8005166:	b2ed      	uxtb	r5, r5
 8005168:	e7d7      	b.n	800511a <_scanf_float+0x192>
 800516a:	f1ba 0f01 	cmp.w	sl, #1
 800516e:	f47f af3d 	bne.w	8004fec <_scanf_float+0x64>
 8005172:	f04f 0a02 	mov.w	sl, #2
 8005176:	e7d0      	b.n	800511a <_scanf_float+0x192>
 8005178:	b97d      	cbnz	r5, 800519a <_scanf_float+0x212>
 800517a:	f1b9 0f00 	cmp.w	r9, #0
 800517e:	f47f af38 	bne.w	8004ff2 <_scanf_float+0x6a>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005188:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800518c:	f040 8108 	bne.w	80053a0 <_scanf_float+0x418>
 8005190:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005194:	6022      	str	r2, [r4, #0]
 8005196:	2501      	movs	r5, #1
 8005198:	e7bf      	b.n	800511a <_scanf_float+0x192>
 800519a:	2d03      	cmp	r5, #3
 800519c:	d0e2      	beq.n	8005164 <_scanf_float+0x1dc>
 800519e:	2d05      	cmp	r5, #5
 80051a0:	e7de      	b.n	8005160 <_scanf_float+0x1d8>
 80051a2:	2d02      	cmp	r5, #2
 80051a4:	f47f af22 	bne.w	8004fec <_scanf_float+0x64>
 80051a8:	2503      	movs	r5, #3
 80051aa:	e7b6      	b.n	800511a <_scanf_float+0x192>
 80051ac:	2d06      	cmp	r5, #6
 80051ae:	f47f af1d 	bne.w	8004fec <_scanf_float+0x64>
 80051b2:	2507      	movs	r5, #7
 80051b4:	e7b1      	b.n	800511a <_scanf_float+0x192>
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	0591      	lsls	r1, r2, #22
 80051ba:	f57f af17 	bpl.w	8004fec <_scanf_float+0x64>
 80051be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80051c8:	e7a7      	b.n	800511a <_scanf_float+0x192>
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80051d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80051d4:	d006      	beq.n	80051e4 <_scanf_float+0x25c>
 80051d6:	0550      	lsls	r0, r2, #21
 80051d8:	f57f af08 	bpl.w	8004fec <_scanf_float+0x64>
 80051dc:	f1b9 0f00 	cmp.w	r9, #0
 80051e0:	f000 80de 	beq.w	80053a0 <_scanf_float+0x418>
 80051e4:	0591      	lsls	r1, r2, #22
 80051e6:	bf58      	it	pl
 80051e8:	9902      	ldrpl	r1, [sp, #8]
 80051ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051ee:	bf58      	it	pl
 80051f0:	eba9 0101 	subpl.w	r1, r9, r1
 80051f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80051f8:	bf58      	it	pl
 80051fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	f04f 0900 	mov.w	r9, #0
 8005204:	e789      	b.n	800511a <_scanf_float+0x192>
 8005206:	f04f 0a03 	mov.w	sl, #3
 800520a:	e786      	b.n	800511a <_scanf_float+0x192>
 800520c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005210:	4639      	mov	r1, r7
 8005212:	4640      	mov	r0, r8
 8005214:	4798      	blx	r3
 8005216:	2800      	cmp	r0, #0
 8005218:	f43f aedb 	beq.w	8004fd2 <_scanf_float+0x4a>
 800521c:	e6e6      	b.n	8004fec <_scanf_float+0x64>
 800521e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005226:	463a      	mov	r2, r7
 8005228:	4640      	mov	r0, r8
 800522a:	4798      	blx	r3
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	3b01      	subs	r3, #1
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	e6e8      	b.n	8005006 <_scanf_float+0x7e>
 8005234:	1e6b      	subs	r3, r5, #1
 8005236:	2b06      	cmp	r3, #6
 8005238:	d824      	bhi.n	8005284 <_scanf_float+0x2fc>
 800523a:	2d02      	cmp	r5, #2
 800523c:	d836      	bhi.n	80052ac <_scanf_float+0x324>
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	429e      	cmp	r6, r3
 8005242:	f67f aee4 	bls.w	800500e <_scanf_float+0x86>
 8005246:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800524a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800524e:	463a      	mov	r2, r7
 8005250:	4640      	mov	r0, r8
 8005252:	4798      	blx	r3
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	3b01      	subs	r3, #1
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	e7f0      	b.n	800523e <_scanf_float+0x2b6>
 800525c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005260:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005264:	463a      	mov	r2, r7
 8005266:	4640      	mov	r0, r8
 8005268:	4798      	blx	r3
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	3b01      	subs	r3, #1
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005274:	fa5f fa8a 	uxtb.w	sl, sl
 8005278:	f1ba 0f02 	cmp.w	sl, #2
 800527c:	d1ee      	bne.n	800525c <_scanf_float+0x2d4>
 800527e:	3d03      	subs	r5, #3
 8005280:	b2ed      	uxtb	r5, r5
 8005282:	1b76      	subs	r6, r6, r5
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	05da      	lsls	r2, r3, #23
 8005288:	d530      	bpl.n	80052ec <_scanf_float+0x364>
 800528a:	055b      	lsls	r3, r3, #21
 800528c:	d511      	bpl.n	80052b2 <_scanf_float+0x32a>
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	429e      	cmp	r6, r3
 8005292:	f67f aebc 	bls.w	800500e <_scanf_float+0x86>
 8005296:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800529a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800529e:	463a      	mov	r2, r7
 80052a0:	4640      	mov	r0, r8
 80052a2:	4798      	blx	r3
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	e7f0      	b.n	800528e <_scanf_float+0x306>
 80052ac:	46aa      	mov	sl, r5
 80052ae:	46b3      	mov	fp, r6
 80052b0:	e7de      	b.n	8005270 <_scanf_float+0x2e8>
 80052b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	2965      	cmp	r1, #101	@ 0x65
 80052ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80052be:	f106 35ff 	add.w	r5, r6, #4294967295
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	d00c      	beq.n	80052e0 <_scanf_float+0x358>
 80052c6:	2945      	cmp	r1, #69	@ 0x45
 80052c8:	d00a      	beq.n	80052e0 <_scanf_float+0x358>
 80052ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052ce:	463a      	mov	r2, r7
 80052d0:	4640      	mov	r0, r8
 80052d2:	4798      	blx	r3
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052da:	3b01      	subs	r3, #1
 80052dc:	1eb5      	subs	r5, r6, #2
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052e4:	463a      	mov	r2, r7
 80052e6:	4640      	mov	r0, r8
 80052e8:	4798      	blx	r3
 80052ea:	462e      	mov	r6, r5
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	f012 0210 	ands.w	r2, r2, #16
 80052f2:	d001      	beq.n	80052f8 <_scanf_float+0x370>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e68b      	b.n	8005010 <_scanf_float+0x88>
 80052f8:	7032      	strb	r2, [r6, #0]
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005304:	d11c      	bne.n	8005340 <_scanf_float+0x3b8>
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	454b      	cmp	r3, r9
 800530a:	eba3 0209 	sub.w	r2, r3, r9
 800530e:	d123      	bne.n	8005358 <_scanf_float+0x3d0>
 8005310:	9901      	ldr	r1, [sp, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	4640      	mov	r0, r8
 8005316:	f002 fbf7 	bl	8007b08 <_strtod_r>
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	6821      	ldr	r1, [r4, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f011 0f02 	tst.w	r1, #2
 8005324:	ec57 6b10 	vmov	r6, r7, d0
 8005328:	f103 0204 	add.w	r2, r3, #4
 800532c:	d01f      	beq.n	800536e <_scanf_float+0x3e6>
 800532e:	9903      	ldr	r1, [sp, #12]
 8005330:	600a      	str	r2, [r1, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	e9c3 6700 	strd	r6, r7, [r3]
 8005338:	68e3      	ldr	r3, [r4, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60e3      	str	r3, [r4, #12]
 800533e:	e7d9      	b.n	80052f4 <_scanf_float+0x36c>
 8005340:	9b04      	ldr	r3, [sp, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0e4      	beq.n	8005310 <_scanf_float+0x388>
 8005346:	9905      	ldr	r1, [sp, #20]
 8005348:	230a      	movs	r3, #10
 800534a:	3101      	adds	r1, #1
 800534c:	4640      	mov	r0, r8
 800534e:	f002 fc5b 	bl	8007c08 <_strtol_r>
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	9e05      	ldr	r6, [sp, #20]
 8005356:	1ac2      	subs	r2, r0, r3
 8005358:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800535c:	429e      	cmp	r6, r3
 800535e:	bf28      	it	cs
 8005360:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005364:	4910      	ldr	r1, [pc, #64]	@ (80053a8 <_scanf_float+0x420>)
 8005366:	4630      	mov	r0, r6
 8005368:	f000 f8e4 	bl	8005534 <siprintf>
 800536c:	e7d0      	b.n	8005310 <_scanf_float+0x388>
 800536e:	f011 0f04 	tst.w	r1, #4
 8005372:	9903      	ldr	r1, [sp, #12]
 8005374:	600a      	str	r2, [r1, #0]
 8005376:	d1dc      	bne.n	8005332 <_scanf_float+0x3aa>
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	4632      	mov	r2, r6
 800537c:	463b      	mov	r3, r7
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fb fbd3 	bl	8000b2c <__aeabi_dcmpun>
 8005386:	b128      	cbz	r0, 8005394 <_scanf_float+0x40c>
 8005388:	4808      	ldr	r0, [pc, #32]	@ (80053ac <_scanf_float+0x424>)
 800538a:	f000 f9b7 	bl	80056fc <nanf>
 800538e:	ed85 0a00 	vstr	s0, [r5]
 8005392:	e7d1      	b.n	8005338 <_scanf_float+0x3b0>
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb fc26 	bl	8000be8 <__aeabi_d2f>
 800539c:	6028      	str	r0, [r5, #0]
 800539e:	e7cb      	b.n	8005338 <_scanf_float+0x3b0>
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	e629      	b.n	8004ffa <_scanf_float+0x72>
 80053a6:	bf00      	nop
 80053a8:	08008e34 	.word	0x08008e34
 80053ac:	080091cd 	.word	0x080091cd

080053b0 <std>:
 80053b0:	2300      	movs	r3, #0
 80053b2:	b510      	push	{r4, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	e9c0 3300 	strd	r3, r3, [r0]
 80053ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053be:	6083      	str	r3, [r0, #8]
 80053c0:	8181      	strh	r1, [r0, #12]
 80053c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80053c4:	81c2      	strh	r2, [r0, #14]
 80053c6:	6183      	str	r3, [r0, #24]
 80053c8:	4619      	mov	r1, r3
 80053ca:	2208      	movs	r2, #8
 80053cc:	305c      	adds	r0, #92	@ 0x5c
 80053ce:	f000 f914 	bl	80055fa <memset>
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <std+0x58>)
 80053d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <std+0x5c>)
 80053d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <std+0x60>)
 80053dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <std+0x64>)
 80053e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80053e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <std+0x68>)
 80053e4:	6224      	str	r4, [r4, #32]
 80053e6:	429c      	cmp	r4, r3
 80053e8:	d006      	beq.n	80053f8 <std+0x48>
 80053ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ee:	4294      	cmp	r4, r2
 80053f0:	d002      	beq.n	80053f8 <std+0x48>
 80053f2:	33d0      	adds	r3, #208	@ 0xd0
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d105      	bne.n	8005404 <std+0x54>
 80053f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005400:	f000 b978 	b.w	80056f4 <__retarget_lock_init_recursive>
 8005404:	bd10      	pop	{r4, pc}
 8005406:	bf00      	nop
 8005408:	08005575 	.word	0x08005575
 800540c:	08005597 	.word	0x08005597
 8005410:	080055cf 	.word	0x080055cf
 8005414:	080055f3 	.word	0x080055f3
 8005418:	200002f8 	.word	0x200002f8

0800541c <stdio_exit_handler>:
 800541c:	4a02      	ldr	r2, [pc, #8]	@ (8005428 <stdio_exit_handler+0xc>)
 800541e:	4903      	ldr	r1, [pc, #12]	@ (800542c <stdio_exit_handler+0x10>)
 8005420:	4803      	ldr	r0, [pc, #12]	@ (8005430 <stdio_exit_handler+0x14>)
 8005422:	f000 b869 	b.w	80054f8 <_fwalk_sglue>
 8005426:	bf00      	nop
 8005428:	2000000c 	.word	0x2000000c
 800542c:	08007fc5 	.word	0x08007fc5
 8005430:	2000001c 	.word	0x2000001c

08005434 <cleanup_stdio>:
 8005434:	6841      	ldr	r1, [r0, #4]
 8005436:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <cleanup_stdio+0x34>)
 8005438:	4299      	cmp	r1, r3
 800543a:	b510      	push	{r4, lr}
 800543c:	4604      	mov	r4, r0
 800543e:	d001      	beq.n	8005444 <cleanup_stdio+0x10>
 8005440:	f002 fdc0 	bl	8007fc4 <_fflush_r>
 8005444:	68a1      	ldr	r1, [r4, #8]
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <cleanup_stdio+0x38>)
 8005448:	4299      	cmp	r1, r3
 800544a:	d002      	beq.n	8005452 <cleanup_stdio+0x1e>
 800544c:	4620      	mov	r0, r4
 800544e:	f002 fdb9 	bl	8007fc4 <_fflush_r>
 8005452:	68e1      	ldr	r1, [r4, #12]
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <cleanup_stdio+0x3c>)
 8005456:	4299      	cmp	r1, r3
 8005458:	d004      	beq.n	8005464 <cleanup_stdio+0x30>
 800545a:	4620      	mov	r0, r4
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005460:	f002 bdb0 	b.w	8007fc4 <_fflush_r>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop
 8005468:	200002f8 	.word	0x200002f8
 800546c:	20000360 	.word	0x20000360
 8005470:	200003c8 	.word	0x200003c8

08005474 <global_stdio_init.part.0>:
 8005474:	b510      	push	{r4, lr}
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <global_stdio_init.part.0+0x30>)
 8005478:	4c0b      	ldr	r4, [pc, #44]	@ (80054a8 <global_stdio_init.part.0+0x34>)
 800547a:	4a0c      	ldr	r2, [pc, #48]	@ (80054ac <global_stdio_init.part.0+0x38>)
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	4620      	mov	r0, r4
 8005480:	2200      	movs	r2, #0
 8005482:	2104      	movs	r1, #4
 8005484:	f7ff ff94 	bl	80053b0 <std>
 8005488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800548c:	2201      	movs	r2, #1
 800548e:	2109      	movs	r1, #9
 8005490:	f7ff ff8e 	bl	80053b0 <std>
 8005494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005498:	2202      	movs	r2, #2
 800549a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549e:	2112      	movs	r1, #18
 80054a0:	f7ff bf86 	b.w	80053b0 <std>
 80054a4:	20000430 	.word	0x20000430
 80054a8:	200002f8 	.word	0x200002f8
 80054ac:	0800541d 	.word	0x0800541d

080054b0 <__sfp_lock_acquire>:
 80054b0:	4801      	ldr	r0, [pc, #4]	@ (80054b8 <__sfp_lock_acquire+0x8>)
 80054b2:	f000 b920 	b.w	80056f6 <__retarget_lock_acquire_recursive>
 80054b6:	bf00      	nop
 80054b8:	20000439 	.word	0x20000439

080054bc <__sfp_lock_release>:
 80054bc:	4801      	ldr	r0, [pc, #4]	@ (80054c4 <__sfp_lock_release+0x8>)
 80054be:	f000 b91b 	b.w	80056f8 <__retarget_lock_release_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000439 	.word	0x20000439

080054c8 <__sinit>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	4604      	mov	r4, r0
 80054cc:	f7ff fff0 	bl	80054b0 <__sfp_lock_acquire>
 80054d0:	6a23      	ldr	r3, [r4, #32]
 80054d2:	b11b      	cbz	r3, 80054dc <__sinit+0x14>
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d8:	f7ff bff0 	b.w	80054bc <__sfp_lock_release>
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <__sinit+0x28>)
 80054de:	6223      	str	r3, [r4, #32]
 80054e0:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <__sinit+0x2c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f5      	bne.n	80054d4 <__sinit+0xc>
 80054e8:	f7ff ffc4 	bl	8005474 <global_stdio_init.part.0>
 80054ec:	e7f2      	b.n	80054d4 <__sinit+0xc>
 80054ee:	bf00      	nop
 80054f0:	08005435 	.word	0x08005435
 80054f4:	20000430 	.word	0x20000430

080054f8 <_fwalk_sglue>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	4607      	mov	r7, r0
 80054fe:	4688      	mov	r8, r1
 8005500:	4614      	mov	r4, r2
 8005502:	2600      	movs	r6, #0
 8005504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005508:	f1b9 0901 	subs.w	r9, r9, #1
 800550c:	d505      	bpl.n	800551a <_fwalk_sglue+0x22>
 800550e:	6824      	ldr	r4, [r4, #0]
 8005510:	2c00      	cmp	r4, #0
 8005512:	d1f7      	bne.n	8005504 <_fwalk_sglue+0xc>
 8005514:	4630      	mov	r0, r6
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d907      	bls.n	8005530 <_fwalk_sglue+0x38>
 8005520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005524:	3301      	adds	r3, #1
 8005526:	d003      	beq.n	8005530 <_fwalk_sglue+0x38>
 8005528:	4629      	mov	r1, r5
 800552a:	4638      	mov	r0, r7
 800552c:	47c0      	blx	r8
 800552e:	4306      	orrs	r6, r0
 8005530:	3568      	adds	r5, #104	@ 0x68
 8005532:	e7e9      	b.n	8005508 <_fwalk_sglue+0x10>

08005534 <siprintf>:
 8005534:	b40e      	push	{r1, r2, r3}
 8005536:	b500      	push	{lr}
 8005538:	b09c      	sub	sp, #112	@ 0x70
 800553a:	ab1d      	add	r3, sp, #116	@ 0x74
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9006      	str	r0, [sp, #24]
 8005540:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005544:	4809      	ldr	r0, [pc, #36]	@ (800556c <siprintf+0x38>)
 8005546:	9107      	str	r1, [sp, #28]
 8005548:	9104      	str	r1, [sp, #16]
 800554a:	4909      	ldr	r1, [pc, #36]	@ (8005570 <siprintf+0x3c>)
 800554c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	a902      	add	r1, sp, #8
 8005558:	f002 fbb4 	bl	8007cc4 <_svfiprintf_r>
 800555c:	9b02      	ldr	r3, [sp, #8]
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	b01c      	add	sp, #112	@ 0x70
 8005564:	f85d eb04 	ldr.w	lr, [sp], #4
 8005568:	b003      	add	sp, #12
 800556a:	4770      	bx	lr
 800556c:	20000018 	.word	0x20000018
 8005570:	ffff0208 	.word	0xffff0208

08005574 <__sread>:
 8005574:	b510      	push	{r4, lr}
 8005576:	460c      	mov	r4, r1
 8005578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557c:	f000 f86c 	bl	8005658 <_read_r>
 8005580:	2800      	cmp	r0, #0
 8005582:	bfab      	itete	ge
 8005584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005586:	89a3      	ldrhlt	r3, [r4, #12]
 8005588:	181b      	addge	r3, r3, r0
 800558a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800558e:	bfac      	ite	ge
 8005590:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005592:	81a3      	strhlt	r3, [r4, #12]
 8005594:	bd10      	pop	{r4, pc}

08005596 <__swrite>:
 8005596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	461f      	mov	r7, r3
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	05db      	lsls	r3, r3, #23
 80055a0:	4605      	mov	r5, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	4616      	mov	r6, r2
 80055a6:	d505      	bpl.n	80055b4 <__swrite+0x1e>
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	2302      	movs	r3, #2
 80055ae:	2200      	movs	r2, #0
 80055b0:	f000 f840 	bl	8005634 <_lseek_r>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	4628      	mov	r0, r5
 80055c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ca:	f000 b857 	b.w	800567c <_write_r>

080055ce <__sseek>:
 80055ce:	b510      	push	{r4, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d6:	f000 f82d 	bl	8005634 <_lseek_r>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	bf15      	itete	ne
 80055e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055ea:	81a3      	strheq	r3, [r4, #12]
 80055ec:	bf18      	it	ne
 80055ee:	81a3      	strhne	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__sclose>:
 80055f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f6:	f000 b80d 	b.w	8005614 <_close_r>

080055fa <memset>:
 80055fa:	4402      	add	r2, r0
 80055fc:	4603      	mov	r3, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	d100      	bne.n	8005604 <memset+0xa>
 8005602:	4770      	bx	lr
 8005604:	f803 1b01 	strb.w	r1, [r3], #1
 8005608:	e7f9      	b.n	80055fe <memset+0x4>
	...

0800560c <_localeconv_r>:
 800560c:	4800      	ldr	r0, [pc, #0]	@ (8005610 <_localeconv_r+0x4>)
 800560e:	4770      	bx	lr
 8005610:	20000158 	.word	0x20000158

08005614 <_close_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	@ (8005630 <_close_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb febe 	bl	80013a0 <_close>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_close_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_close_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000434 	.word	0x20000434

08005634 <_lseek_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d07      	ldr	r5, [pc, #28]	@ (8005654 <_lseek_r+0x20>)
 8005638:	4604      	mov	r4, r0
 800563a:	4608      	mov	r0, r1
 800563c:	4611      	mov	r1, r2
 800563e:	2200      	movs	r2, #0
 8005640:	602a      	str	r2, [r5, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	f7fb fed3 	bl	80013ee <_lseek>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_lseek_r+0x1e>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_lseek_r+0x1e>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	20000434 	.word	0x20000434

08005658 <_read_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	@ (8005678 <_read_r+0x20>)
 800565c:	4604      	mov	r4, r0
 800565e:	4608      	mov	r0, r1
 8005660:	4611      	mov	r1, r2
 8005662:	2200      	movs	r2, #0
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fb fe61 	bl	800132e <_read>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_read_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_read_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000434 	.word	0x20000434

0800567c <_write_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d07      	ldr	r5, [pc, #28]	@ (800569c <_write_r+0x20>)
 8005680:	4604      	mov	r4, r0
 8005682:	4608      	mov	r0, r1
 8005684:	4611      	mov	r1, r2
 8005686:	2200      	movs	r2, #0
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f7fb fe6c 	bl	8001368 <_write>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_write_r+0x1e>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_write_r+0x1e>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	20000434 	.word	0x20000434

080056a0 <__errno>:
 80056a0:	4b01      	ldr	r3, [pc, #4]	@ (80056a8 <__errno+0x8>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000018 	.word	0x20000018

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4d0d      	ldr	r5, [pc, #52]	@ (80056e4 <__libc_init_array+0x38>)
 80056b0:	4c0d      	ldr	r4, [pc, #52]	@ (80056e8 <__libc_init_array+0x3c>)
 80056b2:	1b64      	subs	r4, r4, r5
 80056b4:	10a4      	asrs	r4, r4, #2
 80056b6:	2600      	movs	r6, #0
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	4d0b      	ldr	r5, [pc, #44]	@ (80056ec <__libc_init_array+0x40>)
 80056be:	4c0c      	ldr	r4, [pc, #48]	@ (80056f0 <__libc_init_array+0x44>)
 80056c0:	f003 fb70 	bl	8008da4 <_init>
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	2600      	movs	r6, #0
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08009238 	.word	0x08009238
 80056e8:	08009238 	.word	0x08009238
 80056ec:	08009238 	.word	0x08009238
 80056f0:	0800923c 	.word	0x0800923c

080056f4 <__retarget_lock_init_recursive>:
 80056f4:	4770      	bx	lr

080056f6 <__retarget_lock_acquire_recursive>:
 80056f6:	4770      	bx	lr

080056f8 <__retarget_lock_release_recursive>:
 80056f8:	4770      	bx	lr
	...

080056fc <nanf>:
 80056fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005704 <nanf+0x8>
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	7fc00000 	.word	0x7fc00000

08005708 <quorem>:
 8005708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	6903      	ldr	r3, [r0, #16]
 800570e:	690c      	ldr	r4, [r1, #16]
 8005710:	42a3      	cmp	r3, r4
 8005712:	4607      	mov	r7, r0
 8005714:	db7e      	blt.n	8005814 <quorem+0x10c>
 8005716:	3c01      	subs	r4, #1
 8005718:	f101 0814 	add.w	r8, r1, #20
 800571c:	00a3      	lsls	r3, r4, #2
 800571e:	f100 0514 	add.w	r5, r0, #20
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800572e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005732:	3301      	adds	r3, #1
 8005734:	429a      	cmp	r2, r3
 8005736:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800573a:	fbb2 f6f3 	udiv	r6, r2, r3
 800573e:	d32e      	bcc.n	800579e <quorem+0x96>
 8005740:	f04f 0a00 	mov.w	sl, #0
 8005744:	46c4      	mov	ip, r8
 8005746:	46ae      	mov	lr, r5
 8005748:	46d3      	mov	fp, sl
 800574a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800574e:	b298      	uxth	r0, r3
 8005750:	fb06 a000 	mla	r0, r6, r0, sl
 8005754:	0c02      	lsrs	r2, r0, #16
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	fb06 2303 	mla	r3, r6, r3, r2
 800575c:	f8de 2000 	ldr.w	r2, [lr]
 8005760:	b280      	uxth	r0, r0
 8005762:	b292      	uxth	r2, r2
 8005764:	1a12      	subs	r2, r2, r0
 8005766:	445a      	add	r2, fp
 8005768:	f8de 0000 	ldr.w	r0, [lr]
 800576c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005770:	b29b      	uxth	r3, r3
 8005772:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005776:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800577a:	b292      	uxth	r2, r2
 800577c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005780:	45e1      	cmp	r9, ip
 8005782:	f84e 2b04 	str.w	r2, [lr], #4
 8005786:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800578a:	d2de      	bcs.n	800574a <quorem+0x42>
 800578c:	9b00      	ldr	r3, [sp, #0]
 800578e:	58eb      	ldr	r3, [r5, r3]
 8005790:	b92b      	cbnz	r3, 800579e <quorem+0x96>
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	3b04      	subs	r3, #4
 8005796:	429d      	cmp	r5, r3
 8005798:	461a      	mov	r2, r3
 800579a:	d32f      	bcc.n	80057fc <quorem+0xf4>
 800579c:	613c      	str	r4, [r7, #16]
 800579e:	4638      	mov	r0, r7
 80057a0:	f001 f9c2 	bl	8006b28 <__mcmp>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	db25      	blt.n	80057f4 <quorem+0xec>
 80057a8:	4629      	mov	r1, r5
 80057aa:	2000      	movs	r0, #0
 80057ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80057b0:	f8d1 c000 	ldr.w	ip, [r1]
 80057b4:	fa1f fe82 	uxth.w	lr, r2
 80057b8:	fa1f f38c 	uxth.w	r3, ip
 80057bc:	eba3 030e 	sub.w	r3, r3, lr
 80057c0:	4403      	add	r3, r0
 80057c2:	0c12      	lsrs	r2, r2, #16
 80057c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057d2:	45c1      	cmp	r9, r8
 80057d4:	f841 3b04 	str.w	r3, [r1], #4
 80057d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057dc:	d2e6      	bcs.n	80057ac <quorem+0xa4>
 80057de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057e6:	b922      	cbnz	r2, 80057f2 <quorem+0xea>
 80057e8:	3b04      	subs	r3, #4
 80057ea:	429d      	cmp	r5, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	d30b      	bcc.n	8005808 <quorem+0x100>
 80057f0:	613c      	str	r4, [r7, #16]
 80057f2:	3601      	adds	r6, #1
 80057f4:	4630      	mov	r0, r6
 80057f6:	b003      	add	sp, #12
 80057f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	3b04      	subs	r3, #4
 8005800:	2a00      	cmp	r2, #0
 8005802:	d1cb      	bne.n	800579c <quorem+0x94>
 8005804:	3c01      	subs	r4, #1
 8005806:	e7c6      	b.n	8005796 <quorem+0x8e>
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	3b04      	subs	r3, #4
 800580c:	2a00      	cmp	r2, #0
 800580e:	d1ef      	bne.n	80057f0 <quorem+0xe8>
 8005810:	3c01      	subs	r4, #1
 8005812:	e7ea      	b.n	80057ea <quorem+0xe2>
 8005814:	2000      	movs	r0, #0
 8005816:	e7ee      	b.n	80057f6 <quorem+0xee>

08005818 <_dtoa_r>:
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	69c7      	ldr	r7, [r0, #28]
 800581e:	b099      	sub	sp, #100	@ 0x64
 8005820:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005824:	ec55 4b10 	vmov	r4, r5, d0
 8005828:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800582a:	9109      	str	r1, [sp, #36]	@ 0x24
 800582c:	4683      	mov	fp, r0
 800582e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005830:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005832:	b97f      	cbnz	r7, 8005854 <_dtoa_r+0x3c>
 8005834:	2010      	movs	r0, #16
 8005836:	f000 fdfd 	bl	8006434 <malloc>
 800583a:	4602      	mov	r2, r0
 800583c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005840:	b920      	cbnz	r0, 800584c <_dtoa_r+0x34>
 8005842:	4ba7      	ldr	r3, [pc, #668]	@ (8005ae0 <_dtoa_r+0x2c8>)
 8005844:	21ef      	movs	r1, #239	@ 0xef
 8005846:	48a7      	ldr	r0, [pc, #668]	@ (8005ae4 <_dtoa_r+0x2cc>)
 8005848:	f002 fc36 	bl	80080b8 <__assert_func>
 800584c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005850:	6007      	str	r7, [r0, #0]
 8005852:	60c7      	str	r7, [r0, #12]
 8005854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	b159      	cbz	r1, 8005874 <_dtoa_r+0x5c>
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	604a      	str	r2, [r1, #4]
 8005860:	2301      	movs	r3, #1
 8005862:	4093      	lsls	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
 8005866:	4658      	mov	r0, fp
 8005868:	f000 feda 	bl	8006620 <_Bfree>
 800586c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	1e2b      	subs	r3, r5, #0
 8005876:	bfb9      	ittee	lt
 8005878:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	9303      	strlt	r3, [sp, #12]
 800587e:	2300      	movge	r3, #0
 8005880:	6033      	strge	r3, [r6, #0]
 8005882:	9f03      	ldr	r7, [sp, #12]
 8005884:	4b98      	ldr	r3, [pc, #608]	@ (8005ae8 <_dtoa_r+0x2d0>)
 8005886:	bfbc      	itt	lt
 8005888:	2201      	movlt	r2, #1
 800588a:	6032      	strlt	r2, [r6, #0]
 800588c:	43bb      	bics	r3, r7
 800588e:	d112      	bne.n	80058b6 <_dtoa_r+0x9e>
 8005890:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005892:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800589c:	4323      	orrs	r3, r4
 800589e:	f000 854d 	beq.w	800633c <_dtoa_r+0xb24>
 80058a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005afc <_dtoa_r+0x2e4>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 854f 	beq.w	800634c <_dtoa_r+0xb34>
 80058ae:	f10a 0303 	add.w	r3, sl, #3
 80058b2:	f000 bd49 	b.w	8006348 <_dtoa_r+0xb30>
 80058b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	ec51 0b17 	vmov	r0, r1, d7
 80058c0:	2300      	movs	r3, #0
 80058c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80058c6:	f7fb f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ca:	4680      	mov	r8, r0
 80058cc:	b158      	cbz	r0, 80058e6 <_dtoa_r+0xce>
 80058ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058d0:	2301      	movs	r3, #1
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058d6:	b113      	cbz	r3, 80058de <_dtoa_r+0xc6>
 80058d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058da:	4b84      	ldr	r3, [pc, #528]	@ (8005aec <_dtoa_r+0x2d4>)
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005b00 <_dtoa_r+0x2e8>
 80058e2:	f000 bd33 	b.w	800634c <_dtoa_r+0xb34>
 80058e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80058ea:	aa16      	add	r2, sp, #88	@ 0x58
 80058ec:	a917      	add	r1, sp, #92	@ 0x5c
 80058ee:	4658      	mov	r0, fp
 80058f0:	f001 fa3a 	bl	8006d68 <__d2b>
 80058f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058f8:	4681      	mov	r9, r0
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d077      	beq.n	80059ee <_dtoa_r+0x1d6>
 80058fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005900:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800590c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005910:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005914:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005918:	4619      	mov	r1, r3
 800591a:	2200      	movs	r2, #0
 800591c:	4b74      	ldr	r3, [pc, #464]	@ (8005af0 <_dtoa_r+0x2d8>)
 800591e:	f7fa fcb3 	bl	8000288 <__aeabi_dsub>
 8005922:	a369      	add	r3, pc, #420	@ (adr r3, 8005ac8 <_dtoa_r+0x2b0>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f7fa fe66 	bl	80005f8 <__aeabi_dmul>
 800592c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ad0 <_dtoa_r+0x2b8>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fcab 	bl	800028c <__adddf3>
 8005936:	4604      	mov	r4, r0
 8005938:	4630      	mov	r0, r6
 800593a:	460d      	mov	r5, r1
 800593c:	f7fa fdf2 	bl	8000524 <__aeabi_i2d>
 8005940:	a365      	add	r3, pc, #404	@ (adr r3, 8005ad8 <_dtoa_r+0x2c0>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fa fe57 	bl	80005f8 <__aeabi_dmul>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4620      	mov	r0, r4
 8005950:	4629      	mov	r1, r5
 8005952:	f7fa fc9b 	bl	800028c <__adddf3>
 8005956:	4604      	mov	r4, r0
 8005958:	460d      	mov	r5, r1
 800595a:	f7fb f8fd 	bl	8000b58 <__aeabi_d2iz>
 800595e:	2200      	movs	r2, #0
 8005960:	4607      	mov	r7, r0
 8005962:	2300      	movs	r3, #0
 8005964:	4620      	mov	r0, r4
 8005966:	4629      	mov	r1, r5
 8005968:	f7fb f8b8 	bl	8000adc <__aeabi_dcmplt>
 800596c:	b140      	cbz	r0, 8005980 <_dtoa_r+0x168>
 800596e:	4638      	mov	r0, r7
 8005970:	f7fa fdd8 	bl	8000524 <__aeabi_i2d>
 8005974:	4622      	mov	r2, r4
 8005976:	462b      	mov	r3, r5
 8005978:	f7fb f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800597c:	b900      	cbnz	r0, 8005980 <_dtoa_r+0x168>
 800597e:	3f01      	subs	r7, #1
 8005980:	2f16      	cmp	r7, #22
 8005982:	d851      	bhi.n	8005a28 <_dtoa_r+0x210>
 8005984:	4b5b      	ldr	r3, [pc, #364]	@ (8005af4 <_dtoa_r+0x2dc>)
 8005986:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005992:	f7fb f8a3 	bl	8000adc <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	d048      	beq.n	8005a2c <_dtoa_r+0x214>
 800599a:	3f01      	subs	r7, #1
 800599c:	2300      	movs	r3, #0
 800599e:	9312      	str	r3, [sp, #72]	@ 0x48
 80059a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059a2:	1b9b      	subs	r3, r3, r6
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	bf44      	itt	mi
 80059a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80059ac:	2300      	movmi	r3, #0
 80059ae:	9208      	str	r2, [sp, #32]
 80059b0:	bf54      	ite	pl
 80059b2:	f04f 0800 	movpl.w	r8, #0
 80059b6:	9308      	strmi	r3, [sp, #32]
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	db39      	blt.n	8005a30 <_dtoa_r+0x218>
 80059bc:	9b08      	ldr	r3, [sp, #32]
 80059be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80059c0:	443b      	add	r3, r7
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	2300      	movs	r3, #0
 80059c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80059c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d864      	bhi.n	8005a98 <_dtoa_r+0x280>
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	bfc4      	itt	gt
 80059d2:	3b04      	subgt	r3, #4
 80059d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80059d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d8:	f1a3 0302 	sub.w	r3, r3, #2
 80059dc:	bfcc      	ite	gt
 80059de:	2400      	movgt	r4, #0
 80059e0:	2401      	movle	r4, #1
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d863      	bhi.n	8005aae <_dtoa_r+0x296>
 80059e6:	e8df f003 	tbb	[pc, r3]
 80059ea:	372a      	.short	0x372a
 80059ec:	5535      	.short	0x5535
 80059ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80059f2:	441e      	add	r6, r3
 80059f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	bfc1      	itttt	gt
 80059fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a00:	409f      	lslgt	r7, r3
 8005a02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a0a:	bfd6      	itet	le
 8005a0c:	f1c3 0320 	rsble	r3, r3, #32
 8005a10:	ea47 0003 	orrgt.w	r0, r7, r3
 8005a14:	fa04 f003 	lslle.w	r0, r4, r3
 8005a18:	f7fa fd74 	bl	8000504 <__aeabi_ui2d>
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a22:	3e01      	subs	r6, #1
 8005a24:	9214      	str	r2, [sp, #80]	@ 0x50
 8005a26:	e777      	b.n	8005918 <_dtoa_r+0x100>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7b8      	b.n	800599e <_dtoa_r+0x186>
 8005a2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005a2e:	e7b7      	b.n	80059a0 <_dtoa_r+0x188>
 8005a30:	427b      	negs	r3, r7
 8005a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a34:	2300      	movs	r3, #0
 8005a36:	eba8 0807 	sub.w	r8, r8, r7
 8005a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a3c:	e7c4      	b.n	80059c8 <_dtoa_r+0x1b0>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc35      	bgt.n	8005ab4 <_dtoa_r+0x29c>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	9307      	str	r3, [sp, #28]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a52:	e00b      	b.n	8005a6c <_dtoa_r+0x254>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7f3      	b.n	8005a40 <_dtoa_r+0x228>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	bfb8      	it	lt
 8005a6a:	2301      	movlt	r3, #1
 8005a6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a70:	2100      	movs	r1, #0
 8005a72:	2204      	movs	r2, #4
 8005a74:	f102 0514 	add.w	r5, r2, #20
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	d91f      	bls.n	8005abc <_dtoa_r+0x2a4>
 8005a7c:	6041      	str	r1, [r0, #4]
 8005a7e:	4658      	mov	r0, fp
 8005a80:	f000 fd8e 	bl	80065a0 <_Balloc>
 8005a84:	4682      	mov	sl, r0
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d13c      	bne.n	8005b04 <_dtoa_r+0x2ec>
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <_dtoa_r+0x2e0>)
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a92:	e6d8      	b.n	8005846 <_dtoa_r+0x2e>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e7e0      	b.n	8005a5a <_dtoa_r+0x242>
 8005a98:	2401      	movs	r4, #1
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	9307      	str	r3, [sp, #28]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2312      	movs	r3, #18
 8005aac:	e7d0      	b.n	8005a50 <_dtoa_r+0x238>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ab2:	e7f5      	b.n	8005aa0 <_dtoa_r+0x288>
 8005ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	9307      	str	r3, [sp, #28]
 8005aba:	e7d7      	b.n	8005a6c <_dtoa_r+0x254>
 8005abc:	3101      	adds	r1, #1
 8005abe:	0052      	lsls	r2, r2, #1
 8005ac0:	e7d8      	b.n	8005a74 <_dtoa_r+0x25c>
 8005ac2:	bf00      	nop
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	636f4361 	.word	0x636f4361
 8005acc:	3fd287a7 	.word	0x3fd287a7
 8005ad0:	8b60c8b3 	.word	0x8b60c8b3
 8005ad4:	3fc68a28 	.word	0x3fc68a28
 8005ad8:	509f79fb 	.word	0x509f79fb
 8005adc:	3fd34413 	.word	0x3fd34413
 8005ae0:	08008e46 	.word	0x08008e46
 8005ae4:	08008e5d 	.word	0x08008e5d
 8005ae8:	7ff00000 	.word	0x7ff00000
 8005aec:	08008e11 	.word	0x08008e11
 8005af0:	3ff80000 	.word	0x3ff80000
 8005af4:	08008f58 	.word	0x08008f58
 8005af8:	08008eb5 	.word	0x08008eb5
 8005afc:	08008e42 	.word	0x08008e42
 8005b00:	08008e10 	.word	0x08008e10
 8005b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b08:	6018      	str	r0, [r3, #0]
 8005b0a:	9b07      	ldr	r3, [sp, #28]
 8005b0c:	2b0e      	cmp	r3, #14
 8005b0e:	f200 80a4 	bhi.w	8005c5a <_dtoa_r+0x442>
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	f000 80a1 	beq.w	8005c5a <_dtoa_r+0x442>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	dd33      	ble.n	8005b84 <_dtoa_r+0x36c>
 8005b1c:	4bad      	ldr	r3, [pc, #692]	@ (8005dd4 <_dtoa_r+0x5bc>)
 8005b1e:	f007 020f 	and.w	r2, r7, #15
 8005b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b26:	ed93 7b00 	vldr	d7, [r3]
 8005b2a:	05f8      	lsls	r0, r7, #23
 8005b2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b34:	d516      	bpl.n	8005b64 <_dtoa_r+0x34c>
 8005b36:	4ba8      	ldr	r3, [pc, #672]	@ (8005dd8 <_dtoa_r+0x5c0>)
 8005b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b40:	f7fa fe84 	bl	800084c <__aeabi_ddiv>
 8005b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b48:	f004 040f 	and.w	r4, r4, #15
 8005b4c:	2603      	movs	r6, #3
 8005b4e:	4da2      	ldr	r5, [pc, #648]	@ (8005dd8 <_dtoa_r+0x5c0>)
 8005b50:	b954      	cbnz	r4, 8005b68 <_dtoa_r+0x350>
 8005b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b5a:	f7fa fe77 	bl	800084c <__aeabi_ddiv>
 8005b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b62:	e028      	b.n	8005bb6 <_dtoa_r+0x39e>
 8005b64:	2602      	movs	r6, #2
 8005b66:	e7f2      	b.n	8005b4e <_dtoa_r+0x336>
 8005b68:	07e1      	lsls	r1, r4, #31
 8005b6a:	d508      	bpl.n	8005b7e <_dtoa_r+0x366>
 8005b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b74:	f7fa fd40 	bl	80005f8 <__aeabi_dmul>
 8005b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	1064      	asrs	r4, r4, #1
 8005b80:	3508      	adds	r5, #8
 8005b82:	e7e5      	b.n	8005b50 <_dtoa_r+0x338>
 8005b84:	f000 80d2 	beq.w	8005d2c <_dtoa_r+0x514>
 8005b88:	427c      	negs	r4, r7
 8005b8a:	4b92      	ldr	r3, [pc, #584]	@ (8005dd4 <_dtoa_r+0x5bc>)
 8005b8c:	4d92      	ldr	r5, [pc, #584]	@ (8005dd8 <_dtoa_r+0x5c0>)
 8005b8e:	f004 020f 	and.w	r2, r4, #15
 8005b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b9e:	f7fa fd2b 	bl	80005f8 <__aeabi_dmul>
 8005ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba6:	1124      	asrs	r4, r4, #4
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2602      	movs	r6, #2
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	f040 80b2 	bne.w	8005d16 <_dtoa_r+0x4fe>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1d3      	bne.n	8005b5e <_dtoa_r+0x346>
 8005bb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80b7 	beq.w	8005d30 <_dtoa_r+0x518>
 8005bc2:	4b86      	ldr	r3, [pc, #536]	@ (8005ddc <_dtoa_r+0x5c4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa ff87 	bl	8000adc <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f000 80ae 	beq.w	8005d30 <_dtoa_r+0x518>
 8005bd4:	9b07      	ldr	r3, [sp, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80aa 	beq.w	8005d30 <_dtoa_r+0x518>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd37      	ble.n	8005c52 <_dtoa_r+0x43a>
 8005be2:	1e7b      	subs	r3, r7, #1
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	4620      	mov	r0, r4
 8005be8:	4b7d      	ldr	r3, [pc, #500]	@ (8005de0 <_dtoa_r+0x5c8>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa fd03 	bl	80005f8 <__aeabi_dmul>
 8005bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf6:	9c00      	ldr	r4, [sp, #0]
 8005bf8:	3601      	adds	r6, #1
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7fa fc92 	bl	8000524 <__aeabi_i2d>
 8005c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c04:	f7fa fcf8 	bl	80005f8 <__aeabi_dmul>
 8005c08:	4b76      	ldr	r3, [pc, #472]	@ (8005de4 <_dtoa_r+0x5cc>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f7fa fb3e 	bl	800028c <__adddf3>
 8005c10:	4605      	mov	r5, r0
 8005c12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c16:	2c00      	cmp	r4, #0
 8005c18:	f040 808d 	bne.w	8005d36 <_dtoa_r+0x51e>
 8005c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c20:	4b71      	ldr	r3, [pc, #452]	@ (8005de8 <_dtoa_r+0x5d0>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	f7fa fb30 	bl	8000288 <__aeabi_dsub>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4633      	mov	r3, r6
 8005c34:	f7fa ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f040 828b 	bne.w	8006154 <_dtoa_r+0x93c>
 8005c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c42:	462a      	mov	r2, r5
 8005c44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c48:	f7fa ff48 	bl	8000adc <__aeabi_dcmplt>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	f040 8128 	bne.w	8005ea2 <_dtoa_r+0x68a>
 8005c52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f2c0 815a 	blt.w	8005f16 <_dtoa_r+0x6fe>
 8005c62:	2f0e      	cmp	r7, #14
 8005c64:	f300 8157 	bgt.w	8005f16 <_dtoa_r+0x6fe>
 8005c68:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd4 <_dtoa_r+0x5bc>)
 8005c6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c6e:	ed93 7b00 	vldr	d7, [r3]
 8005c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	ed8d 7b00 	vstr	d7, [sp]
 8005c7a:	da03      	bge.n	8005c84 <_dtoa_r+0x46c>
 8005c7c:	9b07      	ldr	r3, [sp, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f340 8101 	ble.w	8005e86 <_dtoa_r+0x66e>
 8005c84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c88:	4656      	mov	r6, sl
 8005c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa fddb 	bl	800084c <__aeabi_ddiv>
 8005c96:	f7fa ff5f 	bl	8000b58 <__aeabi_d2iz>
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	f7fa fc42 	bl	8000524 <__aeabi_i2d>
 8005ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca4:	f7fa fca8 	bl	80005f8 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cb4:	f7fa fae8 	bl	8000288 <__aeabi_dsub>
 8005cb8:	f806 4b01 	strb.w	r4, [r6], #1
 8005cbc:	9d07      	ldr	r5, [sp, #28]
 8005cbe:	eba6 040a 	sub.w	r4, r6, sl
 8005cc2:	42a5      	cmp	r5, r4
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	f040 8117 	bne.w	8005efa <_dtoa_r+0x6e2>
 8005ccc:	f7fa fade 	bl	800028c <__adddf3>
 8005cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	f7fa ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f040 80f9 	bne.w	8005ed4 <_dtoa_r+0x6bc>
 8005ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7fa feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cee:	b118      	cbz	r0, 8005cf8 <_dtoa_r+0x4e0>
 8005cf0:	f018 0f01 	tst.w	r8, #1
 8005cf4:	f040 80ee 	bne.w	8005ed4 <_dtoa_r+0x6bc>
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	4658      	mov	r0, fp
 8005cfc:	f000 fc90 	bl	8006620 <_Bfree>
 8005d00:	2300      	movs	r3, #0
 8005d02:	7033      	strb	r3, [r6, #0]
 8005d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d06:	3701      	adds	r7, #1
 8005d08:	601f      	str	r7, [r3, #0]
 8005d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 831d 	beq.w	800634c <_dtoa_r+0xb34>
 8005d12:	601e      	str	r6, [r3, #0]
 8005d14:	e31a      	b.n	800634c <_dtoa_r+0xb34>
 8005d16:	07e2      	lsls	r2, r4, #31
 8005d18:	d505      	bpl.n	8005d26 <_dtoa_r+0x50e>
 8005d1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d1e:	f7fa fc6b 	bl	80005f8 <__aeabi_dmul>
 8005d22:	3601      	adds	r6, #1
 8005d24:	2301      	movs	r3, #1
 8005d26:	1064      	asrs	r4, r4, #1
 8005d28:	3508      	adds	r5, #8
 8005d2a:	e73f      	b.n	8005bac <_dtoa_r+0x394>
 8005d2c:	2602      	movs	r6, #2
 8005d2e:	e742      	b.n	8005bb6 <_dtoa_r+0x39e>
 8005d30:	9c07      	ldr	r4, [sp, #28]
 8005d32:	9704      	str	r7, [sp, #16]
 8005d34:	e761      	b.n	8005bfa <_dtoa_r+0x3e2>
 8005d36:	4b27      	ldr	r3, [pc, #156]	@ (8005dd4 <_dtoa_r+0x5bc>)
 8005d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d42:	4454      	add	r4, sl
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d053      	beq.n	8005df0 <_dtoa_r+0x5d8>
 8005d48:	4928      	ldr	r1, [pc, #160]	@ (8005dec <_dtoa_r+0x5d4>)
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fa fd7e 	bl	800084c <__aeabi_ddiv>
 8005d50:	4633      	mov	r3, r6
 8005d52:	462a      	mov	r2, r5
 8005d54:	f7fa fa98 	bl	8000288 <__aeabi_dsub>
 8005d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d5c:	4656      	mov	r6, sl
 8005d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d62:	f7fa fef9 	bl	8000b58 <__aeabi_d2iz>
 8005d66:	4605      	mov	r5, r0
 8005d68:	f7fa fbdc 	bl	8000524 <__aeabi_i2d>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d74:	f7fa fa88 	bl	8000288 <__aeabi_dsub>
 8005d78:	3530      	adds	r5, #48	@ 0x30
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d82:	f806 5b01 	strb.w	r5, [r6], #1
 8005d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d8a:	f7fa fea7 	bl	8000adc <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d171      	bne.n	8005e76 <_dtoa_r+0x65e>
 8005d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d96:	4911      	ldr	r1, [pc, #68]	@ (8005ddc <_dtoa_r+0x5c4>)
 8005d98:	2000      	movs	r0, #0
 8005d9a:	f7fa fa75 	bl	8000288 <__aeabi_dsub>
 8005d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005da2:	f7fa fe9b 	bl	8000adc <__aeabi_dcmplt>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f040 8095 	bne.w	8005ed6 <_dtoa_r+0x6be>
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	f43f af50 	beq.w	8005c52 <_dtoa_r+0x43a>
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005db6:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <_dtoa_r+0x5c8>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	f7fa fc1d 	bl	80005f8 <__aeabi_dmul>
 8005dbe:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <_dtoa_r+0x5c8>)
 8005dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dca:	f7fa fc15 	bl	80005f8 <__aeabi_dmul>
 8005dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dd2:	e7c4      	b.n	8005d5e <_dtoa_r+0x546>
 8005dd4:	08008f58 	.word	0x08008f58
 8005dd8:	08008f30 	.word	0x08008f30
 8005ddc:	3ff00000 	.word	0x3ff00000
 8005de0:	40240000 	.word	0x40240000
 8005de4:	401c0000 	.word	0x401c0000
 8005de8:	40140000 	.word	0x40140000
 8005dec:	3fe00000 	.word	0x3fe00000
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8005dfe:	4656      	mov	r6, sl
 8005e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e04:	f7fa fea8 	bl	8000b58 <__aeabi_d2iz>
 8005e08:	4605      	mov	r5, r0
 8005e0a:	f7fa fb8b 	bl	8000524 <__aeabi_i2d>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	f7fa fa37 	bl	8000288 <__aeabi_dsub>
 8005e1a:	3530      	adds	r5, #48	@ 0x30
 8005e1c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	d124      	bne.n	8005e7a <_dtoa_r+0x662>
 8005e30:	4bac      	ldr	r3, [pc, #688]	@ (80060e4 <_dtoa_r+0x8cc>)
 8005e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e36:	f7fa fa29 	bl	800028c <__adddf3>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e42:	f7fa fe69 	bl	8000b18 <__aeabi_dcmpgt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d145      	bne.n	8005ed6 <_dtoa_r+0x6be>
 8005e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e4e:	49a5      	ldr	r1, [pc, #660]	@ (80060e4 <_dtoa_r+0x8cc>)
 8005e50:	2000      	movs	r0, #0
 8005e52:	f7fa fa19 	bl	8000288 <__aeabi_dsub>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5e:	f7fa fe3d 	bl	8000adc <__aeabi_dcmplt>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f43f aef5 	beq.w	8005c52 <_dtoa_r+0x43a>
 8005e68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e6a:	1e73      	subs	r3, r6, #1
 8005e6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e72:	2b30      	cmp	r3, #48	@ 0x30
 8005e74:	d0f8      	beq.n	8005e68 <_dtoa_r+0x650>
 8005e76:	9f04      	ldr	r7, [sp, #16]
 8005e78:	e73e      	b.n	8005cf8 <_dtoa_r+0x4e0>
 8005e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80060e8 <_dtoa_r+0x8d0>)
 8005e7c:	f7fa fbbc 	bl	80005f8 <__aeabi_dmul>
 8005e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e84:	e7bc      	b.n	8005e00 <_dtoa_r+0x5e8>
 8005e86:	d10c      	bne.n	8005ea2 <_dtoa_r+0x68a>
 8005e88:	4b98      	ldr	r3, [pc, #608]	@ (80060ec <_dtoa_r+0x8d4>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e90:	f7fa fbb2 	bl	80005f8 <__aeabi_dmul>
 8005e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e98:	f7fa fe34 	bl	8000b04 <__aeabi_dcmpge>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f000 8157 	beq.w	8006150 <_dtoa_r+0x938>
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	4625      	mov	r5, r4
 8005ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	4656      	mov	r6, sl
 8005eae:	2700      	movs	r7, #0
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4658      	mov	r0, fp
 8005eb4:	f000 fbb4 	bl	8006620 <_Bfree>
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	d0dc      	beq.n	8005e76 <_dtoa_r+0x65e>
 8005ebc:	b12f      	cbz	r7, 8005eca <_dtoa_r+0x6b2>
 8005ebe:	42af      	cmp	r7, r5
 8005ec0:	d003      	beq.n	8005eca <_dtoa_r+0x6b2>
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f000 fbab 	bl	8006620 <_Bfree>
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4658      	mov	r0, fp
 8005ece:	f000 fba7 	bl	8006620 <_Bfree>
 8005ed2:	e7d0      	b.n	8005e76 <_dtoa_r+0x65e>
 8005ed4:	9704      	str	r7, [sp, #16]
 8005ed6:	4633      	mov	r3, r6
 8005ed8:	461e      	mov	r6, r3
 8005eda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ede:	2a39      	cmp	r2, #57	@ 0x39
 8005ee0:	d107      	bne.n	8005ef2 <_dtoa_r+0x6da>
 8005ee2:	459a      	cmp	sl, r3
 8005ee4:	d1f8      	bne.n	8005ed8 <_dtoa_r+0x6c0>
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	3201      	adds	r2, #1
 8005eea:	9204      	str	r2, [sp, #16]
 8005eec:	2230      	movs	r2, #48	@ 0x30
 8005eee:	f88a 2000 	strb.w	r2, [sl]
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	3201      	adds	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e7bd      	b.n	8005e76 <_dtoa_r+0x65e>
 8005efa:	4b7b      	ldr	r3, [pc, #492]	@ (80060e8 <_dtoa_r+0x8d0>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	f7fa fb7b 	bl	80005f8 <__aeabi_dmul>
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	f7fa fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f aebb 	beq.w	8005c8a <_dtoa_r+0x472>
 8005f14:	e6f0      	b.n	8005cf8 <_dtoa_r+0x4e0>
 8005f16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	f000 80db 	beq.w	80060d4 <_dtoa_r+0x8bc>
 8005f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f20:	2a01      	cmp	r2, #1
 8005f22:	f300 80bf 	bgt.w	80060a4 <_dtoa_r+0x88c>
 8005f26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	f000 80b7 	beq.w	800609c <_dtoa_r+0x884>
 8005f2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f34:	4646      	mov	r6, r8
 8005f36:	9a08      	ldr	r2, [sp, #32]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	441a      	add	r2, r3
 8005f3c:	4658      	mov	r0, fp
 8005f3e:	4498      	add	r8, r3
 8005f40:	9208      	str	r2, [sp, #32]
 8005f42:	f000 fc6b 	bl	800681c <__i2b>
 8005f46:	4605      	mov	r5, r0
 8005f48:	b15e      	cbz	r6, 8005f62 <_dtoa_r+0x74a>
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd08      	ble.n	8005f62 <_dtoa_r+0x74a>
 8005f50:	42b3      	cmp	r3, r6
 8005f52:	9a08      	ldr	r2, [sp, #32]
 8005f54:	bfa8      	it	ge
 8005f56:	4633      	movge	r3, r6
 8005f58:	eba8 0803 	sub.w	r8, r8, r3
 8005f5c:	1af6      	subs	r6, r6, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f64:	b1f3      	cbz	r3, 8005fa4 <_dtoa_r+0x78c>
 8005f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80b7 	beq.w	80060dc <_dtoa_r+0x8c4>
 8005f6e:	b18c      	cbz	r4, 8005f94 <_dtoa_r+0x77c>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4622      	mov	r2, r4
 8005f74:	4658      	mov	r0, fp
 8005f76:	f000 fd11 	bl	800699c <__pow5mult>
 8005f7a:	464a      	mov	r2, r9
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4605      	mov	r5, r0
 8005f80:	4658      	mov	r0, fp
 8005f82:	f000 fc61 	bl	8006848 <__multiply>
 8005f86:	4649      	mov	r1, r9
 8005f88:	9004      	str	r0, [sp, #16]
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	f000 fb48 	bl	8006620 <_Bfree>
 8005f90:	9b04      	ldr	r3, [sp, #16]
 8005f92:	4699      	mov	r9, r3
 8005f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f96:	1b1a      	subs	r2, r3, r4
 8005f98:	d004      	beq.n	8005fa4 <_dtoa_r+0x78c>
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4658      	mov	r0, fp
 8005f9e:	f000 fcfd 	bl	800699c <__pow5mult>
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f000 fc38 	bl	800681c <__i2b>
 8005fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fae:	4604      	mov	r4, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 81cf 	beq.w	8006354 <_dtoa_r+0xb3c>
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4658      	mov	r0, fp
 8005fbc:	f000 fcee 	bl	800699c <__pow5mult>
 8005fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	f300 8095 	bgt.w	80060f4 <_dtoa_r+0x8dc>
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f040 8087 	bne.w	80060e0 <_dtoa_r+0x8c8>
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 8089 	bne.w	80060f0 <_dtoa_r+0x8d8>
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fe4:	0d1b      	lsrs	r3, r3, #20
 8005fe6:	051b      	lsls	r3, r3, #20
 8005fe8:	b12b      	cbz	r3, 8005ff6 <_dtoa_r+0x7de>
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	3301      	adds	r3, #1
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	f108 0801 	add.w	r8, r8, #1
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 81b0 	beq.w	8006360 <_dtoa_r+0xb48>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006006:	6918      	ldr	r0, [r3, #16]
 8006008:	f000 fbbc 	bl	8006784 <__hi0bits>
 800600c:	f1c0 0020 	rsb	r0, r0, #32
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	4418      	add	r0, r3
 8006014:	f010 001f 	ands.w	r0, r0, #31
 8006018:	d077      	beq.n	800610a <_dtoa_r+0x8f2>
 800601a:	f1c0 0320 	rsb	r3, r0, #32
 800601e:	2b04      	cmp	r3, #4
 8006020:	dd6b      	ble.n	80060fa <_dtoa_r+0x8e2>
 8006022:	9b08      	ldr	r3, [sp, #32]
 8006024:	f1c0 001c 	rsb	r0, r0, #28
 8006028:	4403      	add	r3, r0
 800602a:	4480      	add	r8, r0
 800602c:	4406      	add	r6, r0
 800602e:	9308      	str	r3, [sp, #32]
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	dd05      	ble.n	8006042 <_dtoa_r+0x82a>
 8006036:	4649      	mov	r1, r9
 8006038:	4642      	mov	r2, r8
 800603a:	4658      	mov	r0, fp
 800603c:	f000 fd08 	bl	8006a50 <__lshift>
 8006040:	4681      	mov	r9, r0
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dd05      	ble.n	8006054 <_dtoa_r+0x83c>
 8006048:	4621      	mov	r1, r4
 800604a:	461a      	mov	r2, r3
 800604c:	4658      	mov	r0, fp
 800604e:	f000 fcff 	bl	8006a50 <__lshift>
 8006052:	4604      	mov	r4, r0
 8006054:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006056:	2b00      	cmp	r3, #0
 8006058:	d059      	beq.n	800610e <_dtoa_r+0x8f6>
 800605a:	4621      	mov	r1, r4
 800605c:	4648      	mov	r0, r9
 800605e:	f000 fd63 	bl	8006b28 <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	da53      	bge.n	800610e <_dtoa_r+0x8f6>
 8006066:	1e7b      	subs	r3, r7, #1
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	4649      	mov	r1, r9
 800606c:	2300      	movs	r3, #0
 800606e:	220a      	movs	r2, #10
 8006070:	4658      	mov	r0, fp
 8006072:	f000 faf7 	bl	8006664 <__multadd>
 8006076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006078:	4681      	mov	r9, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8172 	beq.w	8006364 <_dtoa_r+0xb4c>
 8006080:	2300      	movs	r3, #0
 8006082:	4629      	mov	r1, r5
 8006084:	220a      	movs	r2, #10
 8006086:	4658      	mov	r0, fp
 8006088:	f000 faec 	bl	8006664 <__multadd>
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	4605      	mov	r5, r0
 8006092:	dc67      	bgt.n	8006164 <_dtoa_r+0x94c>
 8006094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006096:	2b02      	cmp	r3, #2
 8006098:	dc41      	bgt.n	800611e <_dtoa_r+0x906>
 800609a:	e063      	b.n	8006164 <_dtoa_r+0x94c>
 800609c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800609e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060a2:	e746      	b.n	8005f32 <_dtoa_r+0x71a>
 80060a4:	9b07      	ldr	r3, [sp, #28]
 80060a6:	1e5c      	subs	r4, r3, #1
 80060a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	bfbf      	itttt	lt
 80060ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80060b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80060b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80060b4:	1ae3      	sublt	r3, r4, r3
 80060b6:	bfb4      	ite	lt
 80060b8:	18d2      	addlt	r2, r2, r3
 80060ba:	1b1c      	subge	r4, r3, r4
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	bfbc      	itt	lt
 80060c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80060c2:	2400      	movlt	r4, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bfb5      	itete	lt
 80060c8:	eba8 0603 	sublt.w	r6, r8, r3
 80060cc:	9b07      	ldrge	r3, [sp, #28]
 80060ce:	2300      	movlt	r3, #0
 80060d0:	4646      	movge	r6, r8
 80060d2:	e730      	b.n	8005f36 <_dtoa_r+0x71e>
 80060d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060d8:	4646      	mov	r6, r8
 80060da:	e735      	b.n	8005f48 <_dtoa_r+0x730>
 80060dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060de:	e75c      	b.n	8005f9a <_dtoa_r+0x782>
 80060e0:	2300      	movs	r3, #0
 80060e2:	e788      	b.n	8005ff6 <_dtoa_r+0x7de>
 80060e4:	3fe00000 	.word	0x3fe00000
 80060e8:	40240000 	.word	0x40240000
 80060ec:	40140000 	.word	0x40140000
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	e780      	b.n	8005ff6 <_dtoa_r+0x7de>
 80060f4:	2300      	movs	r3, #0
 80060f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f8:	e782      	b.n	8006000 <_dtoa_r+0x7e8>
 80060fa:	d099      	beq.n	8006030 <_dtoa_r+0x818>
 80060fc:	9a08      	ldr	r2, [sp, #32]
 80060fe:	331c      	adds	r3, #28
 8006100:	441a      	add	r2, r3
 8006102:	4498      	add	r8, r3
 8006104:	441e      	add	r6, r3
 8006106:	9208      	str	r2, [sp, #32]
 8006108:	e792      	b.n	8006030 <_dtoa_r+0x818>
 800610a:	4603      	mov	r3, r0
 800610c:	e7f6      	b.n	80060fc <_dtoa_r+0x8e4>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	9704      	str	r7, [sp, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	dc20      	bgt.n	8006158 <_dtoa_r+0x940>
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611a:	2b02      	cmp	r3, #2
 800611c:	dd1e      	ble.n	800615c <_dtoa_r+0x944>
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f aec0 	bne.w	8005ea6 <_dtoa_r+0x68e>
 8006126:	4621      	mov	r1, r4
 8006128:	2205      	movs	r2, #5
 800612a:	4658      	mov	r0, fp
 800612c:	f000 fa9a 	bl	8006664 <__multadd>
 8006130:	4601      	mov	r1, r0
 8006132:	4604      	mov	r4, r0
 8006134:	4648      	mov	r0, r9
 8006136:	f000 fcf7 	bl	8006b28 <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	f77f aeb3 	ble.w	8005ea6 <_dtoa_r+0x68e>
 8006140:	4656      	mov	r6, sl
 8006142:	2331      	movs	r3, #49	@ 0x31
 8006144:	f806 3b01 	strb.w	r3, [r6], #1
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	e6ae      	b.n	8005eae <_dtoa_r+0x696>
 8006150:	9c07      	ldr	r4, [sp, #28]
 8006152:	9704      	str	r7, [sp, #16]
 8006154:	4625      	mov	r5, r4
 8006156:	e7f3      	b.n	8006140 <_dtoa_r+0x928>
 8006158:	9b07      	ldr	r3, [sp, #28]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8104 	beq.w	800636c <_dtoa_r+0xb54>
 8006164:	2e00      	cmp	r6, #0
 8006166:	dd05      	ble.n	8006174 <_dtoa_r+0x95c>
 8006168:	4629      	mov	r1, r5
 800616a:	4632      	mov	r2, r6
 800616c:	4658      	mov	r0, fp
 800616e:	f000 fc6f 	bl	8006a50 <__lshift>
 8006172:	4605      	mov	r5, r0
 8006174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	d05a      	beq.n	8006230 <_dtoa_r+0xa18>
 800617a:	6869      	ldr	r1, [r5, #4]
 800617c:	4658      	mov	r0, fp
 800617e:	f000 fa0f 	bl	80065a0 <_Balloc>
 8006182:	4606      	mov	r6, r0
 8006184:	b928      	cbnz	r0, 8006192 <_dtoa_r+0x97a>
 8006186:	4b84      	ldr	r3, [pc, #528]	@ (8006398 <_dtoa_r+0xb80>)
 8006188:	4602      	mov	r2, r0
 800618a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800618e:	f7ff bb5a 	b.w	8005846 <_dtoa_r+0x2e>
 8006192:	692a      	ldr	r2, [r5, #16]
 8006194:	3202      	adds	r2, #2
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	f105 010c 	add.w	r1, r5, #12
 800619c:	300c      	adds	r0, #12
 800619e:	f001 ff75 	bl	800808c <memcpy>
 80061a2:	2201      	movs	r2, #1
 80061a4:	4631      	mov	r1, r6
 80061a6:	4658      	mov	r0, fp
 80061a8:	f000 fc52 	bl	8006a50 <__lshift>
 80061ac:	f10a 0301 	add.w	r3, sl, #1
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	9b00      	ldr	r3, [sp, #0]
 80061b4:	4453      	add	r3, sl
 80061b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	462f      	mov	r7, r5
 80061c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c2:	4605      	mov	r5, r0
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	4621      	mov	r1, r4
 80061c8:	3b01      	subs	r3, #1
 80061ca:	4648      	mov	r0, r9
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	f7ff fa9b 	bl	8005708 <quorem>
 80061d2:	4639      	mov	r1, r7
 80061d4:	9002      	str	r0, [sp, #8]
 80061d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061da:	4648      	mov	r0, r9
 80061dc:	f000 fca4 	bl	8006b28 <__mcmp>
 80061e0:	462a      	mov	r2, r5
 80061e2:	9008      	str	r0, [sp, #32]
 80061e4:	4621      	mov	r1, r4
 80061e6:	4658      	mov	r0, fp
 80061e8:	f000 fcba 	bl	8006b60 <__mdiff>
 80061ec:	68c2      	ldr	r2, [r0, #12]
 80061ee:	4606      	mov	r6, r0
 80061f0:	bb02      	cbnz	r2, 8006234 <_dtoa_r+0xa1c>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4648      	mov	r0, r9
 80061f6:	f000 fc97 	bl	8006b28 <__mcmp>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4631      	mov	r1, r6
 80061fe:	4658      	mov	r0, fp
 8006200:	920e      	str	r2, [sp, #56]	@ 0x38
 8006202:	f000 fa0d 	bl	8006620 <_Bfree>
 8006206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006208:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800620a:	9e07      	ldr	r6, [sp, #28]
 800620c:	ea43 0102 	orr.w	r1, r3, r2
 8006210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006212:	4319      	orrs	r1, r3
 8006214:	d110      	bne.n	8006238 <_dtoa_r+0xa20>
 8006216:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800621a:	d029      	beq.n	8006270 <_dtoa_r+0xa58>
 800621c:	9b08      	ldr	r3, [sp, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd02      	ble.n	8006228 <_dtoa_r+0xa10>
 8006222:	9b02      	ldr	r3, [sp, #8]
 8006224:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006228:	9b00      	ldr	r3, [sp, #0]
 800622a:	f883 8000 	strb.w	r8, [r3]
 800622e:	e63f      	b.n	8005eb0 <_dtoa_r+0x698>
 8006230:	4628      	mov	r0, r5
 8006232:	e7bb      	b.n	80061ac <_dtoa_r+0x994>
 8006234:	2201      	movs	r2, #1
 8006236:	e7e1      	b.n	80061fc <_dtoa_r+0x9e4>
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	db04      	blt.n	8006248 <_dtoa_r+0xa30>
 800623e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006240:	430b      	orrs	r3, r1
 8006242:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006244:	430b      	orrs	r3, r1
 8006246:	d120      	bne.n	800628a <_dtoa_r+0xa72>
 8006248:	2a00      	cmp	r2, #0
 800624a:	dded      	ble.n	8006228 <_dtoa_r+0xa10>
 800624c:	4649      	mov	r1, r9
 800624e:	2201      	movs	r2, #1
 8006250:	4658      	mov	r0, fp
 8006252:	f000 fbfd 	bl	8006a50 <__lshift>
 8006256:	4621      	mov	r1, r4
 8006258:	4681      	mov	r9, r0
 800625a:	f000 fc65 	bl	8006b28 <__mcmp>
 800625e:	2800      	cmp	r0, #0
 8006260:	dc03      	bgt.n	800626a <_dtoa_r+0xa52>
 8006262:	d1e1      	bne.n	8006228 <_dtoa_r+0xa10>
 8006264:	f018 0f01 	tst.w	r8, #1
 8006268:	d0de      	beq.n	8006228 <_dtoa_r+0xa10>
 800626a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800626e:	d1d8      	bne.n	8006222 <_dtoa_r+0xa0a>
 8006270:	9a00      	ldr	r2, [sp, #0]
 8006272:	2339      	movs	r3, #57	@ 0x39
 8006274:	7013      	strb	r3, [r2, #0]
 8006276:	4633      	mov	r3, r6
 8006278:	461e      	mov	r6, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006280:	2a39      	cmp	r2, #57	@ 0x39
 8006282:	d052      	beq.n	800632a <_dtoa_r+0xb12>
 8006284:	3201      	adds	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e612      	b.n	8005eb0 <_dtoa_r+0x698>
 800628a:	2a00      	cmp	r2, #0
 800628c:	dd07      	ble.n	800629e <_dtoa_r+0xa86>
 800628e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006292:	d0ed      	beq.n	8006270 <_dtoa_r+0xa58>
 8006294:	9a00      	ldr	r2, [sp, #0]
 8006296:	f108 0301 	add.w	r3, r8, #1
 800629a:	7013      	strb	r3, [r2, #0]
 800629c:	e608      	b.n	8005eb0 <_dtoa_r+0x698>
 800629e:	9b07      	ldr	r3, [sp, #28]
 80062a0:	9a07      	ldr	r2, [sp, #28]
 80062a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80062a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d028      	beq.n	80062fe <_dtoa_r+0xae6>
 80062ac:	4649      	mov	r1, r9
 80062ae:	2300      	movs	r3, #0
 80062b0:	220a      	movs	r2, #10
 80062b2:	4658      	mov	r0, fp
 80062b4:	f000 f9d6 	bl	8006664 <__multadd>
 80062b8:	42af      	cmp	r7, r5
 80062ba:	4681      	mov	r9, r0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	f04f 020a 	mov.w	r2, #10
 80062c4:	4639      	mov	r1, r7
 80062c6:	4658      	mov	r0, fp
 80062c8:	d107      	bne.n	80062da <_dtoa_r+0xac2>
 80062ca:	f000 f9cb 	bl	8006664 <__multadd>
 80062ce:	4607      	mov	r7, r0
 80062d0:	4605      	mov	r5, r0
 80062d2:	9b07      	ldr	r3, [sp, #28]
 80062d4:	3301      	adds	r3, #1
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	e774      	b.n	80061c4 <_dtoa_r+0x9ac>
 80062da:	f000 f9c3 	bl	8006664 <__multadd>
 80062de:	4629      	mov	r1, r5
 80062e0:	4607      	mov	r7, r0
 80062e2:	2300      	movs	r3, #0
 80062e4:	220a      	movs	r2, #10
 80062e6:	4658      	mov	r0, fp
 80062e8:	f000 f9bc 	bl	8006664 <__multadd>
 80062ec:	4605      	mov	r5, r0
 80062ee:	e7f0      	b.n	80062d2 <_dtoa_r+0xaba>
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bfcc      	ite	gt
 80062f6:	461e      	movgt	r6, r3
 80062f8:	2601      	movle	r6, #1
 80062fa:	4456      	add	r6, sl
 80062fc:	2700      	movs	r7, #0
 80062fe:	4649      	mov	r1, r9
 8006300:	2201      	movs	r2, #1
 8006302:	4658      	mov	r0, fp
 8006304:	f000 fba4 	bl	8006a50 <__lshift>
 8006308:	4621      	mov	r1, r4
 800630a:	4681      	mov	r9, r0
 800630c:	f000 fc0c 	bl	8006b28 <__mcmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	dcb0      	bgt.n	8006276 <_dtoa_r+0xa5e>
 8006314:	d102      	bne.n	800631c <_dtoa_r+0xb04>
 8006316:	f018 0f01 	tst.w	r8, #1
 800631a:	d1ac      	bne.n	8006276 <_dtoa_r+0xa5e>
 800631c:	4633      	mov	r3, r6
 800631e:	461e      	mov	r6, r3
 8006320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006324:	2a30      	cmp	r2, #48	@ 0x30
 8006326:	d0fa      	beq.n	800631e <_dtoa_r+0xb06>
 8006328:	e5c2      	b.n	8005eb0 <_dtoa_r+0x698>
 800632a:	459a      	cmp	sl, r3
 800632c:	d1a4      	bne.n	8006278 <_dtoa_r+0xa60>
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	3301      	adds	r3, #1
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	2331      	movs	r3, #49	@ 0x31
 8006336:	f88a 3000 	strb.w	r3, [sl]
 800633a:	e5b9      	b.n	8005eb0 <_dtoa_r+0x698>
 800633c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800633e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800639c <_dtoa_r+0xb84>
 8006342:	b11b      	cbz	r3, 800634c <_dtoa_r+0xb34>
 8006344:	f10a 0308 	add.w	r3, sl, #8
 8006348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4650      	mov	r0, sl
 800634e:	b019      	add	sp, #100	@ 0x64
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006356:	2b01      	cmp	r3, #1
 8006358:	f77f ae37 	ble.w	8005fca <_dtoa_r+0x7b2>
 800635c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800635e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006360:	2001      	movs	r0, #1
 8006362:	e655      	b.n	8006010 <_dtoa_r+0x7f8>
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f77f aed6 	ble.w	8006118 <_dtoa_r+0x900>
 800636c:	4656      	mov	r6, sl
 800636e:	4621      	mov	r1, r4
 8006370:	4648      	mov	r0, r9
 8006372:	f7ff f9c9 	bl	8005708 <quorem>
 8006376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800637a:	f806 8b01 	strb.w	r8, [r6], #1
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	eba6 020a 	sub.w	r2, r6, sl
 8006384:	4293      	cmp	r3, r2
 8006386:	ddb3      	ble.n	80062f0 <_dtoa_r+0xad8>
 8006388:	4649      	mov	r1, r9
 800638a:	2300      	movs	r3, #0
 800638c:	220a      	movs	r2, #10
 800638e:	4658      	mov	r0, fp
 8006390:	f000 f968 	bl	8006664 <__multadd>
 8006394:	4681      	mov	r9, r0
 8006396:	e7ea      	b.n	800636e <_dtoa_r+0xb56>
 8006398:	08008eb5 	.word	0x08008eb5
 800639c:	08008e39 	.word	0x08008e39

080063a0 <_free_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4605      	mov	r5, r0
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d041      	beq.n	800642c <_free_r+0x8c>
 80063a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ac:	1f0c      	subs	r4, r1, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfb8      	it	lt
 80063b2:	18e4      	addlt	r4, r4, r3
 80063b4:	f000 f8e8 	bl	8006588 <__malloc_lock>
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <_free_r+0x90>)
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	b933      	cbnz	r3, 80063cc <_free_r+0x2c>
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6014      	str	r4, [r2, #0]
 80063c2:	4628      	mov	r0, r5
 80063c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c8:	f000 b8e4 	b.w	8006594 <__malloc_unlock>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d908      	bls.n	80063e2 <_free_r+0x42>
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	1821      	adds	r1, r4, r0
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1809      	addeq	r1, r1, r0
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	e7ed      	b.n	80063be <_free_r+0x1e>
 80063e2:	461a      	mov	r2, r3
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b10b      	cbz	r3, 80063ec <_free_r+0x4c>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x42>
 80063ec:	6811      	ldr	r1, [r2, #0]
 80063ee:	1850      	adds	r0, r2, r1
 80063f0:	42a0      	cmp	r0, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x6c>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	4401      	add	r1, r0
 80063f8:	1850      	adds	r0, r2, r1
 80063fa:	4283      	cmp	r3, r0
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	d1e0      	bne.n	80063c2 <_free_r+0x22>
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	4408      	add	r0, r1
 8006408:	6010      	str	r0, [r2, #0]
 800640a:	e7da      	b.n	80063c2 <_free_r+0x22>
 800640c:	d902      	bls.n	8006414 <_free_r+0x74>
 800640e:	230c      	movs	r3, #12
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	e7d6      	b.n	80063c2 <_free_r+0x22>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428b      	cmp	r3, r1
 800641a:	bf04      	itt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6054      	str	r4, [r2, #4]
 800642a:	e7ca      	b.n	80063c2 <_free_r+0x22>
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	20000440 	.word	0x20000440

08006434 <malloc>:
 8006434:	4b02      	ldr	r3, [pc, #8]	@ (8006440 <malloc+0xc>)
 8006436:	4601      	mov	r1, r0
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	f000 b825 	b.w	8006488 <_malloc_r>
 800643e:	bf00      	nop
 8006440:	20000018 	.word	0x20000018

08006444 <sbrk_aligned>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4e0f      	ldr	r6, [pc, #60]	@ (8006484 <sbrk_aligned+0x40>)
 8006448:	460c      	mov	r4, r1
 800644a:	6831      	ldr	r1, [r6, #0]
 800644c:	4605      	mov	r5, r0
 800644e:	b911      	cbnz	r1, 8006456 <sbrk_aligned+0x12>
 8006450:	f001 fe0c 	bl	800806c <_sbrk_r>
 8006454:	6030      	str	r0, [r6, #0]
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f001 fe07 	bl	800806c <_sbrk_r>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	d103      	bne.n	800646a <sbrk_aligned+0x26>
 8006462:	f04f 34ff 	mov.w	r4, #4294967295
 8006466:	4620      	mov	r0, r4
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	1cc4      	adds	r4, r0, #3
 800646c:	f024 0403 	bic.w	r4, r4, #3
 8006470:	42a0      	cmp	r0, r4
 8006472:	d0f8      	beq.n	8006466 <sbrk_aligned+0x22>
 8006474:	1a21      	subs	r1, r4, r0
 8006476:	4628      	mov	r0, r5
 8006478:	f001 fdf8 	bl	800806c <_sbrk_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d1f2      	bne.n	8006466 <sbrk_aligned+0x22>
 8006480:	e7ef      	b.n	8006462 <sbrk_aligned+0x1e>
 8006482:	bf00      	nop
 8006484:	2000043c 	.word	0x2000043c

08006488 <_malloc_r>:
 8006488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800648c:	1ccd      	adds	r5, r1, #3
 800648e:	f025 0503 	bic.w	r5, r5, #3
 8006492:	3508      	adds	r5, #8
 8006494:	2d0c      	cmp	r5, #12
 8006496:	bf38      	it	cc
 8006498:	250c      	movcc	r5, #12
 800649a:	2d00      	cmp	r5, #0
 800649c:	4606      	mov	r6, r0
 800649e:	db01      	blt.n	80064a4 <_malloc_r+0x1c>
 80064a0:	42a9      	cmp	r1, r5
 80064a2:	d904      	bls.n	80064ae <_malloc_r+0x26>
 80064a4:	230c      	movs	r3, #12
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	2000      	movs	r0, #0
 80064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006584 <_malloc_r+0xfc>
 80064b2:	f000 f869 	bl	8006588 <__malloc_lock>
 80064b6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ba:	461c      	mov	r4, r3
 80064bc:	bb44      	cbnz	r4, 8006510 <_malloc_r+0x88>
 80064be:	4629      	mov	r1, r5
 80064c0:	4630      	mov	r0, r6
 80064c2:	f7ff ffbf 	bl	8006444 <sbrk_aligned>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	4604      	mov	r4, r0
 80064ca:	d158      	bne.n	800657e <_malloc_r+0xf6>
 80064cc:	f8d8 4000 	ldr.w	r4, [r8]
 80064d0:	4627      	mov	r7, r4
 80064d2:	2f00      	cmp	r7, #0
 80064d4:	d143      	bne.n	800655e <_malloc_r+0xd6>
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d04b      	beq.n	8006572 <_malloc_r+0xea>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	4639      	mov	r1, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	eb04 0903 	add.w	r9, r4, r3
 80064e4:	f001 fdc2 	bl	800806c <_sbrk_r>
 80064e8:	4581      	cmp	r9, r0
 80064ea:	d142      	bne.n	8006572 <_malloc_r+0xea>
 80064ec:	6821      	ldr	r1, [r4, #0]
 80064ee:	1a6d      	subs	r5, r5, r1
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ffa6 	bl	8006444 <sbrk_aligned>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d03a      	beq.n	8006572 <_malloc_r+0xea>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	442b      	add	r3, r5
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	f8d8 3000 	ldr.w	r3, [r8]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	bb62      	cbnz	r2, 8006564 <_malloc_r+0xdc>
 800650a:	f8c8 7000 	str.w	r7, [r8]
 800650e:	e00f      	b.n	8006530 <_malloc_r+0xa8>
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	1b52      	subs	r2, r2, r5
 8006514:	d420      	bmi.n	8006558 <_malloc_r+0xd0>
 8006516:	2a0b      	cmp	r2, #11
 8006518:	d917      	bls.n	800654a <_malloc_r+0xc2>
 800651a:	1961      	adds	r1, r4, r5
 800651c:	42a3      	cmp	r3, r4
 800651e:	6025      	str	r5, [r4, #0]
 8006520:	bf18      	it	ne
 8006522:	6059      	strne	r1, [r3, #4]
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	bf08      	it	eq
 8006528:	f8c8 1000 	streq.w	r1, [r8]
 800652c:	5162      	str	r2, [r4, r5]
 800652e:	604b      	str	r3, [r1, #4]
 8006530:	4630      	mov	r0, r6
 8006532:	f000 f82f 	bl	8006594 <__malloc_unlock>
 8006536:	f104 000b 	add.w	r0, r4, #11
 800653a:	1d23      	adds	r3, r4, #4
 800653c:	f020 0007 	bic.w	r0, r0, #7
 8006540:	1ac2      	subs	r2, r0, r3
 8006542:	bf1c      	itt	ne
 8006544:	1a1b      	subne	r3, r3, r0
 8006546:	50a3      	strne	r3, [r4, r2]
 8006548:	e7af      	b.n	80064aa <_malloc_r+0x22>
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	42a3      	cmp	r3, r4
 800654e:	bf0c      	ite	eq
 8006550:	f8c8 2000 	streq.w	r2, [r8]
 8006554:	605a      	strne	r2, [r3, #4]
 8006556:	e7eb      	b.n	8006530 <_malloc_r+0xa8>
 8006558:	4623      	mov	r3, r4
 800655a:	6864      	ldr	r4, [r4, #4]
 800655c:	e7ae      	b.n	80064bc <_malloc_r+0x34>
 800655e:	463c      	mov	r4, r7
 8006560:	687f      	ldr	r7, [r7, #4]
 8006562:	e7b6      	b.n	80064d2 <_malloc_r+0x4a>
 8006564:	461a      	mov	r2, r3
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	42a3      	cmp	r3, r4
 800656a:	d1fb      	bne.n	8006564 <_malloc_r+0xdc>
 800656c:	2300      	movs	r3, #0
 800656e:	6053      	str	r3, [r2, #4]
 8006570:	e7de      	b.n	8006530 <_malloc_r+0xa8>
 8006572:	230c      	movs	r3, #12
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	4630      	mov	r0, r6
 8006578:	f000 f80c 	bl	8006594 <__malloc_unlock>
 800657c:	e794      	b.n	80064a8 <_malloc_r+0x20>
 800657e:	6005      	str	r5, [r0, #0]
 8006580:	e7d6      	b.n	8006530 <_malloc_r+0xa8>
 8006582:	bf00      	nop
 8006584:	20000440 	.word	0x20000440

08006588 <__malloc_lock>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__malloc_lock+0x8>)
 800658a:	f7ff b8b4 	b.w	80056f6 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	20000438 	.word	0x20000438

08006594 <__malloc_unlock>:
 8006594:	4801      	ldr	r0, [pc, #4]	@ (800659c <__malloc_unlock+0x8>)
 8006596:	f7ff b8af 	b.w	80056f8 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	20000438 	.word	0x20000438

080065a0 <_Balloc>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	69c6      	ldr	r6, [r0, #28]
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	b976      	cbnz	r6, 80065c8 <_Balloc+0x28>
 80065aa:	2010      	movs	r0, #16
 80065ac:	f7ff ff42 	bl	8006434 <malloc>
 80065b0:	4602      	mov	r2, r0
 80065b2:	61e0      	str	r0, [r4, #28]
 80065b4:	b920      	cbnz	r0, 80065c0 <_Balloc+0x20>
 80065b6:	4b18      	ldr	r3, [pc, #96]	@ (8006618 <_Balloc+0x78>)
 80065b8:	4818      	ldr	r0, [pc, #96]	@ (800661c <_Balloc+0x7c>)
 80065ba:	216b      	movs	r1, #107	@ 0x6b
 80065bc:	f001 fd7c 	bl	80080b8 <__assert_func>
 80065c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065c4:	6006      	str	r6, [r0, #0]
 80065c6:	60c6      	str	r6, [r0, #12]
 80065c8:	69e6      	ldr	r6, [r4, #28]
 80065ca:	68f3      	ldr	r3, [r6, #12]
 80065cc:	b183      	cbz	r3, 80065f0 <_Balloc+0x50>
 80065ce:	69e3      	ldr	r3, [r4, #28]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065d6:	b9b8      	cbnz	r0, 8006608 <_Balloc+0x68>
 80065d8:	2101      	movs	r1, #1
 80065da:	fa01 f605 	lsl.w	r6, r1, r5
 80065de:	1d72      	adds	r2, r6, #5
 80065e0:	0092      	lsls	r2, r2, #2
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 fd86 	bl	80080f4 <_calloc_r>
 80065e8:	b160      	cbz	r0, 8006604 <_Balloc+0x64>
 80065ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065ee:	e00e      	b.n	800660e <_Balloc+0x6e>
 80065f0:	2221      	movs	r2, #33	@ 0x21
 80065f2:	2104      	movs	r1, #4
 80065f4:	4620      	mov	r0, r4
 80065f6:	f001 fd7d 	bl	80080f4 <_calloc_r>
 80065fa:	69e3      	ldr	r3, [r4, #28]
 80065fc:	60f0      	str	r0, [r6, #12]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e4      	bne.n	80065ce <_Balloc+0x2e>
 8006604:	2000      	movs	r0, #0
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	6802      	ldr	r2, [r0, #0]
 800660a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800660e:	2300      	movs	r3, #0
 8006610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006614:	e7f7      	b.n	8006606 <_Balloc+0x66>
 8006616:	bf00      	nop
 8006618:	08008e46 	.word	0x08008e46
 800661c:	08008ec6 	.word	0x08008ec6

08006620 <_Bfree>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	69c6      	ldr	r6, [r0, #28]
 8006624:	4605      	mov	r5, r0
 8006626:	460c      	mov	r4, r1
 8006628:	b976      	cbnz	r6, 8006648 <_Bfree+0x28>
 800662a:	2010      	movs	r0, #16
 800662c:	f7ff ff02 	bl	8006434 <malloc>
 8006630:	4602      	mov	r2, r0
 8006632:	61e8      	str	r0, [r5, #28]
 8006634:	b920      	cbnz	r0, 8006640 <_Bfree+0x20>
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <_Bfree+0x3c>)
 8006638:	4809      	ldr	r0, [pc, #36]	@ (8006660 <_Bfree+0x40>)
 800663a:	218f      	movs	r1, #143	@ 0x8f
 800663c:	f001 fd3c 	bl	80080b8 <__assert_func>
 8006640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006644:	6006      	str	r6, [r0, #0]
 8006646:	60c6      	str	r6, [r0, #12]
 8006648:	b13c      	cbz	r4, 800665a <_Bfree+0x3a>
 800664a:	69eb      	ldr	r3, [r5, #28]
 800664c:	6862      	ldr	r2, [r4, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006654:	6021      	str	r1, [r4, #0]
 8006656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	08008e46 	.word	0x08008e46
 8006660:	08008ec6 	.word	0x08008ec6

08006664 <__multadd>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	690d      	ldr	r5, [r1, #16]
 800666a:	4607      	mov	r7, r0
 800666c:	460c      	mov	r4, r1
 800666e:	461e      	mov	r6, r3
 8006670:	f101 0c14 	add.w	ip, r1, #20
 8006674:	2000      	movs	r0, #0
 8006676:	f8dc 3000 	ldr.w	r3, [ip]
 800667a:	b299      	uxth	r1, r3
 800667c:	fb02 6101 	mla	r1, r2, r1, r6
 8006680:	0c1e      	lsrs	r6, r3, #16
 8006682:	0c0b      	lsrs	r3, r1, #16
 8006684:	fb02 3306 	mla	r3, r2, r6, r3
 8006688:	b289      	uxth	r1, r1
 800668a:	3001      	adds	r0, #1
 800668c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006690:	4285      	cmp	r5, r0
 8006692:	f84c 1b04 	str.w	r1, [ip], #4
 8006696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800669a:	dcec      	bgt.n	8006676 <__multadd+0x12>
 800669c:	b30e      	cbz	r6, 80066e2 <__multadd+0x7e>
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dc19      	bgt.n	80066d8 <__multadd+0x74>
 80066a4:	6861      	ldr	r1, [r4, #4]
 80066a6:	4638      	mov	r0, r7
 80066a8:	3101      	adds	r1, #1
 80066aa:	f7ff ff79 	bl	80065a0 <_Balloc>
 80066ae:	4680      	mov	r8, r0
 80066b0:	b928      	cbnz	r0, 80066be <__multadd+0x5a>
 80066b2:	4602      	mov	r2, r0
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <__multadd+0x84>)
 80066b6:	480d      	ldr	r0, [pc, #52]	@ (80066ec <__multadd+0x88>)
 80066b8:	21ba      	movs	r1, #186	@ 0xba
 80066ba:	f001 fcfd 	bl	80080b8 <__assert_func>
 80066be:	6922      	ldr	r2, [r4, #16]
 80066c0:	3202      	adds	r2, #2
 80066c2:	f104 010c 	add.w	r1, r4, #12
 80066c6:	0092      	lsls	r2, r2, #2
 80066c8:	300c      	adds	r0, #12
 80066ca:	f001 fcdf 	bl	800808c <memcpy>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ffa5 	bl	8006620 <_Bfree>
 80066d6:	4644      	mov	r4, r8
 80066d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066dc:	3501      	adds	r5, #1
 80066de:	615e      	str	r6, [r3, #20]
 80066e0:	6125      	str	r5, [r4, #16]
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	08008eb5 	.word	0x08008eb5
 80066ec:	08008ec6 	.word	0x08008ec6

080066f0 <__s2b>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	460c      	mov	r4, r1
 80066f6:	4615      	mov	r5, r2
 80066f8:	461f      	mov	r7, r3
 80066fa:	2209      	movs	r2, #9
 80066fc:	3308      	adds	r3, #8
 80066fe:	4606      	mov	r6, r0
 8006700:	fb93 f3f2 	sdiv	r3, r3, r2
 8006704:	2100      	movs	r1, #0
 8006706:	2201      	movs	r2, #1
 8006708:	429a      	cmp	r2, r3
 800670a:	db09      	blt.n	8006720 <__s2b+0x30>
 800670c:	4630      	mov	r0, r6
 800670e:	f7ff ff47 	bl	80065a0 <_Balloc>
 8006712:	b940      	cbnz	r0, 8006726 <__s2b+0x36>
 8006714:	4602      	mov	r2, r0
 8006716:	4b19      	ldr	r3, [pc, #100]	@ (800677c <__s2b+0x8c>)
 8006718:	4819      	ldr	r0, [pc, #100]	@ (8006780 <__s2b+0x90>)
 800671a:	21d3      	movs	r1, #211	@ 0xd3
 800671c:	f001 fccc 	bl	80080b8 <__assert_func>
 8006720:	0052      	lsls	r2, r2, #1
 8006722:	3101      	adds	r1, #1
 8006724:	e7f0      	b.n	8006708 <__s2b+0x18>
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	6143      	str	r3, [r0, #20]
 800672a:	2d09      	cmp	r5, #9
 800672c:	f04f 0301 	mov.w	r3, #1
 8006730:	6103      	str	r3, [r0, #16]
 8006732:	dd16      	ble.n	8006762 <__s2b+0x72>
 8006734:	f104 0909 	add.w	r9, r4, #9
 8006738:	46c8      	mov	r8, r9
 800673a:	442c      	add	r4, r5
 800673c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006740:	4601      	mov	r1, r0
 8006742:	3b30      	subs	r3, #48	@ 0x30
 8006744:	220a      	movs	r2, #10
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff ff8c 	bl	8006664 <__multadd>
 800674c:	45a0      	cmp	r8, r4
 800674e:	d1f5      	bne.n	800673c <__s2b+0x4c>
 8006750:	f1a5 0408 	sub.w	r4, r5, #8
 8006754:	444c      	add	r4, r9
 8006756:	1b2d      	subs	r5, r5, r4
 8006758:	1963      	adds	r3, r4, r5
 800675a:	42bb      	cmp	r3, r7
 800675c:	db04      	blt.n	8006768 <__s2b+0x78>
 800675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006762:	340a      	adds	r4, #10
 8006764:	2509      	movs	r5, #9
 8006766:	e7f6      	b.n	8006756 <__s2b+0x66>
 8006768:	f814 3b01 	ldrb.w	r3, [r4], #1
 800676c:	4601      	mov	r1, r0
 800676e:	3b30      	subs	r3, #48	@ 0x30
 8006770:	220a      	movs	r2, #10
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ff76 	bl	8006664 <__multadd>
 8006778:	e7ee      	b.n	8006758 <__s2b+0x68>
 800677a:	bf00      	nop
 800677c:	08008eb5 	.word	0x08008eb5
 8006780:	08008ec6 	.word	0x08008ec6

08006784 <__hi0bits>:
 8006784:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006788:	4603      	mov	r3, r0
 800678a:	bf36      	itet	cc
 800678c:	0403      	lslcc	r3, r0, #16
 800678e:	2000      	movcs	r0, #0
 8006790:	2010      	movcc	r0, #16
 8006792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006796:	bf3c      	itt	cc
 8006798:	021b      	lslcc	r3, r3, #8
 800679a:	3008      	addcc	r0, #8
 800679c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a0:	bf3c      	itt	cc
 80067a2:	011b      	lslcc	r3, r3, #4
 80067a4:	3004      	addcc	r0, #4
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067aa:	bf3c      	itt	cc
 80067ac:	009b      	lslcc	r3, r3, #2
 80067ae:	3002      	addcc	r0, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db05      	blt.n	80067c0 <__hi0bits+0x3c>
 80067b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067b8:	f100 0001 	add.w	r0, r0, #1
 80067bc:	bf08      	it	eq
 80067be:	2020      	moveq	r0, #32
 80067c0:	4770      	bx	lr

080067c2 <__lo0bits>:
 80067c2:	6803      	ldr	r3, [r0, #0]
 80067c4:	4602      	mov	r2, r0
 80067c6:	f013 0007 	ands.w	r0, r3, #7
 80067ca:	d00b      	beq.n	80067e4 <__lo0bits+0x22>
 80067cc:	07d9      	lsls	r1, r3, #31
 80067ce:	d421      	bmi.n	8006814 <__lo0bits+0x52>
 80067d0:	0798      	lsls	r0, r3, #30
 80067d2:	bf49      	itett	mi
 80067d4:	085b      	lsrmi	r3, r3, #1
 80067d6:	089b      	lsrpl	r3, r3, #2
 80067d8:	2001      	movmi	r0, #1
 80067da:	6013      	strmi	r3, [r2, #0]
 80067dc:	bf5c      	itt	pl
 80067de:	6013      	strpl	r3, [r2, #0]
 80067e0:	2002      	movpl	r0, #2
 80067e2:	4770      	bx	lr
 80067e4:	b299      	uxth	r1, r3
 80067e6:	b909      	cbnz	r1, 80067ec <__lo0bits+0x2a>
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	2010      	movs	r0, #16
 80067ec:	b2d9      	uxtb	r1, r3
 80067ee:	b909      	cbnz	r1, 80067f4 <__lo0bits+0x32>
 80067f0:	3008      	adds	r0, #8
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	0719      	lsls	r1, r3, #28
 80067f6:	bf04      	itt	eq
 80067f8:	091b      	lsreq	r3, r3, #4
 80067fa:	3004      	addeq	r0, #4
 80067fc:	0799      	lsls	r1, r3, #30
 80067fe:	bf04      	itt	eq
 8006800:	089b      	lsreq	r3, r3, #2
 8006802:	3002      	addeq	r0, #2
 8006804:	07d9      	lsls	r1, r3, #31
 8006806:	d403      	bmi.n	8006810 <__lo0bits+0x4e>
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	f100 0001 	add.w	r0, r0, #1
 800680e:	d003      	beq.n	8006818 <__lo0bits+0x56>
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4770      	bx	lr
 8006814:	2000      	movs	r0, #0
 8006816:	4770      	bx	lr
 8006818:	2020      	movs	r0, #32
 800681a:	4770      	bx	lr

0800681c <__i2b>:
 800681c:	b510      	push	{r4, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	2101      	movs	r1, #1
 8006822:	f7ff febd 	bl	80065a0 <_Balloc>
 8006826:	4602      	mov	r2, r0
 8006828:	b928      	cbnz	r0, 8006836 <__i2b+0x1a>
 800682a:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <__i2b+0x24>)
 800682c:	4805      	ldr	r0, [pc, #20]	@ (8006844 <__i2b+0x28>)
 800682e:	f240 1145 	movw	r1, #325	@ 0x145
 8006832:	f001 fc41 	bl	80080b8 <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	6144      	str	r4, [r0, #20]
 800683a:	6103      	str	r3, [r0, #16]
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	08008eb5 	.word	0x08008eb5
 8006844:	08008ec6 	.word	0x08008ec6

08006848 <__multiply>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4614      	mov	r4, r2
 800684e:	690a      	ldr	r2, [r1, #16]
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	bfa8      	it	ge
 8006856:	4623      	movge	r3, r4
 8006858:	460f      	mov	r7, r1
 800685a:	bfa4      	itt	ge
 800685c:	460c      	movge	r4, r1
 800685e:	461f      	movge	r7, r3
 8006860:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006864:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	6861      	ldr	r1, [r4, #4]
 800686c:	eb0a 0609 	add.w	r6, sl, r9
 8006870:	42b3      	cmp	r3, r6
 8006872:	b085      	sub	sp, #20
 8006874:	bfb8      	it	lt
 8006876:	3101      	addlt	r1, #1
 8006878:	f7ff fe92 	bl	80065a0 <_Balloc>
 800687c:	b930      	cbnz	r0, 800688c <__multiply+0x44>
 800687e:	4602      	mov	r2, r0
 8006880:	4b44      	ldr	r3, [pc, #272]	@ (8006994 <__multiply+0x14c>)
 8006882:	4845      	ldr	r0, [pc, #276]	@ (8006998 <__multiply+0x150>)
 8006884:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006888:	f001 fc16 	bl	80080b8 <__assert_func>
 800688c:	f100 0514 	add.w	r5, r0, #20
 8006890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006894:	462b      	mov	r3, r5
 8006896:	2200      	movs	r2, #0
 8006898:	4543      	cmp	r3, r8
 800689a:	d321      	bcc.n	80068e0 <__multiply+0x98>
 800689c:	f107 0114 	add.w	r1, r7, #20
 80068a0:	f104 0214 	add.w	r2, r4, #20
 80068a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80068a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80068ac:	9302      	str	r3, [sp, #8]
 80068ae:	1b13      	subs	r3, r2, r4
 80068b0:	3b15      	subs	r3, #21
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	3304      	adds	r3, #4
 80068b8:	f104 0715 	add.w	r7, r4, #21
 80068bc:	42ba      	cmp	r2, r7
 80068be:	bf38      	it	cc
 80068c0:	2304      	movcc	r3, #4
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	428b      	cmp	r3, r1
 80068ca:	d80c      	bhi.n	80068e6 <__multiply+0x9e>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	dd03      	ble.n	80068d8 <__multiply+0x90>
 80068d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d05b      	beq.n	8006990 <__multiply+0x148>
 80068d8:	6106      	str	r6, [r0, #16]
 80068da:	b005      	add	sp, #20
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	f843 2b04 	str.w	r2, [r3], #4
 80068e4:	e7d8      	b.n	8006898 <__multiply+0x50>
 80068e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d024      	beq.n	800693a <__multiply+0xf2>
 80068f0:	f104 0e14 	add.w	lr, r4, #20
 80068f4:	46a9      	mov	r9, r5
 80068f6:	f04f 0c00 	mov.w	ip, #0
 80068fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068fe:	f8d9 3000 	ldr.w	r3, [r9]
 8006902:	fa1f fb87 	uxth.w	fp, r7
 8006906:	b29b      	uxth	r3, r3
 8006908:	fb0a 330b 	mla	r3, sl, fp, r3
 800690c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006910:	f8d9 7000 	ldr.w	r7, [r9]
 8006914:	4463      	add	r3, ip
 8006916:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800691a:	fb0a c70b 	mla	r7, sl, fp, ip
 800691e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006922:	b29b      	uxth	r3, r3
 8006924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006928:	4572      	cmp	r2, lr
 800692a:	f849 3b04 	str.w	r3, [r9], #4
 800692e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006932:	d8e2      	bhi.n	80068fa <__multiply+0xb2>
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	f845 c003 	str.w	ip, [r5, r3]
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006940:	3104      	adds	r1, #4
 8006942:	f1b9 0f00 	cmp.w	r9, #0
 8006946:	d021      	beq.n	800698c <__multiply+0x144>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	f104 0c14 	add.w	ip, r4, #20
 800694e:	46ae      	mov	lr, r5
 8006950:	f04f 0a00 	mov.w	sl, #0
 8006954:	f8bc b000 	ldrh.w	fp, [ip]
 8006958:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800695c:	fb09 770b 	mla	r7, r9, fp, r7
 8006960:	4457      	add	r7, sl
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006968:	f84e 3b04 	str.w	r3, [lr], #4
 800696c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006974:	f8be 3000 	ldrh.w	r3, [lr]
 8006978:	fb09 330a 	mla	r3, r9, sl, r3
 800697c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006980:	4562      	cmp	r2, ip
 8006982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006986:	d8e5      	bhi.n	8006954 <__multiply+0x10c>
 8006988:	9f01      	ldr	r7, [sp, #4]
 800698a:	51eb      	str	r3, [r5, r7]
 800698c:	3504      	adds	r5, #4
 800698e:	e799      	b.n	80068c4 <__multiply+0x7c>
 8006990:	3e01      	subs	r6, #1
 8006992:	e79b      	b.n	80068cc <__multiply+0x84>
 8006994:	08008eb5 	.word	0x08008eb5
 8006998:	08008ec6 	.word	0x08008ec6

0800699c <__pow5mult>:
 800699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a0:	4615      	mov	r5, r2
 80069a2:	f012 0203 	ands.w	r2, r2, #3
 80069a6:	4607      	mov	r7, r0
 80069a8:	460e      	mov	r6, r1
 80069aa:	d007      	beq.n	80069bc <__pow5mult+0x20>
 80069ac:	4c25      	ldr	r4, [pc, #148]	@ (8006a44 <__pow5mult+0xa8>)
 80069ae:	3a01      	subs	r2, #1
 80069b0:	2300      	movs	r3, #0
 80069b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069b6:	f7ff fe55 	bl	8006664 <__multadd>
 80069ba:	4606      	mov	r6, r0
 80069bc:	10ad      	asrs	r5, r5, #2
 80069be:	d03d      	beq.n	8006a3c <__pow5mult+0xa0>
 80069c0:	69fc      	ldr	r4, [r7, #28]
 80069c2:	b97c      	cbnz	r4, 80069e4 <__pow5mult+0x48>
 80069c4:	2010      	movs	r0, #16
 80069c6:	f7ff fd35 	bl	8006434 <malloc>
 80069ca:	4602      	mov	r2, r0
 80069cc:	61f8      	str	r0, [r7, #28]
 80069ce:	b928      	cbnz	r0, 80069dc <__pow5mult+0x40>
 80069d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a48 <__pow5mult+0xac>)
 80069d2:	481e      	ldr	r0, [pc, #120]	@ (8006a4c <__pow5mult+0xb0>)
 80069d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069d8:	f001 fb6e 	bl	80080b8 <__assert_func>
 80069dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069e0:	6004      	str	r4, [r0, #0]
 80069e2:	60c4      	str	r4, [r0, #12]
 80069e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80069e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069ec:	b94c      	cbnz	r4, 8006a02 <__pow5mult+0x66>
 80069ee:	f240 2171 	movw	r1, #625	@ 0x271
 80069f2:	4638      	mov	r0, r7
 80069f4:	f7ff ff12 	bl	800681c <__i2b>
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80069fe:	4604      	mov	r4, r0
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	07eb      	lsls	r3, r5, #31
 8006a08:	d50a      	bpl.n	8006a20 <__pow5mult+0x84>
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7ff ff1a 	bl	8006848 <__multiply>
 8006a14:	4631      	mov	r1, r6
 8006a16:	4680      	mov	r8, r0
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff fe01 	bl	8006620 <_Bfree>
 8006a1e:	4646      	mov	r6, r8
 8006a20:	106d      	asrs	r5, r5, #1
 8006a22:	d00b      	beq.n	8006a3c <__pow5mult+0xa0>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	b938      	cbnz	r0, 8006a38 <__pow5mult+0x9c>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff ff0b 	bl	8006848 <__multiply>
 8006a32:	6020      	str	r0, [r4, #0]
 8006a34:	f8c0 9000 	str.w	r9, [r0]
 8006a38:	4604      	mov	r4, r0
 8006a3a:	e7e4      	b.n	8006a06 <__pow5mult+0x6a>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a42:	bf00      	nop
 8006a44:	08008f20 	.word	0x08008f20
 8006a48:	08008e46 	.word	0x08008e46
 8006a4c:	08008ec6 	.word	0x08008ec6

08006a50 <__lshift>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	460c      	mov	r4, r1
 8006a56:	6849      	ldr	r1, [r1, #4]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	4607      	mov	r7, r0
 8006a62:	4691      	mov	r9, r2
 8006a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a68:	f108 0601 	add.w	r6, r8, #1
 8006a6c:	42b3      	cmp	r3, r6
 8006a6e:	db0b      	blt.n	8006a88 <__lshift+0x38>
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff fd95 	bl	80065a0 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b948      	cbnz	r0, 8006a8e <__lshift+0x3e>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b28      	ldr	r3, [pc, #160]	@ (8006b20 <__lshift+0xd0>)
 8006a7e:	4829      	ldr	r0, [pc, #164]	@ (8006b24 <__lshift+0xd4>)
 8006a80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a84:	f001 fb18 	bl	80080b8 <__assert_func>
 8006a88:	3101      	adds	r1, #1
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	e7ee      	b.n	8006a6c <__lshift+0x1c>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f100 0114 	add.w	r1, r0, #20
 8006a94:	f100 0210 	add.w	r2, r0, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	4553      	cmp	r3, sl
 8006a9c:	db33      	blt.n	8006b06 <__lshift+0xb6>
 8006a9e:	6920      	ldr	r0, [r4, #16]
 8006aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006aa4:	f104 0314 	add.w	r3, r4, #20
 8006aa8:	f019 091f 	ands.w	r9, r9, #31
 8006aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ab4:	d02b      	beq.n	8006b0e <__lshift+0xbe>
 8006ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8006aba:	468a      	mov	sl, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ac4:	4310      	orrs	r0, r2
 8006ac6:	f84a 0b04 	str.w	r0, [sl], #4
 8006aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ace:	459c      	cmp	ip, r3
 8006ad0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ad4:	d8f3      	bhi.n	8006abe <__lshift+0x6e>
 8006ad6:	ebac 0304 	sub.w	r3, ip, r4
 8006ada:	3b15      	subs	r3, #21
 8006adc:	f023 0303 	bic.w	r3, r3, #3
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	f104 0015 	add.w	r0, r4, #21
 8006ae6:	4584      	cmp	ip, r0
 8006ae8:	bf38      	it	cc
 8006aea:	2304      	movcc	r3, #4
 8006aec:	50ca      	str	r2, [r1, r3]
 8006aee:	b10a      	cbz	r2, 8006af4 <__lshift+0xa4>
 8006af0:	f108 0602 	add.w	r6, r8, #2
 8006af4:	3e01      	subs	r6, #1
 8006af6:	4638      	mov	r0, r7
 8006af8:	612e      	str	r6, [r5, #16]
 8006afa:	4621      	mov	r1, r4
 8006afc:	f7ff fd90 	bl	8006620 <_Bfree>
 8006b00:	4628      	mov	r0, r5
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	e7c5      	b.n	8006a9a <__lshift+0x4a>
 8006b0e:	3904      	subs	r1, #4
 8006b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b18:	459c      	cmp	ip, r3
 8006b1a:	d8f9      	bhi.n	8006b10 <__lshift+0xc0>
 8006b1c:	e7ea      	b.n	8006af4 <__lshift+0xa4>
 8006b1e:	bf00      	nop
 8006b20:	08008eb5 	.word	0x08008eb5
 8006b24:	08008ec6 	.word	0x08008ec6

08006b28 <__mcmp>:
 8006b28:	690a      	ldr	r2, [r1, #16]
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6900      	ldr	r0, [r0, #16]
 8006b2e:	1a80      	subs	r0, r0, r2
 8006b30:	b530      	push	{r4, r5, lr}
 8006b32:	d10e      	bne.n	8006b52 <__mcmp+0x2a>
 8006b34:	3314      	adds	r3, #20
 8006b36:	3114      	adds	r1, #20
 8006b38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b48:	4295      	cmp	r5, r2
 8006b4a:	d003      	beq.n	8006b54 <__mcmp+0x2c>
 8006b4c:	d205      	bcs.n	8006b5a <__mcmp+0x32>
 8006b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b52:	bd30      	pop	{r4, r5, pc}
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d3f3      	bcc.n	8006b40 <__mcmp+0x18>
 8006b58:	e7fb      	b.n	8006b52 <__mcmp+0x2a>
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	e7f9      	b.n	8006b52 <__mcmp+0x2a>
	...

08006b60 <__mdiff>:
 8006b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4689      	mov	r9, r1
 8006b66:	4606      	mov	r6, r0
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	f7ff ffdb 	bl	8006b28 <__mcmp>
 8006b72:	1e05      	subs	r5, r0, #0
 8006b74:	d112      	bne.n	8006b9c <__mdiff+0x3c>
 8006b76:	4629      	mov	r1, r5
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff fd11 	bl	80065a0 <_Balloc>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	b928      	cbnz	r0, 8006b8e <__mdiff+0x2e>
 8006b82:	4b3f      	ldr	r3, [pc, #252]	@ (8006c80 <__mdiff+0x120>)
 8006b84:	f240 2137 	movw	r1, #567	@ 0x237
 8006b88:	483e      	ldr	r0, [pc, #248]	@ (8006c84 <__mdiff+0x124>)
 8006b8a:	f001 fa95 	bl	80080b8 <__assert_func>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b94:	4610      	mov	r0, r2
 8006b96:	b003      	add	sp, #12
 8006b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9c:	bfbc      	itt	lt
 8006b9e:	464b      	movlt	r3, r9
 8006ba0:	46a1      	movlt	r9, r4
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ba8:	bfba      	itte	lt
 8006baa:	461c      	movlt	r4, r3
 8006bac:	2501      	movlt	r5, #1
 8006bae:	2500      	movge	r5, #0
 8006bb0:	f7ff fcf6 	bl	80065a0 <_Balloc>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	b918      	cbnz	r0, 8006bc0 <__mdiff+0x60>
 8006bb8:	4b31      	ldr	r3, [pc, #196]	@ (8006c80 <__mdiff+0x120>)
 8006bba:	f240 2145 	movw	r1, #581	@ 0x245
 8006bbe:	e7e3      	b.n	8006b88 <__mdiff+0x28>
 8006bc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006bc4:	6926      	ldr	r6, [r4, #16]
 8006bc6:	60c5      	str	r5, [r0, #12]
 8006bc8:	f109 0310 	add.w	r3, r9, #16
 8006bcc:	f109 0514 	add.w	r5, r9, #20
 8006bd0:	f104 0e14 	add.w	lr, r4, #20
 8006bd4:	f100 0b14 	add.w	fp, r0, #20
 8006bd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	46d9      	mov	r9, fp
 8006be4:	f04f 0c00 	mov.w	ip, #0
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006bee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	fa1f f38a 	uxth.w	r3, sl
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	b283      	uxth	r3, r0
 8006bfc:	1acb      	subs	r3, r1, r3
 8006bfe:	0c00      	lsrs	r0, r0, #16
 8006c00:	4463      	add	r3, ip
 8006c02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c10:	4576      	cmp	r6, lr
 8006c12:	f849 3b04 	str.w	r3, [r9], #4
 8006c16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c1a:	d8e5      	bhi.n	8006be8 <__mdiff+0x88>
 8006c1c:	1b33      	subs	r3, r6, r4
 8006c1e:	3b15      	subs	r3, #21
 8006c20:	f023 0303 	bic.w	r3, r3, #3
 8006c24:	3415      	adds	r4, #21
 8006c26:	3304      	adds	r3, #4
 8006c28:	42a6      	cmp	r6, r4
 8006c2a:	bf38      	it	cc
 8006c2c:	2304      	movcc	r3, #4
 8006c2e:	441d      	add	r5, r3
 8006c30:	445b      	add	r3, fp
 8006c32:	461e      	mov	r6, r3
 8006c34:	462c      	mov	r4, r5
 8006c36:	4544      	cmp	r4, r8
 8006c38:	d30e      	bcc.n	8006c58 <__mdiff+0xf8>
 8006c3a:	f108 0103 	add.w	r1, r8, #3
 8006c3e:	1b49      	subs	r1, r1, r5
 8006c40:	f021 0103 	bic.w	r1, r1, #3
 8006c44:	3d03      	subs	r5, #3
 8006c46:	45a8      	cmp	r8, r5
 8006c48:	bf38      	it	cc
 8006c4a:	2100      	movcc	r1, #0
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c52:	b191      	cbz	r1, 8006c7a <__mdiff+0x11a>
 8006c54:	6117      	str	r7, [r2, #16]
 8006c56:	e79d      	b.n	8006b94 <__mdiff+0x34>
 8006c58:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c5c:	46e6      	mov	lr, ip
 8006c5e:	0c08      	lsrs	r0, r1, #16
 8006c60:	fa1c fc81 	uxtah	ip, ip, r1
 8006c64:	4471      	add	r1, lr
 8006c66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c6a:	b289      	uxth	r1, r1
 8006c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c70:	f846 1b04 	str.w	r1, [r6], #4
 8006c74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c78:	e7dd      	b.n	8006c36 <__mdiff+0xd6>
 8006c7a:	3f01      	subs	r7, #1
 8006c7c:	e7e7      	b.n	8006c4e <__mdiff+0xee>
 8006c7e:	bf00      	nop
 8006c80:	08008eb5 	.word	0x08008eb5
 8006c84:	08008ec6 	.word	0x08008ec6

08006c88 <__ulp>:
 8006c88:	b082      	sub	sp, #8
 8006c8a:	ed8d 0b00 	vstr	d0, [sp]
 8006c8e:	9a01      	ldr	r2, [sp, #4]
 8006c90:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd0 <__ulp+0x48>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dc08      	bgt.n	8006cae <__ulp+0x26>
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006ca2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ca6:	da04      	bge.n	8006cb2 <__ulp+0x2a>
 8006ca8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006cac:	4113      	asrs	r3, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	e008      	b.n	8006cc4 <__ulp+0x3c>
 8006cb2:	f1a2 0314 	sub.w	r3, r2, #20
 8006cb6:	2b1e      	cmp	r3, #30
 8006cb8:	bfda      	itte	le
 8006cba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006cbe:	40da      	lsrle	r2, r3
 8006cc0:	2201      	movgt	r2, #1
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	ec41 0b10 	vmov	d0, r0, r1
 8006ccc:	b002      	add	sp, #8
 8006cce:	4770      	bx	lr
 8006cd0:	7ff00000 	.word	0x7ff00000

08006cd4 <__b2d>:
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	6906      	ldr	r6, [r0, #16]
 8006cda:	f100 0814 	add.w	r8, r0, #20
 8006cde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006ce2:	1f37      	subs	r7, r6, #4
 8006ce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7ff fd4b 	bl	8006784 <__hi0bits>
 8006cee:	f1c0 0320 	rsb	r3, r0, #32
 8006cf2:	280a      	cmp	r0, #10
 8006cf4:	600b      	str	r3, [r1, #0]
 8006cf6:	491b      	ldr	r1, [pc, #108]	@ (8006d64 <__b2d+0x90>)
 8006cf8:	dc15      	bgt.n	8006d26 <__b2d+0x52>
 8006cfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8006cfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8006d02:	45b8      	cmp	r8, r7
 8006d04:	ea43 0501 	orr.w	r5, r3, r1
 8006d08:	bf34      	ite	cc
 8006d0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006d0e:	2300      	movcs	r3, #0
 8006d10:	3015      	adds	r0, #21
 8006d12:	fa02 f000 	lsl.w	r0, r2, r0
 8006d16:	fa23 f30c 	lsr.w	r3, r3, ip
 8006d1a:	4303      	orrs	r3, r0
 8006d1c:	461c      	mov	r4, r3
 8006d1e:	ec45 4b10 	vmov	d0, r4, r5
 8006d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d26:	45b8      	cmp	r8, r7
 8006d28:	bf3a      	itte	cc
 8006d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006d2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006d32:	2300      	movcs	r3, #0
 8006d34:	380b      	subs	r0, #11
 8006d36:	d012      	beq.n	8006d5e <__b2d+0x8a>
 8006d38:	f1c0 0120 	rsb	r1, r0, #32
 8006d3c:	fa23 f401 	lsr.w	r4, r3, r1
 8006d40:	4082      	lsls	r2, r0
 8006d42:	4322      	orrs	r2, r4
 8006d44:	4547      	cmp	r7, r8
 8006d46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006d4a:	bf8c      	ite	hi
 8006d4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006d50:	2200      	movls	r2, #0
 8006d52:	4083      	lsls	r3, r0
 8006d54:	40ca      	lsrs	r2, r1
 8006d56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	e7de      	b.n	8006d1c <__b2d+0x48>
 8006d5e:	ea42 0501 	orr.w	r5, r2, r1
 8006d62:	e7db      	b.n	8006d1c <__b2d+0x48>
 8006d64:	3ff00000 	.word	0x3ff00000

08006d68 <__d2b>:
 8006d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	2101      	movs	r1, #1
 8006d70:	ec59 8b10 	vmov	r8, r9, d0
 8006d74:	4616      	mov	r6, r2
 8006d76:	f7ff fc13 	bl	80065a0 <_Balloc>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	b930      	cbnz	r0, 8006d8c <__d2b+0x24>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <__d2b+0xa8>)
 8006d82:	4824      	ldr	r0, [pc, #144]	@ (8006e14 <__d2b+0xac>)
 8006d84:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d88:	f001 f996 	bl	80080b8 <__assert_func>
 8006d8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d94:	b10d      	cbz	r5, 8006d9a <__d2b+0x32>
 8006d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	f1b8 0300 	subs.w	r3, r8, #0
 8006da0:	d023      	beq.n	8006dea <__d2b+0x82>
 8006da2:	4668      	mov	r0, sp
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	f7ff fd0c 	bl	80067c2 <__lo0bits>
 8006daa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006dae:	b1d0      	cbz	r0, 8006de6 <__d2b+0x7e>
 8006db0:	f1c0 0320 	rsb	r3, r0, #32
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	430b      	orrs	r3, r1
 8006dba:	40c2      	lsrs	r2, r0
 8006dbc:	6163      	str	r3, [r4, #20]
 8006dbe:	9201      	str	r2, [sp, #4]
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	61a3      	str	r3, [r4, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bf0c      	ite	eq
 8006dc8:	2201      	moveq	r2, #1
 8006dca:	2202      	movne	r2, #2
 8006dcc:	6122      	str	r2, [r4, #16]
 8006dce:	b1a5      	cbz	r5, 8006dfa <__d2b+0x92>
 8006dd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006dd4:	4405      	add	r5, r0
 8006dd6:	603d      	str	r5, [r7, #0]
 8006dd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ddc:	6030      	str	r0, [r6, #0]
 8006dde:	4620      	mov	r0, r4
 8006de0:	b003      	add	sp, #12
 8006de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006de6:	6161      	str	r1, [r4, #20]
 8006de8:	e7ea      	b.n	8006dc0 <__d2b+0x58>
 8006dea:	a801      	add	r0, sp, #4
 8006dec:	f7ff fce9 	bl	80067c2 <__lo0bits>
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	6163      	str	r3, [r4, #20]
 8006df4:	3020      	adds	r0, #32
 8006df6:	2201      	movs	r2, #1
 8006df8:	e7e8      	b.n	8006dcc <__d2b+0x64>
 8006dfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006dfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e02:	6038      	str	r0, [r7, #0]
 8006e04:	6918      	ldr	r0, [r3, #16]
 8006e06:	f7ff fcbd 	bl	8006784 <__hi0bits>
 8006e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e0e:	e7e5      	b.n	8006ddc <__d2b+0x74>
 8006e10:	08008eb5 	.word	0x08008eb5
 8006e14:	08008ec6 	.word	0x08008ec6

08006e18 <__ratio>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	e9cd 1000 	strd	r1, r0, [sp]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f7ff ff56 	bl	8006cd4 <__b2d>
 8006e28:	9800      	ldr	r0, [sp, #0]
 8006e2a:	a903      	add	r1, sp, #12
 8006e2c:	ec55 4b10 	vmov	r4, r5, d0
 8006e30:	f7ff ff50 	bl	8006cd4 <__b2d>
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	6919      	ldr	r1, [r3, #16]
 8006e38:	9b00      	ldr	r3, [sp, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	1ac9      	subs	r1, r1, r3
 8006e3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	ec5b ab10 	vmov	sl, fp, d0
 8006e48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bfce      	itee	gt
 8006e50:	462a      	movgt	r2, r5
 8006e52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e56:	465a      	movle	r2, fp
 8006e58:	462f      	mov	r7, r5
 8006e5a:	46d9      	mov	r9, fp
 8006e5c:	bfcc      	ite	gt
 8006e5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006e66:	464b      	mov	r3, r9
 8006e68:	4652      	mov	r2, sl
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fced 	bl	800084c <__aeabi_ddiv>
 8006e72:	ec41 0b10 	vmov	d0, r0, r1
 8006e76:	b005      	add	sp, #20
 8006e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e7c <__copybits>:
 8006e7c:	3901      	subs	r1, #1
 8006e7e:	b570      	push	{r4, r5, r6, lr}
 8006e80:	1149      	asrs	r1, r1, #5
 8006e82:	6914      	ldr	r4, [r2, #16]
 8006e84:	3101      	adds	r1, #1
 8006e86:	f102 0314 	add.w	r3, r2, #20
 8006e8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e92:	1f05      	subs	r5, r0, #4
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d30c      	bcc.n	8006eb2 <__copybits+0x36>
 8006e98:	1aa3      	subs	r3, r4, r2
 8006e9a:	3b11      	subs	r3, #17
 8006e9c:	f023 0303 	bic.w	r3, r3, #3
 8006ea0:	3211      	adds	r2, #17
 8006ea2:	42a2      	cmp	r2, r4
 8006ea4:	bf88      	it	hi
 8006ea6:	2300      	movhi	r3, #0
 8006ea8:	4418      	add	r0, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4288      	cmp	r0, r1
 8006eae:	d305      	bcc.n	8006ebc <__copybits+0x40>
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
 8006eb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006eb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006eba:	e7eb      	b.n	8006e94 <__copybits+0x18>
 8006ebc:	f840 3b04 	str.w	r3, [r0], #4
 8006ec0:	e7f4      	b.n	8006eac <__copybits+0x30>

08006ec2 <__any_on>:
 8006ec2:	f100 0214 	add.w	r2, r0, #20
 8006ec6:	6900      	ldr	r0, [r0, #16]
 8006ec8:	114b      	asrs	r3, r1, #5
 8006eca:	4298      	cmp	r0, r3
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	db11      	blt.n	8006ef4 <__any_on+0x32>
 8006ed0:	dd0a      	ble.n	8006ee8 <__any_on+0x26>
 8006ed2:	f011 011f 	ands.w	r1, r1, #31
 8006ed6:	d007      	beq.n	8006ee8 <__any_on+0x26>
 8006ed8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006edc:	fa24 f001 	lsr.w	r0, r4, r1
 8006ee0:	fa00 f101 	lsl.w	r1, r0, r1
 8006ee4:	428c      	cmp	r4, r1
 8006ee6:	d10b      	bne.n	8006f00 <__any_on+0x3e>
 8006ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d803      	bhi.n	8006ef8 <__any_on+0x36>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bd10      	pop	{r4, pc}
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	e7f7      	b.n	8006ee8 <__any_on+0x26>
 8006ef8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d0f5      	beq.n	8006eec <__any_on+0x2a>
 8006f00:	2001      	movs	r0, #1
 8006f02:	e7f6      	b.n	8006ef2 <__any_on+0x30>

08006f04 <sulp>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	ec45 4b10 	vmov	d0, r4, r5
 8006f0e:	4616      	mov	r6, r2
 8006f10:	f7ff feba 	bl	8006c88 <__ulp>
 8006f14:	ec51 0b10 	vmov	r0, r1, d0
 8006f18:	b17e      	cbz	r6, 8006f3a <sulp+0x36>
 8006f1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dd09      	ble.n	8006f3a <sulp+0x36>
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006f2c:	2400      	movs	r4, #0
 8006f2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	f7f9 fb5f 	bl	80005f8 <__aeabi_dmul>
 8006f3a:	ec41 0b10 	vmov	d0, r0, r1
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}

08006f40 <_strtod_l>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	b09f      	sub	sp, #124	@ 0x7c
 8006f46:	460c      	mov	r4, r1
 8006f48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006f4e:	9005      	str	r0, [sp, #20]
 8006f50:	f04f 0a00 	mov.w	sl, #0
 8006f54:	f04f 0b00 	mov.w	fp, #0
 8006f58:	460a      	mov	r2, r1
 8006f5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f5c:	7811      	ldrb	r1, [r2, #0]
 8006f5e:	292b      	cmp	r1, #43	@ 0x2b
 8006f60:	d04a      	beq.n	8006ff8 <_strtod_l+0xb8>
 8006f62:	d838      	bhi.n	8006fd6 <_strtod_l+0x96>
 8006f64:	290d      	cmp	r1, #13
 8006f66:	d832      	bhi.n	8006fce <_strtod_l+0x8e>
 8006f68:	2908      	cmp	r1, #8
 8006f6a:	d832      	bhi.n	8006fd2 <_strtod_l+0x92>
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d03b      	beq.n	8006fe8 <_strtod_l+0xa8>
 8006f70:	2200      	movs	r2, #0
 8006f72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006f74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006f76:	782a      	ldrb	r2, [r5, #0]
 8006f78:	2a30      	cmp	r2, #48	@ 0x30
 8006f7a:	f040 80b3 	bne.w	80070e4 <_strtod_l+0x1a4>
 8006f7e:	786a      	ldrb	r2, [r5, #1]
 8006f80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f84:	2a58      	cmp	r2, #88	@ 0x58
 8006f86:	d16e      	bne.n	8007066 <_strtod_l+0x126>
 8006f88:	9302      	str	r3, [sp, #8]
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4a8e      	ldr	r2, [pc, #568]	@ (80071cc <_strtod_l+0x28c>)
 8006f94:	9805      	ldr	r0, [sp, #20]
 8006f96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f98:	a919      	add	r1, sp, #100	@ 0x64
 8006f9a:	f001 f927 	bl	80081ec <__gethex>
 8006f9e:	f010 060f 	ands.w	r6, r0, #15
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	d005      	beq.n	8006fb2 <_strtod_l+0x72>
 8006fa6:	2e06      	cmp	r6, #6
 8006fa8:	d128      	bne.n	8006ffc <_strtod_l+0xbc>
 8006faa:	3501      	adds	r5, #1
 8006fac:	2300      	movs	r3, #0
 8006fae:	9519      	str	r5, [sp, #100]	@ 0x64
 8006fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 858e 	bne.w	8007ad6 <_strtod_l+0xb96>
 8006fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbc:	b1cb      	cbz	r3, 8006ff2 <_strtod_l+0xb2>
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006fc4:	ec43 2b10 	vmov	d0, r2, r3
 8006fc8:	b01f      	add	sp, #124	@ 0x7c
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	2920      	cmp	r1, #32
 8006fd0:	d1ce      	bne.n	8006f70 <_strtod_l+0x30>
 8006fd2:	3201      	adds	r2, #1
 8006fd4:	e7c1      	b.n	8006f5a <_strtod_l+0x1a>
 8006fd6:	292d      	cmp	r1, #45	@ 0x2d
 8006fd8:	d1ca      	bne.n	8006f70 <_strtod_l+0x30>
 8006fda:	2101      	movs	r1, #1
 8006fdc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fde:	1c51      	adds	r1, r2, #1
 8006fe0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fe2:	7852      	ldrb	r2, [r2, #1]
 8006fe4:	2a00      	cmp	r2, #0
 8006fe6:	d1c5      	bne.n	8006f74 <_strtod_l+0x34>
 8006fe8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fea:	9419      	str	r4, [sp, #100]	@ 0x64
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8570 	bne.w	8007ad2 <_strtod_l+0xb92>
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	e7e5      	b.n	8006fc4 <_strtod_l+0x84>
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	e7ef      	b.n	8006fdc <_strtod_l+0x9c>
 8006ffc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ffe:	b13a      	cbz	r2, 8007010 <_strtod_l+0xd0>
 8007000:	2135      	movs	r1, #53	@ 0x35
 8007002:	a81c      	add	r0, sp, #112	@ 0x70
 8007004:	f7ff ff3a 	bl	8006e7c <__copybits>
 8007008:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800700a:	9805      	ldr	r0, [sp, #20]
 800700c:	f7ff fb08 	bl	8006620 <_Bfree>
 8007010:	3e01      	subs	r6, #1
 8007012:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007014:	2e04      	cmp	r6, #4
 8007016:	d806      	bhi.n	8007026 <_strtod_l+0xe6>
 8007018:	e8df f006 	tbb	[pc, r6]
 800701c:	201d0314 	.word	0x201d0314
 8007020:	14          	.byte	0x14
 8007021:	00          	.byte	0x00
 8007022:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007026:	05e1      	lsls	r1, r4, #23
 8007028:	bf48      	it	mi
 800702a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800702e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007032:	0d1b      	lsrs	r3, r3, #20
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1bb      	bne.n	8006fb2 <_strtod_l+0x72>
 800703a:	f7fe fb31 	bl	80056a0 <__errno>
 800703e:	2322      	movs	r3, #34	@ 0x22
 8007040:	6003      	str	r3, [r0, #0]
 8007042:	e7b6      	b.n	8006fb2 <_strtod_l+0x72>
 8007044:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007048:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800704c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007050:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007054:	e7e7      	b.n	8007026 <_strtod_l+0xe6>
 8007056:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80071d4 <_strtod_l+0x294>
 800705a:	e7e4      	b.n	8007026 <_strtod_l+0xe6>
 800705c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007060:	f04f 3aff 	mov.w	sl, #4294967295
 8007064:	e7df      	b.n	8007026 <_strtod_l+0xe6>
 8007066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	9219      	str	r2, [sp, #100]	@ 0x64
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b30      	cmp	r3, #48	@ 0x30
 8007070:	d0f9      	beq.n	8007066 <_strtod_l+0x126>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d09d      	beq.n	8006fb2 <_strtod_l+0x72>
 8007076:	2301      	movs	r3, #1
 8007078:	9309      	str	r3, [sp, #36]	@ 0x24
 800707a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800707c:	930c      	str	r3, [sp, #48]	@ 0x30
 800707e:	2300      	movs	r3, #0
 8007080:	9308      	str	r3, [sp, #32]
 8007082:	930a      	str	r3, [sp, #40]	@ 0x28
 8007084:	461f      	mov	r7, r3
 8007086:	220a      	movs	r2, #10
 8007088:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800708a:	7805      	ldrb	r5, [r0, #0]
 800708c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007090:	b2d9      	uxtb	r1, r3
 8007092:	2909      	cmp	r1, #9
 8007094:	d928      	bls.n	80070e8 <_strtod_l+0x1a8>
 8007096:	494e      	ldr	r1, [pc, #312]	@ (80071d0 <_strtod_l+0x290>)
 8007098:	2201      	movs	r2, #1
 800709a:	f000 ffd5 	bl	8008048 <strncmp>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d032      	beq.n	8007108 <_strtod_l+0x1c8>
 80070a2:	2000      	movs	r0, #0
 80070a4:	462a      	mov	r2, r5
 80070a6:	4681      	mov	r9, r0
 80070a8:	463d      	mov	r5, r7
 80070aa:	4603      	mov	r3, r0
 80070ac:	2a65      	cmp	r2, #101	@ 0x65
 80070ae:	d001      	beq.n	80070b4 <_strtod_l+0x174>
 80070b0:	2a45      	cmp	r2, #69	@ 0x45
 80070b2:	d114      	bne.n	80070de <_strtod_l+0x19e>
 80070b4:	b91d      	cbnz	r5, 80070be <_strtod_l+0x17e>
 80070b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070b8:	4302      	orrs	r2, r0
 80070ba:	d095      	beq.n	8006fe8 <_strtod_l+0xa8>
 80070bc:	2500      	movs	r5, #0
 80070be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80070c0:	1c62      	adds	r2, r4, #1
 80070c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80070c4:	7862      	ldrb	r2, [r4, #1]
 80070c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80070c8:	d077      	beq.n	80071ba <_strtod_l+0x27a>
 80070ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80070cc:	d07b      	beq.n	80071c6 <_strtod_l+0x286>
 80070ce:	f04f 0c00 	mov.w	ip, #0
 80070d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80070d6:	2909      	cmp	r1, #9
 80070d8:	f240 8082 	bls.w	80071e0 <_strtod_l+0x2a0>
 80070dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	e0a2      	b.n	800722a <_strtod_l+0x2ea>
 80070e4:	2300      	movs	r3, #0
 80070e6:	e7c7      	b.n	8007078 <_strtod_l+0x138>
 80070e8:	2f08      	cmp	r7, #8
 80070ea:	bfd5      	itete	le
 80070ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80070ee:	9908      	ldrgt	r1, [sp, #32]
 80070f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80070f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80070f8:	f100 0001 	add.w	r0, r0, #1
 80070fc:	bfd4      	ite	le
 80070fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007100:	9308      	strgt	r3, [sp, #32]
 8007102:	3701      	adds	r7, #1
 8007104:	9019      	str	r0, [sp, #100]	@ 0x64
 8007106:	e7bf      	b.n	8007088 <_strtod_l+0x148>
 8007108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	9219      	str	r2, [sp, #100]	@ 0x64
 800710e:	785a      	ldrb	r2, [r3, #1]
 8007110:	b37f      	cbz	r7, 8007172 <_strtod_l+0x232>
 8007112:	4681      	mov	r9, r0
 8007114:	463d      	mov	r5, r7
 8007116:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800711a:	2b09      	cmp	r3, #9
 800711c:	d912      	bls.n	8007144 <_strtod_l+0x204>
 800711e:	2301      	movs	r3, #1
 8007120:	e7c4      	b.n	80070ac <_strtod_l+0x16c>
 8007122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	9219      	str	r2, [sp, #100]	@ 0x64
 8007128:	785a      	ldrb	r2, [r3, #1]
 800712a:	3001      	adds	r0, #1
 800712c:	2a30      	cmp	r2, #48	@ 0x30
 800712e:	d0f8      	beq.n	8007122 <_strtod_l+0x1e2>
 8007130:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007134:	2b08      	cmp	r3, #8
 8007136:	f200 84d3 	bhi.w	8007ae0 <_strtod_l+0xba0>
 800713a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800713c:	930c      	str	r3, [sp, #48]	@ 0x30
 800713e:	4681      	mov	r9, r0
 8007140:	2000      	movs	r0, #0
 8007142:	4605      	mov	r5, r0
 8007144:	3a30      	subs	r2, #48	@ 0x30
 8007146:	f100 0301 	add.w	r3, r0, #1
 800714a:	d02a      	beq.n	80071a2 <_strtod_l+0x262>
 800714c:	4499      	add	r9, r3
 800714e:	eb00 0c05 	add.w	ip, r0, r5
 8007152:	462b      	mov	r3, r5
 8007154:	210a      	movs	r1, #10
 8007156:	4563      	cmp	r3, ip
 8007158:	d10d      	bne.n	8007176 <_strtod_l+0x236>
 800715a:	1c69      	adds	r1, r5, #1
 800715c:	4401      	add	r1, r0
 800715e:	4428      	add	r0, r5
 8007160:	2808      	cmp	r0, #8
 8007162:	dc16      	bgt.n	8007192 <_strtod_l+0x252>
 8007164:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007166:	230a      	movs	r3, #10
 8007168:	fb03 2300 	mla	r3, r3, r0, r2
 800716c:	930a      	str	r3, [sp, #40]	@ 0x28
 800716e:	2300      	movs	r3, #0
 8007170:	e018      	b.n	80071a4 <_strtod_l+0x264>
 8007172:	4638      	mov	r0, r7
 8007174:	e7da      	b.n	800712c <_strtod_l+0x1ec>
 8007176:	2b08      	cmp	r3, #8
 8007178:	f103 0301 	add.w	r3, r3, #1
 800717c:	dc03      	bgt.n	8007186 <_strtod_l+0x246>
 800717e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007180:	434e      	muls	r6, r1
 8007182:	960a      	str	r6, [sp, #40]	@ 0x28
 8007184:	e7e7      	b.n	8007156 <_strtod_l+0x216>
 8007186:	2b10      	cmp	r3, #16
 8007188:	bfde      	ittt	le
 800718a:	9e08      	ldrle	r6, [sp, #32]
 800718c:	434e      	mulle	r6, r1
 800718e:	9608      	strle	r6, [sp, #32]
 8007190:	e7e1      	b.n	8007156 <_strtod_l+0x216>
 8007192:	280f      	cmp	r0, #15
 8007194:	dceb      	bgt.n	800716e <_strtod_l+0x22e>
 8007196:	9808      	ldr	r0, [sp, #32]
 8007198:	230a      	movs	r3, #10
 800719a:	fb03 2300 	mla	r3, r3, r0, r2
 800719e:	9308      	str	r3, [sp, #32]
 80071a0:	e7e5      	b.n	800716e <_strtod_l+0x22e>
 80071a2:	4629      	mov	r1, r5
 80071a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071a6:	1c50      	adds	r0, r2, #1
 80071a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80071aa:	7852      	ldrb	r2, [r2, #1]
 80071ac:	4618      	mov	r0, r3
 80071ae:	460d      	mov	r5, r1
 80071b0:	e7b1      	b.n	8007116 <_strtod_l+0x1d6>
 80071b2:	f04f 0900 	mov.w	r9, #0
 80071b6:	2301      	movs	r3, #1
 80071b8:	e77d      	b.n	80070b6 <_strtod_l+0x176>
 80071ba:	f04f 0c00 	mov.w	ip, #0
 80071be:	1ca2      	adds	r2, r4, #2
 80071c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80071c2:	78a2      	ldrb	r2, [r4, #2]
 80071c4:	e785      	b.n	80070d2 <_strtod_l+0x192>
 80071c6:	f04f 0c01 	mov.w	ip, #1
 80071ca:	e7f8      	b.n	80071be <_strtod_l+0x27e>
 80071cc:	08009038 	.word	0x08009038
 80071d0:	08009020 	.word	0x08009020
 80071d4:	7ff00000 	.word	0x7ff00000
 80071d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071da:	1c51      	adds	r1, r2, #1
 80071dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80071de:	7852      	ldrb	r2, [r2, #1]
 80071e0:	2a30      	cmp	r2, #48	@ 0x30
 80071e2:	d0f9      	beq.n	80071d8 <_strtod_l+0x298>
 80071e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80071e8:	2908      	cmp	r1, #8
 80071ea:	f63f af78 	bhi.w	80070de <_strtod_l+0x19e>
 80071ee:	3a30      	subs	r2, #48	@ 0x30
 80071f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80071f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80071f6:	f04f 080a 	mov.w	r8, #10
 80071fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071fc:	1c56      	adds	r6, r2, #1
 80071fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007200:	7852      	ldrb	r2, [r2, #1]
 8007202:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007206:	f1be 0f09 	cmp.w	lr, #9
 800720a:	d939      	bls.n	8007280 <_strtod_l+0x340>
 800720c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800720e:	1a76      	subs	r6, r6, r1
 8007210:	2e08      	cmp	r6, #8
 8007212:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007216:	dc03      	bgt.n	8007220 <_strtod_l+0x2e0>
 8007218:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800721a:	4588      	cmp	r8, r1
 800721c:	bfa8      	it	ge
 800721e:	4688      	movge	r8, r1
 8007220:	f1bc 0f00 	cmp.w	ip, #0
 8007224:	d001      	beq.n	800722a <_strtod_l+0x2ea>
 8007226:	f1c8 0800 	rsb	r8, r8, #0
 800722a:	2d00      	cmp	r5, #0
 800722c:	d14e      	bne.n	80072cc <_strtod_l+0x38c>
 800722e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007230:	4308      	orrs	r0, r1
 8007232:	f47f aebe 	bne.w	8006fb2 <_strtod_l+0x72>
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f aed6 	bne.w	8006fe8 <_strtod_l+0xa8>
 800723c:	2a69      	cmp	r2, #105	@ 0x69
 800723e:	d028      	beq.n	8007292 <_strtod_l+0x352>
 8007240:	dc25      	bgt.n	800728e <_strtod_l+0x34e>
 8007242:	2a49      	cmp	r2, #73	@ 0x49
 8007244:	d025      	beq.n	8007292 <_strtod_l+0x352>
 8007246:	2a4e      	cmp	r2, #78	@ 0x4e
 8007248:	f47f aece 	bne.w	8006fe8 <_strtod_l+0xa8>
 800724c:	499b      	ldr	r1, [pc, #620]	@ (80074bc <_strtod_l+0x57c>)
 800724e:	a819      	add	r0, sp, #100	@ 0x64
 8007250:	f001 f9ee 	bl	8008630 <__match>
 8007254:	2800      	cmp	r0, #0
 8007256:	f43f aec7 	beq.w	8006fe8 <_strtod_l+0xa8>
 800725a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b28      	cmp	r3, #40	@ 0x28
 8007260:	d12e      	bne.n	80072c0 <_strtod_l+0x380>
 8007262:	4997      	ldr	r1, [pc, #604]	@ (80074c0 <_strtod_l+0x580>)
 8007264:	aa1c      	add	r2, sp, #112	@ 0x70
 8007266:	a819      	add	r0, sp, #100	@ 0x64
 8007268:	f001 f9f6 	bl	8008658 <__hexnan>
 800726c:	2805      	cmp	r0, #5
 800726e:	d127      	bne.n	80072c0 <_strtod_l+0x380>
 8007270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007272:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007276:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800727a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800727e:	e698      	b.n	8006fb2 <_strtod_l+0x72>
 8007280:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007282:	fb08 2101 	mla	r1, r8, r1, r2
 8007286:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800728a:	920e      	str	r2, [sp, #56]	@ 0x38
 800728c:	e7b5      	b.n	80071fa <_strtod_l+0x2ba>
 800728e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007290:	e7da      	b.n	8007248 <_strtod_l+0x308>
 8007292:	498c      	ldr	r1, [pc, #560]	@ (80074c4 <_strtod_l+0x584>)
 8007294:	a819      	add	r0, sp, #100	@ 0x64
 8007296:	f001 f9cb 	bl	8008630 <__match>
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aea4 	beq.w	8006fe8 <_strtod_l+0xa8>
 80072a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072a2:	4989      	ldr	r1, [pc, #548]	@ (80074c8 <_strtod_l+0x588>)
 80072a4:	3b01      	subs	r3, #1
 80072a6:	a819      	add	r0, sp, #100	@ 0x64
 80072a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80072aa:	f001 f9c1 	bl	8008630 <__match>
 80072ae:	b910      	cbnz	r0, 80072b6 <_strtod_l+0x376>
 80072b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072b2:	3301      	adds	r3, #1
 80072b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80072b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80074d8 <_strtod_l+0x598>
 80072ba:	f04f 0a00 	mov.w	sl, #0
 80072be:	e678      	b.n	8006fb2 <_strtod_l+0x72>
 80072c0:	4882      	ldr	r0, [pc, #520]	@ (80074cc <_strtod_l+0x58c>)
 80072c2:	f000 fef1 	bl	80080a8 <nan>
 80072c6:	ec5b ab10 	vmov	sl, fp, d0
 80072ca:	e672      	b.n	8006fb2 <_strtod_l+0x72>
 80072cc:	eba8 0309 	sub.w	r3, r8, r9
 80072d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	bf08      	it	eq
 80072d8:	462f      	moveq	r7, r5
 80072da:	2d10      	cmp	r5, #16
 80072dc:	462c      	mov	r4, r5
 80072de:	bfa8      	it	ge
 80072e0:	2410      	movge	r4, #16
 80072e2:	f7f9 f90f 	bl	8000504 <__aeabi_ui2d>
 80072e6:	2d09      	cmp	r5, #9
 80072e8:	4682      	mov	sl, r0
 80072ea:	468b      	mov	fp, r1
 80072ec:	dc13      	bgt.n	8007316 <_strtod_l+0x3d6>
 80072ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f43f ae5e 	beq.w	8006fb2 <_strtod_l+0x72>
 80072f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f8:	dd78      	ble.n	80073ec <_strtod_l+0x4ac>
 80072fa:	2b16      	cmp	r3, #22
 80072fc:	dc5f      	bgt.n	80073be <_strtod_l+0x47e>
 80072fe:	4974      	ldr	r1, [pc, #464]	@ (80074d0 <_strtod_l+0x590>)
 8007300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007308:	4652      	mov	r2, sl
 800730a:	465b      	mov	r3, fp
 800730c:	f7f9 f974 	bl	80005f8 <__aeabi_dmul>
 8007310:	4682      	mov	sl, r0
 8007312:	468b      	mov	fp, r1
 8007314:	e64d      	b.n	8006fb2 <_strtod_l+0x72>
 8007316:	4b6e      	ldr	r3, [pc, #440]	@ (80074d0 <_strtod_l+0x590>)
 8007318:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800731c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007320:	f7f9 f96a 	bl	80005f8 <__aeabi_dmul>
 8007324:	4682      	mov	sl, r0
 8007326:	9808      	ldr	r0, [sp, #32]
 8007328:	468b      	mov	fp, r1
 800732a:	f7f9 f8eb 	bl	8000504 <__aeabi_ui2d>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4650      	mov	r0, sl
 8007334:	4659      	mov	r1, fp
 8007336:	f7f8 ffa9 	bl	800028c <__adddf3>
 800733a:	2d0f      	cmp	r5, #15
 800733c:	4682      	mov	sl, r0
 800733e:	468b      	mov	fp, r1
 8007340:	ddd5      	ble.n	80072ee <_strtod_l+0x3ae>
 8007342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007344:	1b2c      	subs	r4, r5, r4
 8007346:	441c      	add	r4, r3
 8007348:	2c00      	cmp	r4, #0
 800734a:	f340 8096 	ble.w	800747a <_strtod_l+0x53a>
 800734e:	f014 030f 	ands.w	r3, r4, #15
 8007352:	d00a      	beq.n	800736a <_strtod_l+0x42a>
 8007354:	495e      	ldr	r1, [pc, #376]	@ (80074d0 <_strtod_l+0x590>)
 8007356:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800735a:	4652      	mov	r2, sl
 800735c:	465b      	mov	r3, fp
 800735e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007362:	f7f9 f949 	bl	80005f8 <__aeabi_dmul>
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	f034 040f 	bics.w	r4, r4, #15
 800736e:	d073      	beq.n	8007458 <_strtod_l+0x518>
 8007370:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007374:	dd48      	ble.n	8007408 <_strtod_l+0x4c8>
 8007376:	2400      	movs	r4, #0
 8007378:	46a0      	mov	r8, r4
 800737a:	940a      	str	r4, [sp, #40]	@ 0x28
 800737c:	46a1      	mov	r9, r4
 800737e:	9a05      	ldr	r2, [sp, #20]
 8007380:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80074d8 <_strtod_l+0x598>
 8007384:	2322      	movs	r3, #34	@ 0x22
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f04f 0a00 	mov.w	sl, #0
 800738c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	f43f ae0f 	beq.w	8006fb2 <_strtod_l+0x72>
 8007394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007396:	9805      	ldr	r0, [sp, #20]
 8007398:	f7ff f942 	bl	8006620 <_Bfree>
 800739c:	9805      	ldr	r0, [sp, #20]
 800739e:	4649      	mov	r1, r9
 80073a0:	f7ff f93e 	bl	8006620 <_Bfree>
 80073a4:	9805      	ldr	r0, [sp, #20]
 80073a6:	4641      	mov	r1, r8
 80073a8:	f7ff f93a 	bl	8006620 <_Bfree>
 80073ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073ae:	9805      	ldr	r0, [sp, #20]
 80073b0:	f7ff f936 	bl	8006620 <_Bfree>
 80073b4:	9805      	ldr	r0, [sp, #20]
 80073b6:	4621      	mov	r1, r4
 80073b8:	f7ff f932 	bl	8006620 <_Bfree>
 80073bc:	e5f9      	b.n	8006fb2 <_strtod_l+0x72>
 80073be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80073c4:	4293      	cmp	r3, r2
 80073c6:	dbbc      	blt.n	8007342 <_strtod_l+0x402>
 80073c8:	4c41      	ldr	r4, [pc, #260]	@ (80074d0 <_strtod_l+0x590>)
 80073ca:	f1c5 050f 	rsb	r5, r5, #15
 80073ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80073d2:	4652      	mov	r2, sl
 80073d4:	465b      	mov	r3, fp
 80073d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073da:	f7f9 f90d 	bl	80005f8 <__aeabi_dmul>
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	1b5d      	subs	r5, r3, r5
 80073e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80073e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073ea:	e78f      	b.n	800730c <_strtod_l+0x3cc>
 80073ec:	3316      	adds	r3, #22
 80073ee:	dba8      	blt.n	8007342 <_strtod_l+0x402>
 80073f0:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <_strtod_l+0x590>)
 80073f2:	eba9 0808 	sub.w	r8, r9, r8
 80073f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80073fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80073fe:	4650      	mov	r0, sl
 8007400:	4659      	mov	r1, fp
 8007402:	f7f9 fa23 	bl	800084c <__aeabi_ddiv>
 8007406:	e783      	b.n	8007310 <_strtod_l+0x3d0>
 8007408:	4b32      	ldr	r3, [pc, #200]	@ (80074d4 <_strtod_l+0x594>)
 800740a:	9308      	str	r3, [sp, #32]
 800740c:	2300      	movs	r3, #0
 800740e:	1124      	asrs	r4, r4, #4
 8007410:	4650      	mov	r0, sl
 8007412:	4659      	mov	r1, fp
 8007414:	461e      	mov	r6, r3
 8007416:	2c01      	cmp	r4, #1
 8007418:	dc21      	bgt.n	800745e <_strtod_l+0x51e>
 800741a:	b10b      	cbz	r3, 8007420 <_strtod_l+0x4e0>
 800741c:	4682      	mov	sl, r0
 800741e:	468b      	mov	fp, r1
 8007420:	492c      	ldr	r1, [pc, #176]	@ (80074d4 <_strtod_l+0x594>)
 8007422:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007426:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800742a:	4652      	mov	r2, sl
 800742c:	465b      	mov	r3, fp
 800742e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007432:	f7f9 f8e1 	bl	80005f8 <__aeabi_dmul>
 8007436:	4b28      	ldr	r3, [pc, #160]	@ (80074d8 <_strtod_l+0x598>)
 8007438:	460a      	mov	r2, r1
 800743a:	400b      	ands	r3, r1
 800743c:	4927      	ldr	r1, [pc, #156]	@ (80074dc <_strtod_l+0x59c>)
 800743e:	428b      	cmp	r3, r1
 8007440:	4682      	mov	sl, r0
 8007442:	d898      	bhi.n	8007376 <_strtod_l+0x436>
 8007444:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007448:	428b      	cmp	r3, r1
 800744a:	bf86      	itte	hi
 800744c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80074e0 <_strtod_l+0x5a0>
 8007450:	f04f 3aff 	movhi.w	sl, #4294967295
 8007454:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007458:	2300      	movs	r3, #0
 800745a:	9308      	str	r3, [sp, #32]
 800745c:	e07a      	b.n	8007554 <_strtod_l+0x614>
 800745e:	07e2      	lsls	r2, r4, #31
 8007460:	d505      	bpl.n	800746e <_strtod_l+0x52e>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	2301      	movs	r3, #1
 800746e:	9a08      	ldr	r2, [sp, #32]
 8007470:	3208      	adds	r2, #8
 8007472:	3601      	adds	r6, #1
 8007474:	1064      	asrs	r4, r4, #1
 8007476:	9208      	str	r2, [sp, #32]
 8007478:	e7cd      	b.n	8007416 <_strtod_l+0x4d6>
 800747a:	d0ed      	beq.n	8007458 <_strtod_l+0x518>
 800747c:	4264      	negs	r4, r4
 800747e:	f014 020f 	ands.w	r2, r4, #15
 8007482:	d00a      	beq.n	800749a <_strtod_l+0x55a>
 8007484:	4b12      	ldr	r3, [pc, #72]	@ (80074d0 <_strtod_l+0x590>)
 8007486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748a:	4650      	mov	r0, sl
 800748c:	4659      	mov	r1, fp
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f7f9 f9db 	bl	800084c <__aeabi_ddiv>
 8007496:	4682      	mov	sl, r0
 8007498:	468b      	mov	fp, r1
 800749a:	1124      	asrs	r4, r4, #4
 800749c:	d0dc      	beq.n	8007458 <_strtod_l+0x518>
 800749e:	2c1f      	cmp	r4, #31
 80074a0:	dd20      	ble.n	80074e4 <_strtod_l+0x5a4>
 80074a2:	2400      	movs	r4, #0
 80074a4:	46a0      	mov	r8, r4
 80074a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80074a8:	46a1      	mov	r9, r4
 80074aa:	9a05      	ldr	r2, [sp, #20]
 80074ac:	2322      	movs	r3, #34	@ 0x22
 80074ae:	f04f 0a00 	mov.w	sl, #0
 80074b2:	f04f 0b00 	mov.w	fp, #0
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e768      	b.n	800738c <_strtod_l+0x44c>
 80074ba:	bf00      	nop
 80074bc:	08008e0d 	.word	0x08008e0d
 80074c0:	08009024 	.word	0x08009024
 80074c4:	08008e05 	.word	0x08008e05
 80074c8:	08008e3c 	.word	0x08008e3c
 80074cc:	080091cd 	.word	0x080091cd
 80074d0:	08008f58 	.word	0x08008f58
 80074d4:	08008f30 	.word	0x08008f30
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	7ca00000 	.word	0x7ca00000
 80074e0:	7fefffff 	.word	0x7fefffff
 80074e4:	f014 0310 	ands.w	r3, r4, #16
 80074e8:	bf18      	it	ne
 80074ea:	236a      	movne	r3, #106	@ 0x6a
 80074ec:	4ea9      	ldr	r6, [pc, #676]	@ (8007794 <_strtod_l+0x854>)
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	4650      	mov	r0, sl
 80074f2:	4659      	mov	r1, fp
 80074f4:	2300      	movs	r3, #0
 80074f6:	07e2      	lsls	r2, r4, #31
 80074f8:	d504      	bpl.n	8007504 <_strtod_l+0x5c4>
 80074fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	2301      	movs	r3, #1
 8007504:	1064      	asrs	r4, r4, #1
 8007506:	f106 0608 	add.w	r6, r6, #8
 800750a:	d1f4      	bne.n	80074f6 <_strtod_l+0x5b6>
 800750c:	b10b      	cbz	r3, 8007512 <_strtod_l+0x5d2>
 800750e:	4682      	mov	sl, r0
 8007510:	468b      	mov	fp, r1
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	b1b3      	cbz	r3, 8007544 <_strtod_l+0x604>
 8007516:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800751a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800751e:	2b00      	cmp	r3, #0
 8007520:	4659      	mov	r1, fp
 8007522:	dd0f      	ble.n	8007544 <_strtod_l+0x604>
 8007524:	2b1f      	cmp	r3, #31
 8007526:	dd55      	ble.n	80075d4 <_strtod_l+0x694>
 8007528:	2b34      	cmp	r3, #52	@ 0x34
 800752a:	bfde      	ittt	le
 800752c:	f04f 33ff 	movle.w	r3, #4294967295
 8007530:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007534:	4093      	lslle	r3, r2
 8007536:	f04f 0a00 	mov.w	sl, #0
 800753a:	bfcc      	ite	gt
 800753c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007540:	ea03 0b01 	andle.w	fp, r3, r1
 8007544:	2200      	movs	r2, #0
 8007546:	2300      	movs	r3, #0
 8007548:	4650      	mov	r0, sl
 800754a:	4659      	mov	r1, fp
 800754c:	f7f9 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007550:	2800      	cmp	r0, #0
 8007552:	d1a6      	bne.n	80074a2 <_strtod_l+0x562>
 8007554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800755a:	9805      	ldr	r0, [sp, #20]
 800755c:	462b      	mov	r3, r5
 800755e:	463a      	mov	r2, r7
 8007560:	f7ff f8c6 	bl	80066f0 <__s2b>
 8007564:	900a      	str	r0, [sp, #40]	@ 0x28
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f af05 	beq.w	8007376 <_strtod_l+0x436>
 800756c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800756e:	2a00      	cmp	r2, #0
 8007570:	eba9 0308 	sub.w	r3, r9, r8
 8007574:	bfa8      	it	ge
 8007576:	2300      	movge	r3, #0
 8007578:	9312      	str	r3, [sp, #72]	@ 0x48
 800757a:	2400      	movs	r4, #0
 800757c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007580:	9316      	str	r3, [sp, #88]	@ 0x58
 8007582:	46a0      	mov	r8, r4
 8007584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007586:	9805      	ldr	r0, [sp, #20]
 8007588:	6859      	ldr	r1, [r3, #4]
 800758a:	f7ff f809 	bl	80065a0 <_Balloc>
 800758e:	4681      	mov	r9, r0
 8007590:	2800      	cmp	r0, #0
 8007592:	f43f aef4 	beq.w	800737e <_strtod_l+0x43e>
 8007596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	3202      	adds	r2, #2
 800759c:	f103 010c 	add.w	r1, r3, #12
 80075a0:	0092      	lsls	r2, r2, #2
 80075a2:	300c      	adds	r0, #12
 80075a4:	f000 fd72 	bl	800808c <memcpy>
 80075a8:	ec4b ab10 	vmov	d0, sl, fp
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80075b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80075b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80075b6:	f7ff fbd7 	bl	8006d68 <__d2b>
 80075ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80075bc:	2800      	cmp	r0, #0
 80075be:	f43f aede 	beq.w	800737e <_strtod_l+0x43e>
 80075c2:	9805      	ldr	r0, [sp, #20]
 80075c4:	2101      	movs	r1, #1
 80075c6:	f7ff f929 	bl	800681c <__i2b>
 80075ca:	4680      	mov	r8, r0
 80075cc:	b948      	cbnz	r0, 80075e2 <_strtod_l+0x6a2>
 80075ce:	f04f 0800 	mov.w	r8, #0
 80075d2:	e6d4      	b.n	800737e <_strtod_l+0x43e>
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	ea03 0a0a 	and.w	sl, r3, sl
 80075e0:	e7b0      	b.n	8007544 <_strtod_l+0x604>
 80075e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80075e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	bfab      	itete	ge
 80075ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80075ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80075ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80075f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80075f2:	bfac      	ite	ge
 80075f4:	18ef      	addge	r7, r5, r3
 80075f6:	1b5e      	sublt	r6, r3, r5
 80075f8:	9b08      	ldr	r3, [sp, #32]
 80075fa:	1aed      	subs	r5, r5, r3
 80075fc:	4415      	add	r5, r2
 80075fe:	4b66      	ldr	r3, [pc, #408]	@ (8007798 <_strtod_l+0x858>)
 8007600:	3d01      	subs	r5, #1
 8007602:	429d      	cmp	r5, r3
 8007604:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007608:	da50      	bge.n	80076ac <_strtod_l+0x76c>
 800760a:	1b5b      	subs	r3, r3, r5
 800760c:	2b1f      	cmp	r3, #31
 800760e:	eba2 0203 	sub.w	r2, r2, r3
 8007612:	f04f 0101 	mov.w	r1, #1
 8007616:	dc3d      	bgt.n	8007694 <_strtod_l+0x754>
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800761e:	2300      	movs	r3, #0
 8007620:	9310      	str	r3, [sp, #64]	@ 0x40
 8007622:	18bd      	adds	r5, r7, r2
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	42af      	cmp	r7, r5
 8007628:	4416      	add	r6, r2
 800762a:	441e      	add	r6, r3
 800762c:	463b      	mov	r3, r7
 800762e:	bfa8      	it	ge
 8007630:	462b      	movge	r3, r5
 8007632:	42b3      	cmp	r3, r6
 8007634:	bfa8      	it	ge
 8007636:	4633      	movge	r3, r6
 8007638:	2b00      	cmp	r3, #0
 800763a:	bfc2      	ittt	gt
 800763c:	1aed      	subgt	r5, r5, r3
 800763e:	1af6      	subgt	r6, r6, r3
 8007640:	1aff      	subgt	r7, r7, r3
 8007642:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007644:	2b00      	cmp	r3, #0
 8007646:	dd16      	ble.n	8007676 <_strtod_l+0x736>
 8007648:	4641      	mov	r1, r8
 800764a:	9805      	ldr	r0, [sp, #20]
 800764c:	461a      	mov	r2, r3
 800764e:	f7ff f9a5 	bl	800699c <__pow5mult>
 8007652:	4680      	mov	r8, r0
 8007654:	2800      	cmp	r0, #0
 8007656:	d0ba      	beq.n	80075ce <_strtod_l+0x68e>
 8007658:	4601      	mov	r1, r0
 800765a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800765c:	9805      	ldr	r0, [sp, #20]
 800765e:	f7ff f8f3 	bl	8006848 <__multiply>
 8007662:	900e      	str	r0, [sp, #56]	@ 0x38
 8007664:	2800      	cmp	r0, #0
 8007666:	f43f ae8a 	beq.w	800737e <_strtod_l+0x43e>
 800766a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800766c:	9805      	ldr	r0, [sp, #20]
 800766e:	f7fe ffd7 	bl	8006620 <_Bfree>
 8007672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007674:	931a      	str	r3, [sp, #104]	@ 0x68
 8007676:	2d00      	cmp	r5, #0
 8007678:	dc1d      	bgt.n	80076b6 <_strtod_l+0x776>
 800767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	dd23      	ble.n	80076c8 <_strtod_l+0x788>
 8007680:	4649      	mov	r1, r9
 8007682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007684:	9805      	ldr	r0, [sp, #20]
 8007686:	f7ff f989 	bl	800699c <__pow5mult>
 800768a:	4681      	mov	r9, r0
 800768c:	b9e0      	cbnz	r0, 80076c8 <_strtod_l+0x788>
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	e674      	b.n	800737e <_strtod_l+0x43e>
 8007694:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007698:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800769c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80076a0:	35e2      	adds	r5, #226	@ 0xe2
 80076a2:	fa01 f305 	lsl.w	r3, r1, r5
 80076a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80076a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80076aa:	e7ba      	b.n	8007622 <_strtod_l+0x6e2>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80076b0:	2301      	movs	r3, #1
 80076b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076b4:	e7b5      	b.n	8007622 <_strtod_l+0x6e2>
 80076b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076b8:	9805      	ldr	r0, [sp, #20]
 80076ba:	462a      	mov	r2, r5
 80076bc:	f7ff f9c8 	bl	8006a50 <__lshift>
 80076c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1d9      	bne.n	800767a <_strtod_l+0x73a>
 80076c6:	e65a      	b.n	800737e <_strtod_l+0x43e>
 80076c8:	2e00      	cmp	r6, #0
 80076ca:	dd07      	ble.n	80076dc <_strtod_l+0x79c>
 80076cc:	4649      	mov	r1, r9
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	4632      	mov	r2, r6
 80076d2:	f7ff f9bd 	bl	8006a50 <__lshift>
 80076d6:	4681      	mov	r9, r0
 80076d8:	2800      	cmp	r0, #0
 80076da:	d0d8      	beq.n	800768e <_strtod_l+0x74e>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	dd08      	ble.n	80076f2 <_strtod_l+0x7b2>
 80076e0:	4641      	mov	r1, r8
 80076e2:	9805      	ldr	r0, [sp, #20]
 80076e4:	463a      	mov	r2, r7
 80076e6:	f7ff f9b3 	bl	8006a50 <__lshift>
 80076ea:	4680      	mov	r8, r0
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f43f ae46 	beq.w	800737e <_strtod_l+0x43e>
 80076f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076f4:	9805      	ldr	r0, [sp, #20]
 80076f6:	464a      	mov	r2, r9
 80076f8:	f7ff fa32 	bl	8006b60 <__mdiff>
 80076fc:	4604      	mov	r4, r0
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f ae3d 	beq.w	800737e <_strtod_l+0x43e>
 8007704:	68c3      	ldr	r3, [r0, #12]
 8007706:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007708:	2300      	movs	r3, #0
 800770a:	60c3      	str	r3, [r0, #12]
 800770c:	4641      	mov	r1, r8
 800770e:	f7ff fa0b 	bl	8006b28 <__mcmp>
 8007712:	2800      	cmp	r0, #0
 8007714:	da46      	bge.n	80077a4 <_strtod_l+0x864>
 8007716:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007718:	ea53 030a 	orrs.w	r3, r3, sl
 800771c:	d16c      	bne.n	80077f8 <_strtod_l+0x8b8>
 800771e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007722:	2b00      	cmp	r3, #0
 8007724:	d168      	bne.n	80077f8 <_strtod_l+0x8b8>
 8007726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800772a:	0d1b      	lsrs	r3, r3, #20
 800772c:	051b      	lsls	r3, r3, #20
 800772e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007732:	d961      	bls.n	80077f8 <_strtod_l+0x8b8>
 8007734:	6963      	ldr	r3, [r4, #20]
 8007736:	b913      	cbnz	r3, 800773e <_strtod_l+0x7fe>
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	2b01      	cmp	r3, #1
 800773c:	dd5c      	ble.n	80077f8 <_strtod_l+0x8b8>
 800773e:	4621      	mov	r1, r4
 8007740:	2201      	movs	r2, #1
 8007742:	9805      	ldr	r0, [sp, #20]
 8007744:	f7ff f984 	bl	8006a50 <__lshift>
 8007748:	4641      	mov	r1, r8
 800774a:	4604      	mov	r4, r0
 800774c:	f7ff f9ec 	bl	8006b28 <__mcmp>
 8007750:	2800      	cmp	r0, #0
 8007752:	dd51      	ble.n	80077f8 <_strtod_l+0x8b8>
 8007754:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007758:	9a08      	ldr	r2, [sp, #32]
 800775a:	0d1b      	lsrs	r3, r3, #20
 800775c:	051b      	lsls	r3, r3, #20
 800775e:	2a00      	cmp	r2, #0
 8007760:	d06b      	beq.n	800783a <_strtod_l+0x8fa>
 8007762:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007766:	d868      	bhi.n	800783a <_strtod_l+0x8fa>
 8007768:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800776c:	f67f ae9d 	bls.w	80074aa <_strtod_l+0x56a>
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <_strtod_l+0x85c>)
 8007772:	4650      	mov	r0, sl
 8007774:	4659      	mov	r1, fp
 8007776:	2200      	movs	r2, #0
 8007778:	f7f8 ff3e 	bl	80005f8 <__aeabi_dmul>
 800777c:	4b08      	ldr	r3, [pc, #32]	@ (80077a0 <_strtod_l+0x860>)
 800777e:	400b      	ands	r3, r1
 8007780:	4682      	mov	sl, r0
 8007782:	468b      	mov	fp, r1
 8007784:	2b00      	cmp	r3, #0
 8007786:	f47f ae05 	bne.w	8007394 <_strtod_l+0x454>
 800778a:	9a05      	ldr	r2, [sp, #20]
 800778c:	2322      	movs	r3, #34	@ 0x22
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e600      	b.n	8007394 <_strtod_l+0x454>
 8007792:	bf00      	nop
 8007794:	08009050 	.word	0x08009050
 8007798:	fffffc02 	.word	0xfffffc02
 800779c:	39500000 	.word	0x39500000
 80077a0:	7ff00000 	.word	0x7ff00000
 80077a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80077a8:	d165      	bne.n	8007876 <_strtod_l+0x936>
 80077aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077b0:	b35a      	cbz	r2, 800780a <_strtod_l+0x8ca>
 80077b2:	4a9f      	ldr	r2, [pc, #636]	@ (8007a30 <_strtod_l+0xaf0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d12b      	bne.n	8007810 <_strtod_l+0x8d0>
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	4651      	mov	r1, sl
 80077bc:	b303      	cbz	r3, 8007800 <_strtod_l+0x8c0>
 80077be:	4b9d      	ldr	r3, [pc, #628]	@ (8007a34 <_strtod_l+0xaf4>)
 80077c0:	465a      	mov	r2, fp
 80077c2:	4013      	ands	r3, r2
 80077c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80077c8:	f04f 32ff 	mov.w	r2, #4294967295
 80077cc:	d81b      	bhi.n	8007806 <_strtod_l+0x8c6>
 80077ce:	0d1b      	lsrs	r3, r3, #20
 80077d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	4299      	cmp	r1, r3
 80077da:	d119      	bne.n	8007810 <_strtod_l+0x8d0>
 80077dc:	4b96      	ldr	r3, [pc, #600]	@ (8007a38 <_strtod_l+0xaf8>)
 80077de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d102      	bne.n	80077ea <_strtod_l+0x8aa>
 80077e4:	3101      	adds	r1, #1
 80077e6:	f43f adca 	beq.w	800737e <_strtod_l+0x43e>
 80077ea:	4b92      	ldr	r3, [pc, #584]	@ (8007a34 <_strtod_l+0xaf4>)
 80077ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ee:	401a      	ands	r2, r3
 80077f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80077f4:	f04f 0a00 	mov.w	sl, #0
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1b8      	bne.n	8007770 <_strtod_l+0x830>
 80077fe:	e5c9      	b.n	8007394 <_strtod_l+0x454>
 8007800:	f04f 33ff 	mov.w	r3, #4294967295
 8007804:	e7e8      	b.n	80077d8 <_strtod_l+0x898>
 8007806:	4613      	mov	r3, r2
 8007808:	e7e6      	b.n	80077d8 <_strtod_l+0x898>
 800780a:	ea53 030a 	orrs.w	r3, r3, sl
 800780e:	d0a1      	beq.n	8007754 <_strtod_l+0x814>
 8007810:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007812:	b1db      	cbz	r3, 800784c <_strtod_l+0x90c>
 8007814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007816:	4213      	tst	r3, r2
 8007818:	d0ee      	beq.n	80077f8 <_strtod_l+0x8b8>
 800781a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781c:	9a08      	ldr	r2, [sp, #32]
 800781e:	4650      	mov	r0, sl
 8007820:	4659      	mov	r1, fp
 8007822:	b1bb      	cbz	r3, 8007854 <_strtod_l+0x914>
 8007824:	f7ff fb6e 	bl	8006f04 <sulp>
 8007828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800782c:	ec53 2b10 	vmov	r2, r3, d0
 8007830:	f7f8 fd2c 	bl	800028c <__adddf3>
 8007834:	4682      	mov	sl, r0
 8007836:	468b      	mov	fp, r1
 8007838:	e7de      	b.n	80077f8 <_strtod_l+0x8b8>
 800783a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800783e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007842:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007846:	f04f 3aff 	mov.w	sl, #4294967295
 800784a:	e7d5      	b.n	80077f8 <_strtod_l+0x8b8>
 800784c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800784e:	ea13 0f0a 	tst.w	r3, sl
 8007852:	e7e1      	b.n	8007818 <_strtod_l+0x8d8>
 8007854:	f7ff fb56 	bl	8006f04 <sulp>
 8007858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800785c:	ec53 2b10 	vmov	r2, r3, d0
 8007860:	f7f8 fd12 	bl	8000288 <__aeabi_dsub>
 8007864:	2200      	movs	r2, #0
 8007866:	2300      	movs	r3, #0
 8007868:	4682      	mov	sl, r0
 800786a:	468b      	mov	fp, r1
 800786c:	f7f9 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007870:	2800      	cmp	r0, #0
 8007872:	d0c1      	beq.n	80077f8 <_strtod_l+0x8b8>
 8007874:	e619      	b.n	80074aa <_strtod_l+0x56a>
 8007876:	4641      	mov	r1, r8
 8007878:	4620      	mov	r0, r4
 800787a:	f7ff facd 	bl	8006e18 <__ratio>
 800787e:	ec57 6b10 	vmov	r6, r7, d0
 8007882:	2200      	movs	r2, #0
 8007884:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f930 	bl	8000af0 <__aeabi_dcmple>
 8007890:	2800      	cmp	r0, #0
 8007892:	d06f      	beq.n	8007974 <_strtod_l+0xa34>
 8007894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d17a      	bne.n	8007990 <_strtod_l+0xa50>
 800789a:	f1ba 0f00 	cmp.w	sl, #0
 800789e:	d158      	bne.n	8007952 <_strtod_l+0xa12>
 80078a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d15a      	bne.n	8007960 <_strtod_l+0xa20>
 80078aa:	4b64      	ldr	r3, [pc, #400]	@ (8007a3c <_strtod_l+0xafc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f9 f913 	bl	8000adc <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d159      	bne.n	800796e <_strtod_l+0xa2e>
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	4b60      	ldr	r3, [pc, #384]	@ (8007a40 <_strtod_l+0xb00>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80078ce:	9606      	str	r6, [sp, #24]
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078d6:	4d57      	ldr	r5, [pc, #348]	@ (8007a34 <_strtod_l+0xaf4>)
 80078d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078de:	401d      	ands	r5, r3
 80078e0:	4b58      	ldr	r3, [pc, #352]	@ (8007a44 <_strtod_l+0xb04>)
 80078e2:	429d      	cmp	r5, r3
 80078e4:	f040 80b2 	bne.w	8007a4c <_strtod_l+0xb0c>
 80078e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80078ee:	ec4b ab10 	vmov	d0, sl, fp
 80078f2:	f7ff f9c9 	bl	8006c88 <__ulp>
 80078f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078fa:	ec51 0b10 	vmov	r0, r1, d0
 80078fe:	f7f8 fe7b 	bl	80005f8 <__aeabi_dmul>
 8007902:	4652      	mov	r2, sl
 8007904:	465b      	mov	r3, fp
 8007906:	f7f8 fcc1 	bl	800028c <__adddf3>
 800790a:	460b      	mov	r3, r1
 800790c:	4949      	ldr	r1, [pc, #292]	@ (8007a34 <_strtod_l+0xaf4>)
 800790e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a48 <_strtod_l+0xb08>)
 8007910:	4019      	ands	r1, r3
 8007912:	4291      	cmp	r1, r2
 8007914:	4682      	mov	sl, r0
 8007916:	d942      	bls.n	800799e <_strtod_l+0xa5e>
 8007918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800791a:	4b47      	ldr	r3, [pc, #284]	@ (8007a38 <_strtod_l+0xaf8>)
 800791c:	429a      	cmp	r2, r3
 800791e:	d103      	bne.n	8007928 <_strtod_l+0x9e8>
 8007920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007922:	3301      	adds	r3, #1
 8007924:	f43f ad2b 	beq.w	800737e <_strtod_l+0x43e>
 8007928:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007a38 <_strtod_l+0xaf8>
 800792c:	f04f 3aff 	mov.w	sl, #4294967295
 8007930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007932:	9805      	ldr	r0, [sp, #20]
 8007934:	f7fe fe74 	bl	8006620 <_Bfree>
 8007938:	9805      	ldr	r0, [sp, #20]
 800793a:	4649      	mov	r1, r9
 800793c:	f7fe fe70 	bl	8006620 <_Bfree>
 8007940:	9805      	ldr	r0, [sp, #20]
 8007942:	4641      	mov	r1, r8
 8007944:	f7fe fe6c 	bl	8006620 <_Bfree>
 8007948:	9805      	ldr	r0, [sp, #20]
 800794a:	4621      	mov	r1, r4
 800794c:	f7fe fe68 	bl	8006620 <_Bfree>
 8007950:	e618      	b.n	8007584 <_strtod_l+0x644>
 8007952:	f1ba 0f01 	cmp.w	sl, #1
 8007956:	d103      	bne.n	8007960 <_strtod_l+0xa20>
 8007958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	f43f ada5 	beq.w	80074aa <_strtod_l+0x56a>
 8007960:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007a10 <_strtod_l+0xad0>
 8007964:	4f35      	ldr	r7, [pc, #212]	@ (8007a3c <_strtod_l+0xafc>)
 8007966:	ed8d 7b06 	vstr	d7, [sp, #24]
 800796a:	2600      	movs	r6, #0
 800796c:	e7b1      	b.n	80078d2 <_strtod_l+0x992>
 800796e:	4f34      	ldr	r7, [pc, #208]	@ (8007a40 <_strtod_l+0xb00>)
 8007970:	2600      	movs	r6, #0
 8007972:	e7aa      	b.n	80078ca <_strtod_l+0x98a>
 8007974:	4b32      	ldr	r3, [pc, #200]	@ (8007a40 <_strtod_l+0xb00>)
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	2200      	movs	r2, #0
 800797c:	f7f8 fe3c 	bl	80005f8 <__aeabi_dmul>
 8007980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d09f      	beq.n	80078ca <_strtod_l+0x98a>
 800798a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800798e:	e7a0      	b.n	80078d2 <_strtod_l+0x992>
 8007990:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007a18 <_strtod_l+0xad8>
 8007994:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007998:	ec57 6b17 	vmov	r6, r7, d7
 800799c:	e799      	b.n	80078d2 <_strtod_l+0x992>
 800799e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1c1      	bne.n	8007930 <_strtod_l+0x9f0>
 80079ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	429d      	cmp	r5, r3
 80079b6:	d1bb      	bne.n	8007930 <_strtod_l+0x9f0>
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f9 f964 	bl	8000c88 <__aeabi_d2lz>
 80079c0:	f7f8 fdec 	bl	800059c <__aeabi_l2d>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fc5c 	bl	8000288 <__aeabi_dsub>
 80079d0:	460b      	mov	r3, r1
 80079d2:	4602      	mov	r2, r0
 80079d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80079d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	ea46 060a 	orr.w	r6, r6, sl
 80079e2:	431e      	orrs	r6, r3
 80079e4:	d06f      	beq.n	8007ac6 <_strtod_l+0xb86>
 80079e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a20 <_strtod_l+0xae0>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f9 f876 	bl	8000adc <__aeabi_dcmplt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f47f accf 	bne.w	8007394 <_strtod_l+0x454>
 80079f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a28 <_strtod_l+0xae8>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a00:	f7f9 f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d093      	beq.n	8007930 <_strtod_l+0x9f0>
 8007a08:	e4c4      	b.n	8007394 <_strtod_l+0x454>
 8007a0a:	bf00      	nop
 8007a0c:	f3af 8000 	nop.w
 8007a10:	00000000 	.word	0x00000000
 8007a14:	bff00000 	.word	0xbff00000
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	3ff00000 	.word	0x3ff00000
 8007a20:	94a03595 	.word	0x94a03595
 8007a24:	3fdfffff 	.word	0x3fdfffff
 8007a28:	35afe535 	.word	0x35afe535
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	000fffff 	.word	0x000fffff
 8007a34:	7ff00000 	.word	0x7ff00000
 8007a38:	7fefffff 	.word	0x7fefffff
 8007a3c:	3ff00000 	.word	0x3ff00000
 8007a40:	3fe00000 	.word	0x3fe00000
 8007a44:	7fe00000 	.word	0x7fe00000
 8007a48:	7c9fffff 	.word	0x7c9fffff
 8007a4c:	9b08      	ldr	r3, [sp, #32]
 8007a4e:	b323      	cbz	r3, 8007a9a <_strtod_l+0xb5a>
 8007a50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007a54:	d821      	bhi.n	8007a9a <_strtod_l+0xb5a>
 8007a56:	a328      	add	r3, pc, #160	@ (adr r3, 8007af8 <_strtod_l+0xbb8>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	4639      	mov	r1, r7
 8007a60:	f7f9 f846 	bl	8000af0 <__aeabi_dcmple>
 8007a64:	b1a0      	cbz	r0, 8007a90 <_strtod_l+0xb50>
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7f9 f89d 	bl	8000ba8 <__aeabi_d2uiz>
 8007a6e:	2801      	cmp	r0, #1
 8007a70:	bf38      	it	cc
 8007a72:	2001      	movcc	r0, #1
 8007a74:	f7f8 fd46 	bl	8000504 <__aeabi_ui2d>
 8007a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	b9fb      	cbnz	r3, 8007ac0 <_strtod_l+0xb80>
 8007a80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a84:	9014      	str	r0, [sp, #80]	@ 0x50
 8007a86:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007a8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007a96:	1b5b      	subs	r3, r3, r5
 8007a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007aa2:	f7ff f8f1 	bl	8006c88 <__ulp>
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	ec53 2b10 	vmov	r2, r3, d0
 8007aac:	4659      	mov	r1, fp
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ab6:	f7f8 fbe9 	bl	800028c <__adddf3>
 8007aba:	4682      	mov	sl, r0
 8007abc:	468b      	mov	fp, r1
 8007abe:	e770      	b.n	80079a2 <_strtod_l+0xa62>
 8007ac0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ac4:	e7e0      	b.n	8007a88 <_strtod_l+0xb48>
 8007ac6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b00 <_strtod_l+0xbc0>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f7f9 f806 	bl	8000adc <__aeabi_dcmplt>
 8007ad0:	e798      	b.n	8007a04 <_strtod_l+0xac4>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ad6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	f7ff ba6d 	b.w	8006fba <_strtod_l+0x7a>
 8007ae0:	2a65      	cmp	r2, #101	@ 0x65
 8007ae2:	f43f ab66 	beq.w	80071b2 <_strtod_l+0x272>
 8007ae6:	2a45      	cmp	r2, #69	@ 0x45
 8007ae8:	f43f ab63 	beq.w	80071b2 <_strtod_l+0x272>
 8007aec:	2301      	movs	r3, #1
 8007aee:	f7ff bb9e 	b.w	800722e <_strtod_l+0x2ee>
 8007af2:	bf00      	nop
 8007af4:	f3af 8000 	nop.w
 8007af8:	ffc00000 	.word	0xffc00000
 8007afc:	41dfffff 	.word	0x41dfffff
 8007b00:	94a03595 	.word	0x94a03595
 8007b04:	3fcfffff 	.word	0x3fcfffff

08007b08 <_strtod_r>:
 8007b08:	4b01      	ldr	r3, [pc, #4]	@ (8007b10 <_strtod_r+0x8>)
 8007b0a:	f7ff ba19 	b.w	8006f40 <_strtod_l>
 8007b0e:	bf00      	nop
 8007b10:	20000068 	.word	0x20000068

08007b14 <_strtol_l.constprop.0>:
 8007b14:	2b24      	cmp	r3, #36	@ 0x24
 8007b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1a:	4686      	mov	lr, r0
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	d801      	bhi.n	8007b24 <_strtol_l.constprop.0+0x10>
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d106      	bne.n	8007b32 <_strtol_l.constprop.0+0x1e>
 8007b24:	f7fd fdbc 	bl	80056a0 <__errno>
 8007b28:	2316      	movs	r3, #22
 8007b2a:	6003      	str	r3, [r0, #0]
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	4834      	ldr	r0, [pc, #208]	@ (8007c04 <_strtol_l.constprop.0+0xf0>)
 8007b34:	460d      	mov	r5, r1
 8007b36:	462a      	mov	r2, r5
 8007b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b3c:	5d06      	ldrb	r6, [r0, r4]
 8007b3e:	f016 0608 	ands.w	r6, r6, #8
 8007b42:	d1f8      	bne.n	8007b36 <_strtol_l.constprop.0+0x22>
 8007b44:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b46:	d12d      	bne.n	8007ba4 <_strtol_l.constprop.0+0x90>
 8007b48:	782c      	ldrb	r4, [r5, #0]
 8007b4a:	2601      	movs	r6, #1
 8007b4c:	1c95      	adds	r5, r2, #2
 8007b4e:	f033 0210 	bics.w	r2, r3, #16
 8007b52:	d109      	bne.n	8007b68 <_strtol_l.constprop.0+0x54>
 8007b54:	2c30      	cmp	r4, #48	@ 0x30
 8007b56:	d12a      	bne.n	8007bae <_strtol_l.constprop.0+0x9a>
 8007b58:	782a      	ldrb	r2, [r5, #0]
 8007b5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b5e:	2a58      	cmp	r2, #88	@ 0x58
 8007b60:	d125      	bne.n	8007bae <_strtol_l.constprop.0+0x9a>
 8007b62:	786c      	ldrb	r4, [r5, #1]
 8007b64:	2310      	movs	r3, #16
 8007b66:	3502      	adds	r5, #2
 8007b68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b70:	2200      	movs	r2, #0
 8007b72:	fbbc f9f3 	udiv	r9, ip, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b80:	2f09      	cmp	r7, #9
 8007b82:	d81b      	bhi.n	8007bbc <_strtol_l.constprop.0+0xa8>
 8007b84:	463c      	mov	r4, r7
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	dd27      	ble.n	8007bda <_strtol_l.constprop.0+0xc6>
 8007b8a:	1c57      	adds	r7, r2, #1
 8007b8c:	d007      	beq.n	8007b9e <_strtol_l.constprop.0+0x8a>
 8007b8e:	4581      	cmp	r9, r0
 8007b90:	d320      	bcc.n	8007bd4 <_strtol_l.constprop.0+0xc0>
 8007b92:	d101      	bne.n	8007b98 <_strtol_l.constprop.0+0x84>
 8007b94:	45a2      	cmp	sl, r4
 8007b96:	db1d      	blt.n	8007bd4 <_strtol_l.constprop.0+0xc0>
 8007b98:	fb00 4003 	mla	r0, r0, r3, r4
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ba2:	e7eb      	b.n	8007b7c <_strtol_l.constprop.0+0x68>
 8007ba4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ba6:	bf04      	itt	eq
 8007ba8:	782c      	ldrbeq	r4, [r5, #0]
 8007baa:	1c95      	addeq	r5, r2, #2
 8007bac:	e7cf      	b.n	8007b4e <_strtol_l.constprop.0+0x3a>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1da      	bne.n	8007b68 <_strtol_l.constprop.0+0x54>
 8007bb2:	2c30      	cmp	r4, #48	@ 0x30
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2308      	moveq	r3, #8
 8007bb8:	230a      	movne	r3, #10
 8007bba:	e7d5      	b.n	8007b68 <_strtol_l.constprop.0+0x54>
 8007bbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007bc0:	2f19      	cmp	r7, #25
 8007bc2:	d801      	bhi.n	8007bc8 <_strtol_l.constprop.0+0xb4>
 8007bc4:	3c37      	subs	r4, #55	@ 0x37
 8007bc6:	e7de      	b.n	8007b86 <_strtol_l.constprop.0+0x72>
 8007bc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bcc:	2f19      	cmp	r7, #25
 8007bce:	d804      	bhi.n	8007bda <_strtol_l.constprop.0+0xc6>
 8007bd0:	3c57      	subs	r4, #87	@ 0x57
 8007bd2:	e7d8      	b.n	8007b86 <_strtol_l.constprop.0+0x72>
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	e7e1      	b.n	8007b9e <_strtol_l.constprop.0+0x8a>
 8007bda:	1c53      	adds	r3, r2, #1
 8007bdc:	d108      	bne.n	8007bf0 <_strtol_l.constprop.0+0xdc>
 8007bde:	2322      	movs	r3, #34	@ 0x22
 8007be0:	f8ce 3000 	str.w	r3, [lr]
 8007be4:	4660      	mov	r0, ip
 8007be6:	f1b8 0f00 	cmp.w	r8, #0
 8007bea:	d0a0      	beq.n	8007b2e <_strtol_l.constprop.0+0x1a>
 8007bec:	1e69      	subs	r1, r5, #1
 8007bee:	e006      	b.n	8007bfe <_strtol_l.constprop.0+0xea>
 8007bf0:	b106      	cbz	r6, 8007bf4 <_strtol_l.constprop.0+0xe0>
 8007bf2:	4240      	negs	r0, r0
 8007bf4:	f1b8 0f00 	cmp.w	r8, #0
 8007bf8:	d099      	beq.n	8007b2e <_strtol_l.constprop.0+0x1a>
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d1f6      	bne.n	8007bec <_strtol_l.constprop.0+0xd8>
 8007bfe:	f8c8 1000 	str.w	r1, [r8]
 8007c02:	e794      	b.n	8007b2e <_strtol_l.constprop.0+0x1a>
 8007c04:	08009079 	.word	0x08009079

08007c08 <_strtol_r>:
 8007c08:	f7ff bf84 	b.w	8007b14 <_strtol_l.constprop.0>

08007c0c <__ssputs_r>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	688e      	ldr	r6, [r1, #8]
 8007c12:	461f      	mov	r7, r3
 8007c14:	42be      	cmp	r6, r7
 8007c16:	680b      	ldr	r3, [r1, #0]
 8007c18:	4682      	mov	sl, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4690      	mov	r8, r2
 8007c1e:	d82d      	bhi.n	8007c7c <__ssputs_r+0x70>
 8007c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c28:	d026      	beq.n	8007c78 <__ssputs_r+0x6c>
 8007c2a:	6965      	ldr	r5, [r4, #20]
 8007c2c:	6909      	ldr	r1, [r1, #16]
 8007c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c32:	eba3 0901 	sub.w	r9, r3, r1
 8007c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c3a:	1c7b      	adds	r3, r7, #1
 8007c3c:	444b      	add	r3, r9
 8007c3e:	106d      	asrs	r5, r5, #1
 8007c40:	429d      	cmp	r5, r3
 8007c42:	bf38      	it	cc
 8007c44:	461d      	movcc	r5, r3
 8007c46:	0553      	lsls	r3, r2, #21
 8007c48:	d527      	bpl.n	8007c9a <__ssputs_r+0x8e>
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7fe fc1c 	bl	8006488 <_malloc_r>
 8007c50:	4606      	mov	r6, r0
 8007c52:	b360      	cbz	r0, 8007cae <__ssputs_r+0xa2>
 8007c54:	6921      	ldr	r1, [r4, #16]
 8007c56:	464a      	mov	r2, r9
 8007c58:	f000 fa18 	bl	800808c <memcpy>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	6126      	str	r6, [r4, #16]
 8007c6a:	6165      	str	r5, [r4, #20]
 8007c6c:	444e      	add	r6, r9
 8007c6e:	eba5 0509 	sub.w	r5, r5, r9
 8007c72:	6026      	str	r6, [r4, #0]
 8007c74:	60a5      	str	r5, [r4, #8]
 8007c76:	463e      	mov	r6, r7
 8007c78:	42be      	cmp	r6, r7
 8007c7a:	d900      	bls.n	8007c7e <__ssputs_r+0x72>
 8007c7c:	463e      	mov	r6, r7
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	4632      	mov	r2, r6
 8007c82:	4641      	mov	r1, r8
 8007c84:	f000 f9c6 	bl	8008014 <memmove>
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	1b9b      	subs	r3, r3, r6
 8007c8c:	60a3      	str	r3, [r4, #8]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	4433      	add	r3, r6
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	f000 fd89 	bl	80087b2 <_realloc_r>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1e0      	bne.n	8007c68 <__ssputs_r+0x5c>
 8007ca6:	6921      	ldr	r1, [r4, #16]
 8007ca8:	4650      	mov	r0, sl
 8007caa:	f7fe fb79 	bl	80063a0 <_free_r>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	f8ca 3000 	str.w	r3, [sl]
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e7e9      	b.n	8007c96 <__ssputs_r+0x8a>
	...

08007cc4 <_svfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	4698      	mov	r8, r3
 8007cca:	898b      	ldrh	r3, [r1, #12]
 8007ccc:	061b      	lsls	r3, r3, #24
 8007cce:	b09d      	sub	sp, #116	@ 0x74
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	d510      	bpl.n	8007cfa <_svfiprintf_r+0x36>
 8007cd8:	690b      	ldr	r3, [r1, #16]
 8007cda:	b973      	cbnz	r3, 8007cfa <_svfiprintf_r+0x36>
 8007cdc:	2140      	movs	r1, #64	@ 0x40
 8007cde:	f7fe fbd3 	bl	8006488 <_malloc_r>
 8007ce2:	6028      	str	r0, [r5, #0]
 8007ce4:	6128      	str	r0, [r5, #16]
 8007ce6:	b930      	cbnz	r0, 8007cf6 <_svfiprintf_r+0x32>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b01d      	add	sp, #116	@ 0x74
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	2340      	movs	r3, #64	@ 0x40
 8007cf8:	616b      	str	r3, [r5, #20]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d08:	2330      	movs	r3, #48	@ 0x30
 8007d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ea8 <_svfiprintf_r+0x1e4>
 8007d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d12:	f04f 0901 	mov.w	r9, #1
 8007d16:	4623      	mov	r3, r4
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	b10a      	cbz	r2, 8007d24 <_svfiprintf_r+0x60>
 8007d20:	2a25      	cmp	r2, #37	@ 0x25
 8007d22:	d1f9      	bne.n	8007d18 <_svfiprintf_r+0x54>
 8007d24:	ebba 0b04 	subs.w	fp, sl, r4
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x7e>
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ff6b 	bl	8007c0c <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80a7 	beq.w	8007e8a <_svfiprintf_r+0x1c6>
 8007d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3e:	445a      	add	r2, fp
 8007d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 809f 	beq.w	8007e8a <_svfiprintf_r+0x1c6>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d56:	f10a 0a01 	add.w	sl, sl, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d64:	4654      	mov	r4, sl
 8007d66:	2205      	movs	r2, #5
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	484e      	ldr	r0, [pc, #312]	@ (8007ea8 <_svfiprintf_r+0x1e4>)
 8007d6e:	f7f8 fa2f 	bl	80001d0 <memchr>
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	b9d8      	cbnz	r0, 8007dae <_svfiprintf_r+0xea>
 8007d76:	06d0      	lsls	r0, r2, #27
 8007d78:	bf44      	itt	mi
 8007d7a:	2320      	movmi	r3, #32
 8007d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d80:	0711      	lsls	r1, r2, #28
 8007d82:	bf44      	itt	mi
 8007d84:	232b      	movmi	r3, #43	@ 0x2b
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xfa>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4654      	mov	r4, sl
 8007d96:	2000      	movs	r0, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da2:	3b30      	subs	r3, #48	@ 0x30
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d94b      	bls.n	8007e40 <_svfiprintf_r+0x17c>
 8007da8:	b1b0      	cbz	r0, 8007dd8 <_svfiprintf_r+0x114>
 8007daa:	9207      	str	r2, [sp, #28]
 8007dac:	e014      	b.n	8007dd8 <_svfiprintf_r+0x114>
 8007dae:	eba0 0308 	sub.w	r3, r0, r8
 8007db2:	fa09 f303 	lsl.w	r3, r9, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	46a2      	mov	sl, r4
 8007dbc:	e7d2      	b.n	8007d64 <_svfiprintf_r+0xa0>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfbb      	ittet	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd0:	9307      	strge	r3, [sp, #28]
 8007dd2:	9307      	strlt	r3, [sp, #28]
 8007dd4:	bfb8      	it	lt
 8007dd6:	9204      	strlt	r2, [sp, #16]
 8007dd8:	7823      	ldrb	r3, [r4, #0]
 8007dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ddc:	d10a      	bne.n	8007df4 <_svfiprintf_r+0x130>
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de2:	d132      	bne.n	8007e4a <_svfiprintf_r+0x186>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007df0:	3402      	adds	r4, #2
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007eb8 <_svfiprintf_r+0x1f4>
 8007df8:	7821      	ldrb	r1, [r4, #0]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	f7f8 f9e7 	bl	80001d0 <memchr>
 8007e02:	b138      	cbz	r0, 8007e14 <_svfiprintf_r+0x150>
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	eba0 000a 	sub.w	r0, r0, sl
 8007e0a:	2240      	movs	r2, #64	@ 0x40
 8007e0c:	4082      	lsls	r2, r0
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	3401      	adds	r4, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	4824      	ldr	r0, [pc, #144]	@ (8007eac <_svfiprintf_r+0x1e8>)
 8007e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e1e:	2206      	movs	r2, #6
 8007e20:	f7f8 f9d6 	bl	80001d0 <memchr>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d036      	beq.n	8007e96 <_svfiprintf_r+0x1d2>
 8007e28:	4b21      	ldr	r3, [pc, #132]	@ (8007eb0 <_svfiprintf_r+0x1ec>)
 8007e2a:	bb1b      	cbnz	r3, 8007e74 <_svfiprintf_r+0x1b0>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	3307      	adds	r3, #7
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	3308      	adds	r3, #8
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3a:	4433      	add	r3, r6
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	e76a      	b.n	8007d16 <_svfiprintf_r+0x52>
 8007e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e44:	460c      	mov	r4, r1
 8007e46:	2001      	movs	r0, #1
 8007e48:	e7a8      	b.n	8007d9c <_svfiprintf_r+0xd8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	4620      	mov	r0, r4
 8007e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5c:	3a30      	subs	r2, #48	@ 0x30
 8007e5e:	2a09      	cmp	r2, #9
 8007e60:	d903      	bls.n	8007e6a <_svfiprintf_r+0x1a6>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0c6      	beq.n	8007df4 <_svfiprintf_r+0x130>
 8007e66:	9105      	str	r1, [sp, #20]
 8007e68:	e7c4      	b.n	8007df4 <_svfiprintf_r+0x130>
 8007e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e6e:	4604      	mov	r4, r0
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7f0      	b.n	8007e56 <_svfiprintf_r+0x192>
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <_svfiprintf_r+0x1f0>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f7fc fcca 	bl	8004818 <_printf_float>
 8007e84:	1c42      	adds	r2, r0, #1
 8007e86:	4606      	mov	r6, r0
 8007e88:	d1d6      	bne.n	8007e38 <_svfiprintf_r+0x174>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	065b      	lsls	r3, r3, #25
 8007e8e:	f53f af2d 	bmi.w	8007cec <_svfiprintf_r+0x28>
 8007e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e94:	e72c      	b.n	8007cf0 <_svfiprintf_r+0x2c>
 8007e96:	ab03      	add	r3, sp, #12
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <_svfiprintf_r+0x1f0>)
 8007e9e:	a904      	add	r1, sp, #16
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7fc ff51 	bl	8004d48 <_printf_i>
 8007ea6:	e7ed      	b.n	8007e84 <_svfiprintf_r+0x1c0>
 8007ea8:	08009179 	.word	0x08009179
 8007eac:	08009183 	.word	0x08009183
 8007eb0:	08004819 	.word	0x08004819
 8007eb4:	08007c0d 	.word	0x08007c0d
 8007eb8:	0800917f 	.word	0x0800917f

08007ebc <__sflush_r>:
 8007ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec4:	0716      	lsls	r6, r2, #28
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	d454      	bmi.n	8007f76 <__sflush_r+0xba>
 8007ecc:	684b      	ldr	r3, [r1, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc02      	bgt.n	8007ed8 <__sflush_r+0x1c>
 8007ed2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd48      	ble.n	8007f6a <__sflush_r+0xae>
 8007ed8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d045      	beq.n	8007f6a <__sflush_r+0xae>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ee4:	682f      	ldr	r7, [r5, #0]
 8007ee6:	6a21      	ldr	r1, [r4, #32]
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	d030      	beq.n	8007f4e <__sflush_r+0x92>
 8007eec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	0759      	lsls	r1, r3, #29
 8007ef2:	d505      	bpl.n	8007f00 <__sflush_r+0x44>
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007efa:	b10b      	cbz	r3, 8007f00 <__sflush_r+0x44>
 8007efc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b0      	blx	r6
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	d106      	bne.n	8007f1e <__sflush_r+0x62>
 8007f10:	6829      	ldr	r1, [r5, #0]
 8007f12:	291d      	cmp	r1, #29
 8007f14:	d82b      	bhi.n	8007f6e <__sflush_r+0xb2>
 8007f16:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc0 <__sflush_r+0x104>)
 8007f18:	410a      	asrs	r2, r1
 8007f1a:	07d6      	lsls	r6, r2, #31
 8007f1c:	d427      	bmi.n	8007f6e <__sflush_r+0xb2>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	6062      	str	r2, [r4, #4]
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	d504      	bpl.n	8007f34 <__sflush_r+0x78>
 8007f2a:	1c42      	adds	r2, r0, #1
 8007f2c:	d101      	bne.n	8007f32 <__sflush_r+0x76>
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	b903      	cbnz	r3, 8007f34 <__sflush_r+0x78>
 8007f32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f36:	602f      	str	r7, [r5, #0]
 8007f38:	b1b9      	cbz	r1, 8007f6a <__sflush_r+0xae>
 8007f3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	d002      	beq.n	8007f48 <__sflush_r+0x8c>
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7fe fa2c 	bl	80063a0 <_free_r>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f4c:	e00d      	b.n	8007f6a <__sflush_r+0xae>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4628      	mov	r0, r5
 8007f52:	47b0      	blx	r6
 8007f54:	4602      	mov	r2, r0
 8007f56:	1c50      	adds	r0, r2, #1
 8007f58:	d1c9      	bne.n	8007eee <__sflush_r+0x32>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0c6      	beq.n	8007eee <__sflush_r+0x32>
 8007f60:	2b1d      	cmp	r3, #29
 8007f62:	d001      	beq.n	8007f68 <__sflush_r+0xac>
 8007f64:	2b16      	cmp	r3, #22
 8007f66:	d11e      	bne.n	8007fa6 <__sflush_r+0xea>
 8007f68:	602f      	str	r7, [r5, #0]
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e022      	b.n	8007fb4 <__sflush_r+0xf8>
 8007f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f72:	b21b      	sxth	r3, r3
 8007f74:	e01b      	b.n	8007fae <__sflush_r+0xf2>
 8007f76:	690f      	ldr	r7, [r1, #16]
 8007f78:	2f00      	cmp	r7, #0
 8007f7a:	d0f6      	beq.n	8007f6a <__sflush_r+0xae>
 8007f7c:	0793      	lsls	r3, r2, #30
 8007f7e:	680e      	ldr	r6, [r1, #0]
 8007f80:	bf08      	it	eq
 8007f82:	694b      	ldreq	r3, [r1, #20]
 8007f84:	600f      	str	r7, [r1, #0]
 8007f86:	bf18      	it	ne
 8007f88:	2300      	movne	r3, #0
 8007f8a:	eba6 0807 	sub.w	r8, r6, r7
 8007f8e:	608b      	str	r3, [r1, #8]
 8007f90:	f1b8 0f00 	cmp.w	r8, #0
 8007f94:	dde9      	ble.n	8007f6a <__sflush_r+0xae>
 8007f96:	6a21      	ldr	r1, [r4, #32]
 8007f98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f9a:	4643      	mov	r3, r8
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b0      	blx	r6
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	dc08      	bgt.n	8007fb8 <__sflush_r+0xfc>
 8007fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	4407      	add	r7, r0
 8007fba:	eba8 0800 	sub.w	r8, r8, r0
 8007fbe:	e7e7      	b.n	8007f90 <__sflush_r+0xd4>
 8007fc0:	dfbffffe 	.word	0xdfbffffe

08007fc4 <_fflush_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	b913      	cbnz	r3, 8007fd4 <_fflush_r+0x10>
 8007fce:	2500      	movs	r5, #0
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	b118      	cbz	r0, 8007fde <_fflush_r+0x1a>
 8007fd6:	6a03      	ldr	r3, [r0, #32]
 8007fd8:	b90b      	cbnz	r3, 8007fde <_fflush_r+0x1a>
 8007fda:	f7fd fa75 	bl	80054c8 <__sinit>
 8007fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f3      	beq.n	8007fce <_fflush_r+0xa>
 8007fe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fe8:	07d0      	lsls	r0, r2, #31
 8007fea:	d404      	bmi.n	8007ff6 <_fflush_r+0x32>
 8007fec:	0599      	lsls	r1, r3, #22
 8007fee:	d402      	bmi.n	8007ff6 <_fflush_r+0x32>
 8007ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ff2:	f7fd fb80 	bl	80056f6 <__retarget_lock_acquire_recursive>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	f7ff ff5f 	bl	8007ebc <__sflush_r>
 8007ffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008000:	07da      	lsls	r2, r3, #31
 8008002:	4605      	mov	r5, r0
 8008004:	d4e4      	bmi.n	8007fd0 <_fflush_r+0xc>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	059b      	lsls	r3, r3, #22
 800800a:	d4e1      	bmi.n	8007fd0 <_fflush_r+0xc>
 800800c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800800e:	f7fd fb73 	bl	80056f8 <__retarget_lock_release_recursive>
 8008012:	e7dd      	b.n	8007fd0 <_fflush_r+0xc>

08008014 <memmove>:
 8008014:	4288      	cmp	r0, r1
 8008016:	b510      	push	{r4, lr}
 8008018:	eb01 0402 	add.w	r4, r1, r2
 800801c:	d902      	bls.n	8008024 <memmove+0x10>
 800801e:	4284      	cmp	r4, r0
 8008020:	4623      	mov	r3, r4
 8008022:	d807      	bhi.n	8008034 <memmove+0x20>
 8008024:	1e43      	subs	r3, r0, #1
 8008026:	42a1      	cmp	r1, r4
 8008028:	d008      	beq.n	800803c <memmove+0x28>
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008032:	e7f8      	b.n	8008026 <memmove+0x12>
 8008034:	4402      	add	r2, r0
 8008036:	4601      	mov	r1, r0
 8008038:	428a      	cmp	r2, r1
 800803a:	d100      	bne.n	800803e <memmove+0x2a>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008046:	e7f7      	b.n	8008038 <memmove+0x24>

08008048 <strncmp>:
 8008048:	b510      	push	{r4, lr}
 800804a:	b16a      	cbz	r2, 8008068 <strncmp+0x20>
 800804c:	3901      	subs	r1, #1
 800804e:	1884      	adds	r4, r0, r2
 8008050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008054:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008058:	429a      	cmp	r2, r3
 800805a:	d103      	bne.n	8008064 <strncmp+0x1c>
 800805c:	42a0      	cmp	r0, r4
 800805e:	d001      	beq.n	8008064 <strncmp+0x1c>
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1f5      	bne.n	8008050 <strncmp+0x8>
 8008064:	1ad0      	subs	r0, r2, r3
 8008066:	bd10      	pop	{r4, pc}
 8008068:	4610      	mov	r0, r2
 800806a:	e7fc      	b.n	8008066 <strncmp+0x1e>

0800806c <_sbrk_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d06      	ldr	r5, [pc, #24]	@ (8008088 <_sbrk_r+0x1c>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f9 f9c6 	bl	8001408 <_sbrk>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_sbrk_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_sbrk_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	20000434 	.word	0x20000434

0800808c <memcpy>:
 800808c:	440a      	add	r2, r1
 800808e:	4291      	cmp	r1, r2
 8008090:	f100 33ff 	add.w	r3, r0, #4294967295
 8008094:	d100      	bne.n	8008098 <memcpy+0xc>
 8008096:	4770      	bx	lr
 8008098:	b510      	push	{r4, lr}
 800809a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a2:	4291      	cmp	r1, r2
 80080a4:	d1f9      	bne.n	800809a <memcpy+0xe>
 80080a6:	bd10      	pop	{r4, pc}

080080a8 <nan>:
 80080a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80080b0 <nan+0x8>
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	00000000 	.word	0x00000000
 80080b4:	7ff80000 	.word	0x7ff80000

080080b8 <__assert_func>:
 80080b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ba:	4614      	mov	r4, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <__assert_func+0x2c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	68d8      	ldr	r0, [r3, #12]
 80080c6:	b954      	cbnz	r4, 80080de <__assert_func+0x26>
 80080c8:	4b07      	ldr	r3, [pc, #28]	@ (80080e8 <__assert_func+0x30>)
 80080ca:	461c      	mov	r4, r3
 80080cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080d0:	9100      	str	r1, [sp, #0]
 80080d2:	462b      	mov	r3, r5
 80080d4:	4905      	ldr	r1, [pc, #20]	@ (80080ec <__assert_func+0x34>)
 80080d6:	f000 fba7 	bl	8008828 <fiprintf>
 80080da:	f000 fbb7 	bl	800884c <abort>
 80080de:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <__assert_func+0x38>)
 80080e0:	e7f4      	b.n	80080cc <__assert_func+0x14>
 80080e2:	bf00      	nop
 80080e4:	20000018 	.word	0x20000018
 80080e8:	080091cd 	.word	0x080091cd
 80080ec:	0800919f 	.word	0x0800919f
 80080f0:	08009192 	.word	0x08009192

080080f4 <_calloc_r>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	fba1 5402 	umull	r5, r4, r1, r2
 80080fa:	b93c      	cbnz	r4, 800810c <_calloc_r+0x18>
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7fe f9c3 	bl	8006488 <_malloc_r>
 8008102:	4606      	mov	r6, r0
 8008104:	b928      	cbnz	r0, 8008112 <_calloc_r+0x1e>
 8008106:	2600      	movs	r6, #0
 8008108:	4630      	mov	r0, r6
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	220c      	movs	r2, #12
 800810e:	6002      	str	r2, [r0, #0]
 8008110:	e7f9      	b.n	8008106 <_calloc_r+0x12>
 8008112:	462a      	mov	r2, r5
 8008114:	4621      	mov	r1, r4
 8008116:	f7fd fa70 	bl	80055fa <memset>
 800811a:	e7f5      	b.n	8008108 <_calloc_r+0x14>

0800811c <rshift>:
 800811c:	6903      	ldr	r3, [r0, #16]
 800811e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008126:	ea4f 1261 	mov.w	r2, r1, asr #5
 800812a:	f100 0414 	add.w	r4, r0, #20
 800812e:	dd45      	ble.n	80081bc <rshift+0xa0>
 8008130:	f011 011f 	ands.w	r1, r1, #31
 8008134:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008138:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800813c:	d10c      	bne.n	8008158 <rshift+0x3c>
 800813e:	f100 0710 	add.w	r7, r0, #16
 8008142:	4629      	mov	r1, r5
 8008144:	42b1      	cmp	r1, r6
 8008146:	d334      	bcc.n	80081b2 <rshift+0x96>
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	1eea      	subs	r2, r5, #3
 800814e:	4296      	cmp	r6, r2
 8008150:	bf38      	it	cc
 8008152:	2300      	movcc	r3, #0
 8008154:	4423      	add	r3, r4
 8008156:	e015      	b.n	8008184 <rshift+0x68>
 8008158:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800815c:	f1c1 0820 	rsb	r8, r1, #32
 8008160:	40cf      	lsrs	r7, r1
 8008162:	f105 0e04 	add.w	lr, r5, #4
 8008166:	46a1      	mov	r9, r4
 8008168:	4576      	cmp	r6, lr
 800816a:	46f4      	mov	ip, lr
 800816c:	d815      	bhi.n	800819a <rshift+0x7e>
 800816e:	1a9a      	subs	r2, r3, r2
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	3a04      	subs	r2, #4
 8008174:	3501      	adds	r5, #1
 8008176:	42ae      	cmp	r6, r5
 8008178:	bf38      	it	cc
 800817a:	2200      	movcc	r2, #0
 800817c:	18a3      	adds	r3, r4, r2
 800817e:	50a7      	str	r7, [r4, r2]
 8008180:	b107      	cbz	r7, 8008184 <rshift+0x68>
 8008182:	3304      	adds	r3, #4
 8008184:	1b1a      	subs	r2, r3, r4
 8008186:	42a3      	cmp	r3, r4
 8008188:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800818c:	bf08      	it	eq
 800818e:	2300      	moveq	r3, #0
 8008190:	6102      	str	r2, [r0, #16]
 8008192:	bf08      	it	eq
 8008194:	6143      	streq	r3, [r0, #20]
 8008196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819a:	f8dc c000 	ldr.w	ip, [ip]
 800819e:	fa0c fc08 	lsl.w	ip, ip, r8
 80081a2:	ea4c 0707 	orr.w	r7, ip, r7
 80081a6:	f849 7b04 	str.w	r7, [r9], #4
 80081aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081ae:	40cf      	lsrs	r7, r1
 80081b0:	e7da      	b.n	8008168 <rshift+0x4c>
 80081b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80081b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80081ba:	e7c3      	b.n	8008144 <rshift+0x28>
 80081bc:	4623      	mov	r3, r4
 80081be:	e7e1      	b.n	8008184 <rshift+0x68>

080081c0 <__hexdig_fun>:
 80081c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d802      	bhi.n	80081ce <__hexdig_fun+0xe>
 80081c8:	3820      	subs	r0, #32
 80081ca:	b2c0      	uxtb	r0, r0
 80081cc:	4770      	bx	lr
 80081ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d801      	bhi.n	80081da <__hexdig_fun+0x1a>
 80081d6:	3847      	subs	r0, #71	@ 0x47
 80081d8:	e7f7      	b.n	80081ca <__hexdig_fun+0xa>
 80081da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d801      	bhi.n	80081e6 <__hexdig_fun+0x26>
 80081e2:	3827      	subs	r0, #39	@ 0x27
 80081e4:	e7f1      	b.n	80081ca <__hexdig_fun+0xa>
 80081e6:	2000      	movs	r0, #0
 80081e8:	4770      	bx	lr
	...

080081ec <__gethex>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	b085      	sub	sp, #20
 80081f2:	468a      	mov	sl, r1
 80081f4:	9302      	str	r3, [sp, #8]
 80081f6:	680b      	ldr	r3, [r1, #0]
 80081f8:	9001      	str	r0, [sp, #4]
 80081fa:	4690      	mov	r8, r2
 80081fc:	1c9c      	adds	r4, r3, #2
 80081fe:	46a1      	mov	r9, r4
 8008200:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008204:	2830      	cmp	r0, #48	@ 0x30
 8008206:	d0fa      	beq.n	80081fe <__gethex+0x12>
 8008208:	eba9 0303 	sub.w	r3, r9, r3
 800820c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008210:	f7ff ffd6 	bl	80081c0 <__hexdig_fun>
 8008214:	4605      	mov	r5, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	d168      	bne.n	80082ec <__gethex+0x100>
 800821a:	49a0      	ldr	r1, [pc, #640]	@ (800849c <__gethex+0x2b0>)
 800821c:	2201      	movs	r2, #1
 800821e:	4648      	mov	r0, r9
 8008220:	f7ff ff12 	bl	8008048 <strncmp>
 8008224:	4607      	mov	r7, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d167      	bne.n	80082fa <__gethex+0x10e>
 800822a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800822e:	4626      	mov	r6, r4
 8008230:	f7ff ffc6 	bl	80081c0 <__hexdig_fun>
 8008234:	2800      	cmp	r0, #0
 8008236:	d062      	beq.n	80082fe <__gethex+0x112>
 8008238:	4623      	mov	r3, r4
 800823a:	7818      	ldrb	r0, [r3, #0]
 800823c:	2830      	cmp	r0, #48	@ 0x30
 800823e:	4699      	mov	r9, r3
 8008240:	f103 0301 	add.w	r3, r3, #1
 8008244:	d0f9      	beq.n	800823a <__gethex+0x4e>
 8008246:	f7ff ffbb 	bl	80081c0 <__hexdig_fun>
 800824a:	fab0 f580 	clz	r5, r0
 800824e:	096d      	lsrs	r5, r5, #5
 8008250:	f04f 0b01 	mov.w	fp, #1
 8008254:	464a      	mov	r2, r9
 8008256:	4616      	mov	r6, r2
 8008258:	3201      	adds	r2, #1
 800825a:	7830      	ldrb	r0, [r6, #0]
 800825c:	f7ff ffb0 	bl	80081c0 <__hexdig_fun>
 8008260:	2800      	cmp	r0, #0
 8008262:	d1f8      	bne.n	8008256 <__gethex+0x6a>
 8008264:	498d      	ldr	r1, [pc, #564]	@ (800849c <__gethex+0x2b0>)
 8008266:	2201      	movs	r2, #1
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff feed 	bl	8008048 <strncmp>
 800826e:	2800      	cmp	r0, #0
 8008270:	d13f      	bne.n	80082f2 <__gethex+0x106>
 8008272:	b944      	cbnz	r4, 8008286 <__gethex+0x9a>
 8008274:	1c74      	adds	r4, r6, #1
 8008276:	4622      	mov	r2, r4
 8008278:	4616      	mov	r6, r2
 800827a:	3201      	adds	r2, #1
 800827c:	7830      	ldrb	r0, [r6, #0]
 800827e:	f7ff ff9f 	bl	80081c0 <__hexdig_fun>
 8008282:	2800      	cmp	r0, #0
 8008284:	d1f8      	bne.n	8008278 <__gethex+0x8c>
 8008286:	1ba4      	subs	r4, r4, r6
 8008288:	00a7      	lsls	r7, r4, #2
 800828a:	7833      	ldrb	r3, [r6, #0]
 800828c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008290:	2b50      	cmp	r3, #80	@ 0x50
 8008292:	d13e      	bne.n	8008312 <__gethex+0x126>
 8008294:	7873      	ldrb	r3, [r6, #1]
 8008296:	2b2b      	cmp	r3, #43	@ 0x2b
 8008298:	d033      	beq.n	8008302 <__gethex+0x116>
 800829a:	2b2d      	cmp	r3, #45	@ 0x2d
 800829c:	d034      	beq.n	8008308 <__gethex+0x11c>
 800829e:	1c71      	adds	r1, r6, #1
 80082a0:	2400      	movs	r4, #0
 80082a2:	7808      	ldrb	r0, [r1, #0]
 80082a4:	f7ff ff8c 	bl	80081c0 <__hexdig_fun>
 80082a8:	1e43      	subs	r3, r0, #1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b18      	cmp	r3, #24
 80082ae:	d830      	bhi.n	8008312 <__gethex+0x126>
 80082b0:	f1a0 0210 	sub.w	r2, r0, #16
 80082b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082b8:	f7ff ff82 	bl	80081c0 <__hexdig_fun>
 80082bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80082c0:	fa5f fc8c 	uxtb.w	ip, ip
 80082c4:	f1bc 0f18 	cmp.w	ip, #24
 80082c8:	f04f 030a 	mov.w	r3, #10
 80082cc:	d91e      	bls.n	800830c <__gethex+0x120>
 80082ce:	b104      	cbz	r4, 80082d2 <__gethex+0xe6>
 80082d0:	4252      	negs	r2, r2
 80082d2:	4417      	add	r7, r2
 80082d4:	f8ca 1000 	str.w	r1, [sl]
 80082d8:	b1ed      	cbz	r5, 8008316 <__gethex+0x12a>
 80082da:	f1bb 0f00 	cmp.w	fp, #0
 80082de:	bf0c      	ite	eq
 80082e0:	2506      	moveq	r5, #6
 80082e2:	2500      	movne	r5, #0
 80082e4:	4628      	mov	r0, r5
 80082e6:	b005      	add	sp, #20
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	2500      	movs	r5, #0
 80082ee:	462c      	mov	r4, r5
 80082f0:	e7b0      	b.n	8008254 <__gethex+0x68>
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d1c7      	bne.n	8008286 <__gethex+0x9a>
 80082f6:	4627      	mov	r7, r4
 80082f8:	e7c7      	b.n	800828a <__gethex+0x9e>
 80082fa:	464e      	mov	r6, r9
 80082fc:	462f      	mov	r7, r5
 80082fe:	2501      	movs	r5, #1
 8008300:	e7c3      	b.n	800828a <__gethex+0x9e>
 8008302:	2400      	movs	r4, #0
 8008304:	1cb1      	adds	r1, r6, #2
 8008306:	e7cc      	b.n	80082a2 <__gethex+0xb6>
 8008308:	2401      	movs	r4, #1
 800830a:	e7fb      	b.n	8008304 <__gethex+0x118>
 800830c:	fb03 0002 	mla	r0, r3, r2, r0
 8008310:	e7ce      	b.n	80082b0 <__gethex+0xc4>
 8008312:	4631      	mov	r1, r6
 8008314:	e7de      	b.n	80082d4 <__gethex+0xe8>
 8008316:	eba6 0309 	sub.w	r3, r6, r9
 800831a:	3b01      	subs	r3, #1
 800831c:	4629      	mov	r1, r5
 800831e:	2b07      	cmp	r3, #7
 8008320:	dc0a      	bgt.n	8008338 <__gethex+0x14c>
 8008322:	9801      	ldr	r0, [sp, #4]
 8008324:	f7fe f93c 	bl	80065a0 <_Balloc>
 8008328:	4604      	mov	r4, r0
 800832a:	b940      	cbnz	r0, 800833e <__gethex+0x152>
 800832c:	4b5c      	ldr	r3, [pc, #368]	@ (80084a0 <__gethex+0x2b4>)
 800832e:	4602      	mov	r2, r0
 8008330:	21e4      	movs	r1, #228	@ 0xe4
 8008332:	485c      	ldr	r0, [pc, #368]	@ (80084a4 <__gethex+0x2b8>)
 8008334:	f7ff fec0 	bl	80080b8 <__assert_func>
 8008338:	3101      	adds	r1, #1
 800833a:	105b      	asrs	r3, r3, #1
 800833c:	e7ef      	b.n	800831e <__gethex+0x132>
 800833e:	f100 0a14 	add.w	sl, r0, #20
 8008342:	2300      	movs	r3, #0
 8008344:	4655      	mov	r5, sl
 8008346:	469b      	mov	fp, r3
 8008348:	45b1      	cmp	r9, r6
 800834a:	d337      	bcc.n	80083bc <__gethex+0x1d0>
 800834c:	f845 bb04 	str.w	fp, [r5], #4
 8008350:	eba5 050a 	sub.w	r5, r5, sl
 8008354:	10ad      	asrs	r5, r5, #2
 8008356:	6125      	str	r5, [r4, #16]
 8008358:	4658      	mov	r0, fp
 800835a:	f7fe fa13 	bl	8006784 <__hi0bits>
 800835e:	016d      	lsls	r5, r5, #5
 8008360:	f8d8 6000 	ldr.w	r6, [r8]
 8008364:	1a2d      	subs	r5, r5, r0
 8008366:	42b5      	cmp	r5, r6
 8008368:	dd54      	ble.n	8008414 <__gethex+0x228>
 800836a:	1bad      	subs	r5, r5, r6
 800836c:	4629      	mov	r1, r5
 800836e:	4620      	mov	r0, r4
 8008370:	f7fe fda7 	bl	8006ec2 <__any_on>
 8008374:	4681      	mov	r9, r0
 8008376:	b178      	cbz	r0, 8008398 <__gethex+0x1ac>
 8008378:	1e6b      	subs	r3, r5, #1
 800837a:	1159      	asrs	r1, r3, #5
 800837c:	f003 021f 	and.w	r2, r3, #31
 8008380:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008384:	f04f 0901 	mov.w	r9, #1
 8008388:	fa09 f202 	lsl.w	r2, r9, r2
 800838c:	420a      	tst	r2, r1
 800838e:	d003      	beq.n	8008398 <__gethex+0x1ac>
 8008390:	454b      	cmp	r3, r9
 8008392:	dc36      	bgt.n	8008402 <__gethex+0x216>
 8008394:	f04f 0902 	mov.w	r9, #2
 8008398:	4629      	mov	r1, r5
 800839a:	4620      	mov	r0, r4
 800839c:	f7ff febe 	bl	800811c <rshift>
 80083a0:	442f      	add	r7, r5
 80083a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083a6:	42bb      	cmp	r3, r7
 80083a8:	da42      	bge.n	8008430 <__gethex+0x244>
 80083aa:	9801      	ldr	r0, [sp, #4]
 80083ac:	4621      	mov	r1, r4
 80083ae:	f7fe f937 	bl	8006620 <_Bfree>
 80083b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083b4:	2300      	movs	r3, #0
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	25a3      	movs	r5, #163	@ 0xa3
 80083ba:	e793      	b.n	80082e4 <__gethex+0xf8>
 80083bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80083c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80083c2:	d012      	beq.n	80083ea <__gethex+0x1fe>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d104      	bne.n	80083d2 <__gethex+0x1e6>
 80083c8:	f845 bb04 	str.w	fp, [r5], #4
 80083cc:	f04f 0b00 	mov.w	fp, #0
 80083d0:	465b      	mov	r3, fp
 80083d2:	7830      	ldrb	r0, [r6, #0]
 80083d4:	9303      	str	r3, [sp, #12]
 80083d6:	f7ff fef3 	bl	80081c0 <__hexdig_fun>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	f000 000f 	and.w	r0, r0, #15
 80083e0:	4098      	lsls	r0, r3
 80083e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80083e6:	3304      	adds	r3, #4
 80083e8:	e7ae      	b.n	8008348 <__gethex+0x15c>
 80083ea:	45b1      	cmp	r9, r6
 80083ec:	d8ea      	bhi.n	80083c4 <__gethex+0x1d8>
 80083ee:	492b      	ldr	r1, [pc, #172]	@ (800849c <__gethex+0x2b0>)
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff fe27 	bl	8008048 <strncmp>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1e1      	bne.n	80083c4 <__gethex+0x1d8>
 8008400:	e7a2      	b.n	8008348 <__gethex+0x15c>
 8008402:	1ea9      	subs	r1, r5, #2
 8008404:	4620      	mov	r0, r4
 8008406:	f7fe fd5c 	bl	8006ec2 <__any_on>
 800840a:	2800      	cmp	r0, #0
 800840c:	d0c2      	beq.n	8008394 <__gethex+0x1a8>
 800840e:	f04f 0903 	mov.w	r9, #3
 8008412:	e7c1      	b.n	8008398 <__gethex+0x1ac>
 8008414:	da09      	bge.n	800842a <__gethex+0x23e>
 8008416:	1b75      	subs	r5, r6, r5
 8008418:	4621      	mov	r1, r4
 800841a:	9801      	ldr	r0, [sp, #4]
 800841c:	462a      	mov	r2, r5
 800841e:	f7fe fb17 	bl	8006a50 <__lshift>
 8008422:	1b7f      	subs	r7, r7, r5
 8008424:	4604      	mov	r4, r0
 8008426:	f100 0a14 	add.w	sl, r0, #20
 800842a:	f04f 0900 	mov.w	r9, #0
 800842e:	e7b8      	b.n	80083a2 <__gethex+0x1b6>
 8008430:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008434:	42bd      	cmp	r5, r7
 8008436:	dd6f      	ble.n	8008518 <__gethex+0x32c>
 8008438:	1bed      	subs	r5, r5, r7
 800843a:	42ae      	cmp	r6, r5
 800843c:	dc34      	bgt.n	80084a8 <__gethex+0x2bc>
 800843e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d022      	beq.n	800848c <__gethex+0x2a0>
 8008446:	2b03      	cmp	r3, #3
 8008448:	d024      	beq.n	8008494 <__gethex+0x2a8>
 800844a:	2b01      	cmp	r3, #1
 800844c:	d115      	bne.n	800847a <__gethex+0x28e>
 800844e:	42ae      	cmp	r6, r5
 8008450:	d113      	bne.n	800847a <__gethex+0x28e>
 8008452:	2e01      	cmp	r6, #1
 8008454:	d10b      	bne.n	800846e <__gethex+0x282>
 8008456:	9a02      	ldr	r2, [sp, #8]
 8008458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	2301      	movs	r3, #1
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	f8ca 3000 	str.w	r3, [sl]
 8008466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008468:	2562      	movs	r5, #98	@ 0x62
 800846a:	601c      	str	r4, [r3, #0]
 800846c:	e73a      	b.n	80082e4 <__gethex+0xf8>
 800846e:	1e71      	subs	r1, r6, #1
 8008470:	4620      	mov	r0, r4
 8008472:	f7fe fd26 	bl	8006ec2 <__any_on>
 8008476:	2800      	cmp	r0, #0
 8008478:	d1ed      	bne.n	8008456 <__gethex+0x26a>
 800847a:	9801      	ldr	r0, [sp, #4]
 800847c:	4621      	mov	r1, r4
 800847e:	f7fe f8cf 	bl	8006620 <_Bfree>
 8008482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008484:	2300      	movs	r3, #0
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	2550      	movs	r5, #80	@ 0x50
 800848a:	e72b      	b.n	80082e4 <__gethex+0xf8>
 800848c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f3      	bne.n	800847a <__gethex+0x28e>
 8008492:	e7e0      	b.n	8008456 <__gethex+0x26a>
 8008494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1dd      	bne.n	8008456 <__gethex+0x26a>
 800849a:	e7ee      	b.n	800847a <__gethex+0x28e>
 800849c:	08009020 	.word	0x08009020
 80084a0:	08008eb5 	.word	0x08008eb5
 80084a4:	080091ce 	.word	0x080091ce
 80084a8:	1e6f      	subs	r7, r5, #1
 80084aa:	f1b9 0f00 	cmp.w	r9, #0
 80084ae:	d130      	bne.n	8008512 <__gethex+0x326>
 80084b0:	b127      	cbz	r7, 80084bc <__gethex+0x2d0>
 80084b2:	4639      	mov	r1, r7
 80084b4:	4620      	mov	r0, r4
 80084b6:	f7fe fd04 	bl	8006ec2 <__any_on>
 80084ba:	4681      	mov	r9, r0
 80084bc:	117a      	asrs	r2, r7, #5
 80084be:	2301      	movs	r3, #1
 80084c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084c4:	f007 071f 	and.w	r7, r7, #31
 80084c8:	40bb      	lsls	r3, r7
 80084ca:	4213      	tst	r3, r2
 80084cc:	4629      	mov	r1, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	bf18      	it	ne
 80084d2:	f049 0902 	orrne.w	r9, r9, #2
 80084d6:	f7ff fe21 	bl	800811c <rshift>
 80084da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80084de:	1b76      	subs	r6, r6, r5
 80084e0:	2502      	movs	r5, #2
 80084e2:	f1b9 0f00 	cmp.w	r9, #0
 80084e6:	d047      	beq.n	8008578 <__gethex+0x38c>
 80084e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d015      	beq.n	800851c <__gethex+0x330>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d017      	beq.n	8008524 <__gethex+0x338>
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d109      	bne.n	800850c <__gethex+0x320>
 80084f8:	f019 0f02 	tst.w	r9, #2
 80084fc:	d006      	beq.n	800850c <__gethex+0x320>
 80084fe:	f8da 3000 	ldr.w	r3, [sl]
 8008502:	ea49 0903 	orr.w	r9, r9, r3
 8008506:	f019 0f01 	tst.w	r9, #1
 800850a:	d10e      	bne.n	800852a <__gethex+0x33e>
 800850c:	f045 0510 	orr.w	r5, r5, #16
 8008510:	e032      	b.n	8008578 <__gethex+0x38c>
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	e7d1      	b.n	80084bc <__gethex+0x2d0>
 8008518:	2501      	movs	r5, #1
 800851a:	e7e2      	b.n	80084e2 <__gethex+0x2f6>
 800851c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800851e:	f1c3 0301 	rsb	r3, r3, #1
 8008522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f0      	beq.n	800850c <__gethex+0x320>
 800852a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800852e:	f104 0314 	add.w	r3, r4, #20
 8008532:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008536:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800853a:	f04f 0c00 	mov.w	ip, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f853 2b04 	ldr.w	r2, [r3], #4
 8008544:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008548:	d01b      	beq.n	8008582 <__gethex+0x396>
 800854a:	3201      	adds	r2, #1
 800854c:	6002      	str	r2, [r0, #0]
 800854e:	2d02      	cmp	r5, #2
 8008550:	f104 0314 	add.w	r3, r4, #20
 8008554:	d13c      	bne.n	80085d0 <__gethex+0x3e4>
 8008556:	f8d8 2000 	ldr.w	r2, [r8]
 800855a:	3a01      	subs	r2, #1
 800855c:	42b2      	cmp	r2, r6
 800855e:	d109      	bne.n	8008574 <__gethex+0x388>
 8008560:	1171      	asrs	r1, r6, #5
 8008562:	2201      	movs	r2, #1
 8008564:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008568:	f006 061f 	and.w	r6, r6, #31
 800856c:	fa02 f606 	lsl.w	r6, r2, r6
 8008570:	421e      	tst	r6, r3
 8008572:	d13a      	bne.n	80085ea <__gethex+0x3fe>
 8008574:	f045 0520 	orr.w	r5, r5, #32
 8008578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800857a:	601c      	str	r4, [r3, #0]
 800857c:	9b02      	ldr	r3, [sp, #8]
 800857e:	601f      	str	r7, [r3, #0]
 8008580:	e6b0      	b.n	80082e4 <__gethex+0xf8>
 8008582:	4299      	cmp	r1, r3
 8008584:	f843 cc04 	str.w	ip, [r3, #-4]
 8008588:	d8d9      	bhi.n	800853e <__gethex+0x352>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	459b      	cmp	fp, r3
 800858e:	db17      	blt.n	80085c0 <__gethex+0x3d4>
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	9801      	ldr	r0, [sp, #4]
 8008594:	3101      	adds	r1, #1
 8008596:	f7fe f803 	bl	80065a0 <_Balloc>
 800859a:	4681      	mov	r9, r0
 800859c:	b918      	cbnz	r0, 80085a6 <__gethex+0x3ba>
 800859e:	4b1a      	ldr	r3, [pc, #104]	@ (8008608 <__gethex+0x41c>)
 80085a0:	4602      	mov	r2, r0
 80085a2:	2184      	movs	r1, #132	@ 0x84
 80085a4:	e6c5      	b.n	8008332 <__gethex+0x146>
 80085a6:	6922      	ldr	r2, [r4, #16]
 80085a8:	3202      	adds	r2, #2
 80085aa:	f104 010c 	add.w	r1, r4, #12
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	300c      	adds	r0, #12
 80085b2:	f7ff fd6b 	bl	800808c <memcpy>
 80085b6:	4621      	mov	r1, r4
 80085b8:	9801      	ldr	r0, [sp, #4]
 80085ba:	f7fe f831 	bl	8006620 <_Bfree>
 80085be:	464c      	mov	r4, r9
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085c8:	6122      	str	r2, [r4, #16]
 80085ca:	2201      	movs	r2, #1
 80085cc:	615a      	str	r2, [r3, #20]
 80085ce:	e7be      	b.n	800854e <__gethex+0x362>
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	455a      	cmp	r2, fp
 80085d4:	dd0b      	ble.n	80085ee <__gethex+0x402>
 80085d6:	2101      	movs	r1, #1
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff fd9f 	bl	800811c <rshift>
 80085de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085e2:	3701      	adds	r7, #1
 80085e4:	42bb      	cmp	r3, r7
 80085e6:	f6ff aee0 	blt.w	80083aa <__gethex+0x1be>
 80085ea:	2501      	movs	r5, #1
 80085ec:	e7c2      	b.n	8008574 <__gethex+0x388>
 80085ee:	f016 061f 	ands.w	r6, r6, #31
 80085f2:	d0fa      	beq.n	80085ea <__gethex+0x3fe>
 80085f4:	4453      	add	r3, sl
 80085f6:	f1c6 0620 	rsb	r6, r6, #32
 80085fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80085fe:	f7fe f8c1 	bl	8006784 <__hi0bits>
 8008602:	42b0      	cmp	r0, r6
 8008604:	dbe7      	blt.n	80085d6 <__gethex+0x3ea>
 8008606:	e7f0      	b.n	80085ea <__gethex+0x3fe>
 8008608:	08008eb5 	.word	0x08008eb5

0800860c <L_shift>:
 800860c:	f1c2 0208 	rsb	r2, r2, #8
 8008610:	0092      	lsls	r2, r2, #2
 8008612:	b570      	push	{r4, r5, r6, lr}
 8008614:	f1c2 0620 	rsb	r6, r2, #32
 8008618:	6843      	ldr	r3, [r0, #4]
 800861a:	6804      	ldr	r4, [r0, #0]
 800861c:	fa03 f506 	lsl.w	r5, r3, r6
 8008620:	432c      	orrs	r4, r5
 8008622:	40d3      	lsrs	r3, r2
 8008624:	6004      	str	r4, [r0, #0]
 8008626:	f840 3f04 	str.w	r3, [r0, #4]!
 800862a:	4288      	cmp	r0, r1
 800862c:	d3f4      	bcc.n	8008618 <L_shift+0xc>
 800862e:	bd70      	pop	{r4, r5, r6, pc}

08008630 <__match>:
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	6803      	ldr	r3, [r0, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863a:	b914      	cbnz	r4, 8008642 <__match+0x12>
 800863c:	6003      	str	r3, [r0, #0]
 800863e:	2001      	movs	r0, #1
 8008640:	bd30      	pop	{r4, r5, pc}
 8008642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008646:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800864a:	2d19      	cmp	r5, #25
 800864c:	bf98      	it	ls
 800864e:	3220      	addls	r2, #32
 8008650:	42a2      	cmp	r2, r4
 8008652:	d0f0      	beq.n	8008636 <__match+0x6>
 8008654:	2000      	movs	r0, #0
 8008656:	e7f3      	b.n	8008640 <__match+0x10>

08008658 <__hexnan>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	680b      	ldr	r3, [r1, #0]
 800865e:	6801      	ldr	r1, [r0, #0]
 8008660:	115e      	asrs	r6, r3, #5
 8008662:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008666:	f013 031f 	ands.w	r3, r3, #31
 800866a:	b087      	sub	sp, #28
 800866c:	bf18      	it	ne
 800866e:	3604      	addne	r6, #4
 8008670:	2500      	movs	r5, #0
 8008672:	1f37      	subs	r7, r6, #4
 8008674:	4682      	mov	sl, r0
 8008676:	4690      	mov	r8, r2
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f846 5c04 	str.w	r5, [r6, #-4]
 800867e:	46b9      	mov	r9, r7
 8008680:	463c      	mov	r4, r7
 8008682:	9502      	str	r5, [sp, #8]
 8008684:	46ab      	mov	fp, r5
 8008686:	784a      	ldrb	r2, [r1, #1]
 8008688:	1c4b      	adds	r3, r1, #1
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	b342      	cbz	r2, 80086e0 <__hexnan+0x88>
 800868e:	4610      	mov	r0, r2
 8008690:	9105      	str	r1, [sp, #20]
 8008692:	9204      	str	r2, [sp, #16]
 8008694:	f7ff fd94 	bl	80081c0 <__hexdig_fun>
 8008698:	2800      	cmp	r0, #0
 800869a:	d151      	bne.n	8008740 <__hexnan+0xe8>
 800869c:	9a04      	ldr	r2, [sp, #16]
 800869e:	9905      	ldr	r1, [sp, #20]
 80086a0:	2a20      	cmp	r2, #32
 80086a2:	d818      	bhi.n	80086d6 <__hexnan+0x7e>
 80086a4:	9b02      	ldr	r3, [sp, #8]
 80086a6:	459b      	cmp	fp, r3
 80086a8:	dd13      	ble.n	80086d2 <__hexnan+0x7a>
 80086aa:	454c      	cmp	r4, r9
 80086ac:	d206      	bcs.n	80086bc <__hexnan+0x64>
 80086ae:	2d07      	cmp	r5, #7
 80086b0:	dc04      	bgt.n	80086bc <__hexnan+0x64>
 80086b2:	462a      	mov	r2, r5
 80086b4:	4649      	mov	r1, r9
 80086b6:	4620      	mov	r0, r4
 80086b8:	f7ff ffa8 	bl	800860c <L_shift>
 80086bc:	4544      	cmp	r4, r8
 80086be:	d952      	bls.n	8008766 <__hexnan+0x10e>
 80086c0:	2300      	movs	r3, #0
 80086c2:	f1a4 0904 	sub.w	r9, r4, #4
 80086c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ca:	f8cd b008 	str.w	fp, [sp, #8]
 80086ce:	464c      	mov	r4, r9
 80086d0:	461d      	mov	r5, r3
 80086d2:	9903      	ldr	r1, [sp, #12]
 80086d4:	e7d7      	b.n	8008686 <__hexnan+0x2e>
 80086d6:	2a29      	cmp	r2, #41	@ 0x29
 80086d8:	d157      	bne.n	800878a <__hexnan+0x132>
 80086da:	3102      	adds	r1, #2
 80086dc:	f8ca 1000 	str.w	r1, [sl]
 80086e0:	f1bb 0f00 	cmp.w	fp, #0
 80086e4:	d051      	beq.n	800878a <__hexnan+0x132>
 80086e6:	454c      	cmp	r4, r9
 80086e8:	d206      	bcs.n	80086f8 <__hexnan+0xa0>
 80086ea:	2d07      	cmp	r5, #7
 80086ec:	dc04      	bgt.n	80086f8 <__hexnan+0xa0>
 80086ee:	462a      	mov	r2, r5
 80086f0:	4649      	mov	r1, r9
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7ff ff8a 	bl	800860c <L_shift>
 80086f8:	4544      	cmp	r4, r8
 80086fa:	d936      	bls.n	800876a <__hexnan+0x112>
 80086fc:	f1a8 0204 	sub.w	r2, r8, #4
 8008700:	4623      	mov	r3, r4
 8008702:	f853 1b04 	ldr.w	r1, [r3], #4
 8008706:	f842 1f04 	str.w	r1, [r2, #4]!
 800870a:	429f      	cmp	r7, r3
 800870c:	d2f9      	bcs.n	8008702 <__hexnan+0xaa>
 800870e:	1b3b      	subs	r3, r7, r4
 8008710:	f023 0303 	bic.w	r3, r3, #3
 8008714:	3304      	adds	r3, #4
 8008716:	3401      	adds	r4, #1
 8008718:	3e03      	subs	r6, #3
 800871a:	42b4      	cmp	r4, r6
 800871c:	bf88      	it	hi
 800871e:	2304      	movhi	r3, #4
 8008720:	4443      	add	r3, r8
 8008722:	2200      	movs	r2, #0
 8008724:	f843 2b04 	str.w	r2, [r3], #4
 8008728:	429f      	cmp	r7, r3
 800872a:	d2fb      	bcs.n	8008724 <__hexnan+0xcc>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	b91b      	cbnz	r3, 8008738 <__hexnan+0xe0>
 8008730:	4547      	cmp	r7, r8
 8008732:	d128      	bne.n	8008786 <__hexnan+0x12e>
 8008734:	2301      	movs	r3, #1
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	2005      	movs	r0, #5
 800873a:	b007      	add	sp, #28
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008740:	3501      	adds	r5, #1
 8008742:	2d08      	cmp	r5, #8
 8008744:	f10b 0b01 	add.w	fp, fp, #1
 8008748:	dd06      	ble.n	8008758 <__hexnan+0x100>
 800874a:	4544      	cmp	r4, r8
 800874c:	d9c1      	bls.n	80086d2 <__hexnan+0x7a>
 800874e:	2300      	movs	r3, #0
 8008750:	f844 3c04 	str.w	r3, [r4, #-4]
 8008754:	2501      	movs	r5, #1
 8008756:	3c04      	subs	r4, #4
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	f000 000f 	and.w	r0, r0, #15
 800875e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	e7b5      	b.n	80086d2 <__hexnan+0x7a>
 8008766:	2508      	movs	r5, #8
 8008768:	e7b3      	b.n	80086d2 <__hexnan+0x7a>
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0dd      	beq.n	800872c <__hexnan+0xd4>
 8008770:	f1c3 0320 	rsb	r3, r3, #32
 8008774:	f04f 32ff 	mov.w	r2, #4294967295
 8008778:	40da      	lsrs	r2, r3
 800877a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800877e:	4013      	ands	r3, r2
 8008780:	f846 3c04 	str.w	r3, [r6, #-4]
 8008784:	e7d2      	b.n	800872c <__hexnan+0xd4>
 8008786:	3f04      	subs	r7, #4
 8008788:	e7d0      	b.n	800872c <__hexnan+0xd4>
 800878a:	2004      	movs	r0, #4
 800878c:	e7d5      	b.n	800873a <__hexnan+0xe2>

0800878e <__ascii_mbtowc>:
 800878e:	b082      	sub	sp, #8
 8008790:	b901      	cbnz	r1, 8008794 <__ascii_mbtowc+0x6>
 8008792:	a901      	add	r1, sp, #4
 8008794:	b142      	cbz	r2, 80087a8 <__ascii_mbtowc+0x1a>
 8008796:	b14b      	cbz	r3, 80087ac <__ascii_mbtowc+0x1e>
 8008798:	7813      	ldrb	r3, [r2, #0]
 800879a:	600b      	str	r3, [r1, #0]
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	1e10      	subs	r0, r2, #0
 80087a0:	bf18      	it	ne
 80087a2:	2001      	movne	r0, #1
 80087a4:	b002      	add	sp, #8
 80087a6:	4770      	bx	lr
 80087a8:	4610      	mov	r0, r2
 80087aa:	e7fb      	b.n	80087a4 <__ascii_mbtowc+0x16>
 80087ac:	f06f 0001 	mvn.w	r0, #1
 80087b0:	e7f8      	b.n	80087a4 <__ascii_mbtowc+0x16>

080087b2 <_realloc_r>:
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	4680      	mov	r8, r0
 80087b8:	4615      	mov	r5, r2
 80087ba:	460c      	mov	r4, r1
 80087bc:	b921      	cbnz	r1, 80087c8 <_realloc_r+0x16>
 80087be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c2:	4611      	mov	r1, r2
 80087c4:	f7fd be60 	b.w	8006488 <_malloc_r>
 80087c8:	b92a      	cbnz	r2, 80087d6 <_realloc_r+0x24>
 80087ca:	f7fd fde9 	bl	80063a0 <_free_r>
 80087ce:	2400      	movs	r4, #0
 80087d0:	4620      	mov	r0, r4
 80087d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d6:	f000 f840 	bl	800885a <_malloc_usable_size_r>
 80087da:	4285      	cmp	r5, r0
 80087dc:	4606      	mov	r6, r0
 80087de:	d802      	bhi.n	80087e6 <_realloc_r+0x34>
 80087e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087e4:	d8f4      	bhi.n	80087d0 <_realloc_r+0x1e>
 80087e6:	4629      	mov	r1, r5
 80087e8:	4640      	mov	r0, r8
 80087ea:	f7fd fe4d 	bl	8006488 <_malloc_r>
 80087ee:	4607      	mov	r7, r0
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d0ec      	beq.n	80087ce <_realloc_r+0x1c>
 80087f4:	42b5      	cmp	r5, r6
 80087f6:	462a      	mov	r2, r5
 80087f8:	4621      	mov	r1, r4
 80087fa:	bf28      	it	cs
 80087fc:	4632      	movcs	r2, r6
 80087fe:	f7ff fc45 	bl	800808c <memcpy>
 8008802:	4621      	mov	r1, r4
 8008804:	4640      	mov	r0, r8
 8008806:	f7fd fdcb 	bl	80063a0 <_free_r>
 800880a:	463c      	mov	r4, r7
 800880c:	e7e0      	b.n	80087d0 <_realloc_r+0x1e>

0800880e <__ascii_wctomb>:
 800880e:	4603      	mov	r3, r0
 8008810:	4608      	mov	r0, r1
 8008812:	b141      	cbz	r1, 8008826 <__ascii_wctomb+0x18>
 8008814:	2aff      	cmp	r2, #255	@ 0xff
 8008816:	d904      	bls.n	8008822 <__ascii_wctomb+0x14>
 8008818:	228a      	movs	r2, #138	@ 0x8a
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	4770      	bx	lr
 8008822:	700a      	strb	r2, [r1, #0]
 8008824:	2001      	movs	r0, #1
 8008826:	4770      	bx	lr

08008828 <fiprintf>:
 8008828:	b40e      	push	{r1, r2, r3}
 800882a:	b503      	push	{r0, r1, lr}
 800882c:	4601      	mov	r1, r0
 800882e:	ab03      	add	r3, sp, #12
 8008830:	4805      	ldr	r0, [pc, #20]	@ (8008848 <fiprintf+0x20>)
 8008832:	f853 2b04 	ldr.w	r2, [r3], #4
 8008836:	6800      	ldr	r0, [r0, #0]
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	f000 f83f 	bl	80088bc <_vfiprintf_r>
 800883e:	b002      	add	sp, #8
 8008840:	f85d eb04 	ldr.w	lr, [sp], #4
 8008844:	b003      	add	sp, #12
 8008846:	4770      	bx	lr
 8008848:	20000018 	.word	0x20000018

0800884c <abort>:
 800884c:	b508      	push	{r3, lr}
 800884e:	2006      	movs	r0, #6
 8008850:	f000 fa08 	bl	8008c64 <raise>
 8008854:	2001      	movs	r0, #1
 8008856:	f7f8 fd5f 	bl	8001318 <_exit>

0800885a <_malloc_usable_size_r>:
 800885a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800885e:	1f18      	subs	r0, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfbc      	itt	lt
 8008864:	580b      	ldrlt	r3, [r1, r0]
 8008866:	18c0      	addlt	r0, r0, r3
 8008868:	4770      	bx	lr

0800886a <__sfputc_r>:
 800886a:	6893      	ldr	r3, [r2, #8]
 800886c:	3b01      	subs	r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	b410      	push	{r4}
 8008872:	6093      	str	r3, [r2, #8]
 8008874:	da08      	bge.n	8008888 <__sfputc_r+0x1e>
 8008876:	6994      	ldr	r4, [r2, #24]
 8008878:	42a3      	cmp	r3, r4
 800887a:	db01      	blt.n	8008880 <__sfputc_r+0x16>
 800887c:	290a      	cmp	r1, #10
 800887e:	d103      	bne.n	8008888 <__sfputc_r+0x1e>
 8008880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008884:	f000 b932 	b.w	8008aec <__swbuf_r>
 8008888:	6813      	ldr	r3, [r2, #0]
 800888a:	1c58      	adds	r0, r3, #1
 800888c:	6010      	str	r0, [r2, #0]
 800888e:	7019      	strb	r1, [r3, #0]
 8008890:	4608      	mov	r0, r1
 8008892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008896:	4770      	bx	lr

08008898 <__sfputs_r>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	4614      	mov	r4, r2
 80088a0:	18d5      	adds	r5, r2, r3
 80088a2:	42ac      	cmp	r4, r5
 80088a4:	d101      	bne.n	80088aa <__sfputs_r+0x12>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e007      	b.n	80088ba <__sfputs_r+0x22>
 80088aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ae:	463a      	mov	r2, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff ffda 	bl	800886a <__sfputc_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d1f3      	bne.n	80088a2 <__sfputs_r+0xa>
 80088ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088bc <_vfiprintf_r>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	460d      	mov	r5, r1
 80088c2:	b09d      	sub	sp, #116	@ 0x74
 80088c4:	4614      	mov	r4, r2
 80088c6:	4698      	mov	r8, r3
 80088c8:	4606      	mov	r6, r0
 80088ca:	b118      	cbz	r0, 80088d4 <_vfiprintf_r+0x18>
 80088cc:	6a03      	ldr	r3, [r0, #32]
 80088ce:	b90b      	cbnz	r3, 80088d4 <_vfiprintf_r+0x18>
 80088d0:	f7fc fdfa 	bl	80054c8 <__sinit>
 80088d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_vfiprintf_r+0x2a>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	059a      	lsls	r2, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_vfiprintf_r+0x2a>
 80088e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088e2:	f7fc ff08 	bl	80056f6 <__retarget_lock_acquire_recursive>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	071b      	lsls	r3, r3, #28
 80088ea:	d501      	bpl.n	80088f0 <_vfiprintf_r+0x34>
 80088ec:	692b      	ldr	r3, [r5, #16]
 80088ee:	b99b      	cbnz	r3, 8008918 <_vfiprintf_r+0x5c>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 f938 	bl	8008b68 <__swsetup_r>
 80088f8:	b170      	cbz	r0, 8008918 <_vfiprintf_r+0x5c>
 80088fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088fc:	07dc      	lsls	r4, r3, #31
 80088fe:	d504      	bpl.n	800890a <_vfiprintf_r+0x4e>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	b01d      	add	sp, #116	@ 0x74
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	0598      	lsls	r0, r3, #22
 800890e:	d4f7      	bmi.n	8008900 <_vfiprintf_r+0x44>
 8008910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008912:	f7fc fef1 	bl	80056f8 <__retarget_lock_release_recursive>
 8008916:	e7f3      	b.n	8008900 <_vfiprintf_r+0x44>
 8008918:	2300      	movs	r3, #0
 800891a:	9309      	str	r3, [sp, #36]	@ 0x24
 800891c:	2320      	movs	r3, #32
 800891e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008922:	f8cd 800c 	str.w	r8, [sp, #12]
 8008926:	2330      	movs	r3, #48	@ 0x30
 8008928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ad8 <_vfiprintf_r+0x21c>
 800892c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008930:	f04f 0901 	mov.w	r9, #1
 8008934:	4623      	mov	r3, r4
 8008936:	469a      	mov	sl, r3
 8008938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800893c:	b10a      	cbz	r2, 8008942 <_vfiprintf_r+0x86>
 800893e:	2a25      	cmp	r2, #37	@ 0x25
 8008940:	d1f9      	bne.n	8008936 <_vfiprintf_r+0x7a>
 8008942:	ebba 0b04 	subs.w	fp, sl, r4
 8008946:	d00b      	beq.n	8008960 <_vfiprintf_r+0xa4>
 8008948:	465b      	mov	r3, fp
 800894a:	4622      	mov	r2, r4
 800894c:	4629      	mov	r1, r5
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff ffa2 	bl	8008898 <__sfputs_r>
 8008954:	3001      	adds	r0, #1
 8008956:	f000 80a7 	beq.w	8008aa8 <_vfiprintf_r+0x1ec>
 800895a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800895c:	445a      	add	r2, fp
 800895e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008960:	f89a 3000 	ldrb.w	r3, [sl]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 809f 	beq.w	8008aa8 <_vfiprintf_r+0x1ec>
 800896a:	2300      	movs	r3, #0
 800896c:	f04f 32ff 	mov.w	r2, #4294967295
 8008970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008974:	f10a 0a01 	add.w	sl, sl, #1
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008980:	931a      	str	r3, [sp, #104]	@ 0x68
 8008982:	4654      	mov	r4, sl
 8008984:	2205      	movs	r2, #5
 8008986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898a:	4853      	ldr	r0, [pc, #332]	@ (8008ad8 <_vfiprintf_r+0x21c>)
 800898c:	f7f7 fc20 	bl	80001d0 <memchr>
 8008990:	9a04      	ldr	r2, [sp, #16]
 8008992:	b9d8      	cbnz	r0, 80089cc <_vfiprintf_r+0x110>
 8008994:	06d1      	lsls	r1, r2, #27
 8008996:	bf44      	itt	mi
 8008998:	2320      	movmi	r3, #32
 800899a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800899e:	0713      	lsls	r3, r2, #28
 80089a0:	bf44      	itt	mi
 80089a2:	232b      	movmi	r3, #43	@ 0x2b
 80089a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a8:	f89a 3000 	ldrb.w	r3, [sl]
 80089ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ae:	d015      	beq.n	80089dc <_vfiprintf_r+0x120>
 80089b0:	9a07      	ldr	r2, [sp, #28]
 80089b2:	4654      	mov	r4, sl
 80089b4:	2000      	movs	r0, #0
 80089b6:	f04f 0c0a 	mov.w	ip, #10
 80089ba:	4621      	mov	r1, r4
 80089bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c0:	3b30      	subs	r3, #48	@ 0x30
 80089c2:	2b09      	cmp	r3, #9
 80089c4:	d94b      	bls.n	8008a5e <_vfiprintf_r+0x1a2>
 80089c6:	b1b0      	cbz	r0, 80089f6 <_vfiprintf_r+0x13a>
 80089c8:	9207      	str	r2, [sp, #28]
 80089ca:	e014      	b.n	80089f6 <_vfiprintf_r+0x13a>
 80089cc:	eba0 0308 	sub.w	r3, r0, r8
 80089d0:	fa09 f303 	lsl.w	r3, r9, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	46a2      	mov	sl, r4
 80089da:	e7d2      	b.n	8008982 <_vfiprintf_r+0xc6>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	1d19      	adds	r1, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	9103      	str	r1, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbb      	ittet	lt
 80089e8:	425b      	neglt	r3, r3
 80089ea:	f042 0202 	orrlt.w	r2, r2, #2
 80089ee:	9307      	strge	r3, [sp, #28]
 80089f0:	9307      	strlt	r3, [sp, #28]
 80089f2:	bfb8      	it	lt
 80089f4:	9204      	strlt	r2, [sp, #16]
 80089f6:	7823      	ldrb	r3, [r4, #0]
 80089f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80089fa:	d10a      	bne.n	8008a12 <_vfiprintf_r+0x156>
 80089fc:	7863      	ldrb	r3, [r4, #1]
 80089fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a00:	d132      	bne.n	8008a68 <_vfiprintf_r+0x1ac>
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	1d1a      	adds	r2, r3, #4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	9203      	str	r2, [sp, #12]
 8008a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a0e:	3402      	adds	r4, #2
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ae8 <_vfiprintf_r+0x22c>
 8008a16:	7821      	ldrb	r1, [r4, #0]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	f7f7 fbd8 	bl	80001d0 <memchr>
 8008a20:	b138      	cbz	r0, 8008a32 <_vfiprintf_r+0x176>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	eba0 000a 	sub.w	r0, r0, sl
 8008a28:	2240      	movs	r2, #64	@ 0x40
 8008a2a:	4082      	lsls	r2, r0
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	3401      	adds	r4, #1
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a36:	4829      	ldr	r0, [pc, #164]	@ (8008adc <_vfiprintf_r+0x220>)
 8008a38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a3c:	2206      	movs	r2, #6
 8008a3e:	f7f7 fbc7 	bl	80001d0 <memchr>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d03f      	beq.n	8008ac6 <_vfiprintf_r+0x20a>
 8008a46:	4b26      	ldr	r3, [pc, #152]	@ (8008ae0 <_vfiprintf_r+0x224>)
 8008a48:	bb1b      	cbnz	r3, 8008a92 <_vfiprintf_r+0x1d6>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	3307      	adds	r3, #7
 8008a4e:	f023 0307 	bic.w	r3, r3, #7
 8008a52:	3308      	adds	r3, #8
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a58:	443b      	add	r3, r7
 8008a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5c:	e76a      	b.n	8008934 <_vfiprintf_r+0x78>
 8008a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a62:	460c      	mov	r4, r1
 8008a64:	2001      	movs	r0, #1
 8008a66:	e7a8      	b.n	80089ba <_vfiprintf_r+0xfe>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	3401      	adds	r4, #1
 8008a6c:	9305      	str	r3, [sp, #20]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4620      	mov	r0, r4
 8008a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a7a:	3a30      	subs	r2, #48	@ 0x30
 8008a7c:	2a09      	cmp	r2, #9
 8008a7e:	d903      	bls.n	8008a88 <_vfiprintf_r+0x1cc>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0c6      	beq.n	8008a12 <_vfiprintf_r+0x156>
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	e7c4      	b.n	8008a12 <_vfiprintf_r+0x156>
 8008a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7f0      	b.n	8008a74 <_vfiprintf_r+0x1b8>
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4b12      	ldr	r3, [pc, #72]	@ (8008ae4 <_vfiprintf_r+0x228>)
 8008a9a:	a904      	add	r1, sp, #16
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7fb febb 	bl	8004818 <_printf_float>
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	1c78      	adds	r0, r7, #1
 8008aa6:	d1d6      	bne.n	8008a56 <_vfiprintf_r+0x19a>
 8008aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aaa:	07d9      	lsls	r1, r3, #31
 8008aac:	d405      	bmi.n	8008aba <_vfiprintf_r+0x1fe>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	059a      	lsls	r2, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_vfiprintf_r+0x1fe>
 8008ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ab6:	f7fc fe1f 	bl	80056f8 <__retarget_lock_release_recursive>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	065b      	lsls	r3, r3, #25
 8008abe:	f53f af1f 	bmi.w	8008900 <_vfiprintf_r+0x44>
 8008ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ac4:	e71e      	b.n	8008904 <_vfiprintf_r+0x48>
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	462a      	mov	r2, r5
 8008acc:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <_vfiprintf_r+0x228>)
 8008ace:	a904      	add	r1, sp, #16
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7fc f939 	bl	8004d48 <_printf_i>
 8008ad6:	e7e4      	b.n	8008aa2 <_vfiprintf_r+0x1e6>
 8008ad8:	08009179 	.word	0x08009179
 8008adc:	08009183 	.word	0x08009183
 8008ae0:	08004819 	.word	0x08004819
 8008ae4:	08008899 	.word	0x08008899
 8008ae8:	0800917f 	.word	0x0800917f

08008aec <__swbuf_r>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	460e      	mov	r6, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	4605      	mov	r5, r0
 8008af4:	b118      	cbz	r0, 8008afe <__swbuf_r+0x12>
 8008af6:	6a03      	ldr	r3, [r0, #32]
 8008af8:	b90b      	cbnz	r3, 8008afe <__swbuf_r+0x12>
 8008afa:	f7fc fce5 	bl	80054c8 <__sinit>
 8008afe:	69a3      	ldr	r3, [r4, #24]
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	071a      	lsls	r2, r3, #28
 8008b06:	d501      	bpl.n	8008b0c <__swbuf_r+0x20>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	b943      	cbnz	r3, 8008b1e <__swbuf_r+0x32>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f82a 	bl	8008b68 <__swsetup_r>
 8008b14:	b118      	cbz	r0, 8008b1e <__swbuf_r+0x32>
 8008b16:	f04f 37ff 	mov.w	r7, #4294967295
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	1a98      	subs	r0, r3, r2
 8008b24:	6963      	ldr	r3, [r4, #20]
 8008b26:	b2f6      	uxtb	r6, r6
 8008b28:	4283      	cmp	r3, r0
 8008b2a:	4637      	mov	r7, r6
 8008b2c:	dc05      	bgt.n	8008b3a <__swbuf_r+0x4e>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7ff fa47 	bl	8007fc4 <_fflush_r>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d1ed      	bne.n	8008b16 <__swbuf_r+0x2a>
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	60a3      	str	r3, [r4, #8]
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	6022      	str	r2, [r4, #0]
 8008b46:	701e      	strb	r6, [r3, #0]
 8008b48:	6962      	ldr	r2, [r4, #20]
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d004      	beq.n	8008b5a <__swbuf_r+0x6e>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	07db      	lsls	r3, r3, #31
 8008b54:	d5e1      	bpl.n	8008b1a <__swbuf_r+0x2e>
 8008b56:	2e0a      	cmp	r6, #10
 8008b58:	d1df      	bne.n	8008b1a <__swbuf_r+0x2e>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7ff fa31 	bl	8007fc4 <_fflush_r>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d0d9      	beq.n	8008b1a <__swbuf_r+0x2e>
 8008b66:	e7d6      	b.n	8008b16 <__swbuf_r+0x2a>

08008b68 <__swsetup_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4b29      	ldr	r3, [pc, #164]	@ (8008c10 <__swsetup_r+0xa8>)
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	460c      	mov	r4, r1
 8008b72:	b118      	cbz	r0, 8008b7c <__swsetup_r+0x14>
 8008b74:	6a03      	ldr	r3, [r0, #32]
 8008b76:	b90b      	cbnz	r3, 8008b7c <__swsetup_r+0x14>
 8008b78:	f7fc fca6 	bl	80054c8 <__sinit>
 8008b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b80:	0719      	lsls	r1, r3, #28
 8008b82:	d422      	bmi.n	8008bca <__swsetup_r+0x62>
 8008b84:	06da      	lsls	r2, r3, #27
 8008b86:	d407      	bmi.n	8008b98 <__swsetup_r+0x30>
 8008b88:	2209      	movs	r2, #9
 8008b8a:	602a      	str	r2, [r5, #0]
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	e033      	b.n	8008c00 <__swsetup_r+0x98>
 8008b98:	0758      	lsls	r0, r3, #29
 8008b9a:	d512      	bpl.n	8008bc2 <__swsetup_r+0x5a>
 8008b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b9e:	b141      	cbz	r1, 8008bb2 <__swsetup_r+0x4a>
 8008ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	d002      	beq.n	8008bae <__swsetup_r+0x46>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f7fd fbf9 	bl	80063a0 <_free_r>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6063      	str	r3, [r4, #4]
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0308 	orr.w	r3, r3, #8
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	b94b      	cbnz	r3, 8008be2 <__swsetup_r+0x7a>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd8:	d003      	beq.n	8008be2 <__swsetup_r+0x7a>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 f883 	bl	8008ce8 <__smakebuf_r>
 8008be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be6:	f013 0201 	ands.w	r2, r3, #1
 8008bea:	d00a      	beq.n	8008c02 <__swsetup_r+0x9a>
 8008bec:	2200      	movs	r2, #0
 8008bee:	60a2      	str	r2, [r4, #8]
 8008bf0:	6962      	ldr	r2, [r4, #20]
 8008bf2:	4252      	negs	r2, r2
 8008bf4:	61a2      	str	r2, [r4, #24]
 8008bf6:	6922      	ldr	r2, [r4, #16]
 8008bf8:	b942      	cbnz	r2, 8008c0c <__swsetup_r+0xa4>
 8008bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bfe:	d1c5      	bne.n	8008b8c <__swsetup_r+0x24>
 8008c00:	bd38      	pop	{r3, r4, r5, pc}
 8008c02:	0799      	lsls	r1, r3, #30
 8008c04:	bf58      	it	pl
 8008c06:	6962      	ldrpl	r2, [r4, #20]
 8008c08:	60a2      	str	r2, [r4, #8]
 8008c0a:	e7f4      	b.n	8008bf6 <__swsetup_r+0x8e>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	e7f7      	b.n	8008c00 <__swsetup_r+0x98>
 8008c10:	20000018 	.word	0x20000018

08008c14 <_raise_r>:
 8008c14:	291f      	cmp	r1, #31
 8008c16:	b538      	push	{r3, r4, r5, lr}
 8008c18:	4605      	mov	r5, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	d904      	bls.n	8008c28 <_raise_r+0x14>
 8008c1e:	2316      	movs	r3, #22
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c2a:	b112      	cbz	r2, 8008c32 <_raise_r+0x1e>
 8008c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c30:	b94b      	cbnz	r3, 8008c46 <_raise_r+0x32>
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f830 	bl	8008c98 <_getpid_r>
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c42:	f000 b817 	b.w	8008c74 <_kill_r>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d00a      	beq.n	8008c60 <_raise_r+0x4c>
 8008c4a:	1c59      	adds	r1, r3, #1
 8008c4c:	d103      	bne.n	8008c56 <_raise_r+0x42>
 8008c4e:	2316      	movs	r3, #22
 8008c50:	6003      	str	r3, [r0, #0]
 8008c52:	2001      	movs	r0, #1
 8008c54:	e7e7      	b.n	8008c26 <_raise_r+0x12>
 8008c56:	2100      	movs	r1, #0
 8008c58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4798      	blx	r3
 8008c60:	2000      	movs	r0, #0
 8008c62:	e7e0      	b.n	8008c26 <_raise_r+0x12>

08008c64 <raise>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <raise+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f7ff bfd3 	b.w	8008c14 <_raise_r>
 8008c6e:	bf00      	nop
 8008c70:	20000018 	.word	0x20000018

08008c74 <_kill_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	@ (8008c94 <_kill_r+0x20>)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f7f8 fb39 	bl	80012f8 <_kill>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d102      	bne.n	8008c90 <_kill_r+0x1c>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	b103      	cbz	r3, 8008c90 <_kill_r+0x1c>
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	20000434 	.word	0x20000434

08008c98 <_getpid_r>:
 8008c98:	f7f8 bb26 	b.w	80012e8 <_getpid>

08008c9c <__swhatbuf_r>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	b096      	sub	sp, #88	@ 0x58
 8008ca8:	4615      	mov	r5, r2
 8008caa:	461e      	mov	r6, r3
 8008cac:	da0d      	bge.n	8008cca <__swhatbuf_r+0x2e>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cb4:	f04f 0100 	mov.w	r1, #0
 8008cb8:	bf14      	ite	ne
 8008cba:	2340      	movne	r3, #64	@ 0x40
 8008cbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	6031      	str	r1, [r6, #0]
 8008cc4:	602b      	str	r3, [r5, #0]
 8008cc6:	b016      	add	sp, #88	@ 0x58
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	466a      	mov	r2, sp
 8008ccc:	f000 f848 	bl	8008d60 <_fstat_r>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	dbec      	blt.n	8008cae <__swhatbuf_r+0x12>
 8008cd4:	9901      	ldr	r1, [sp, #4]
 8008cd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cde:	4259      	negs	r1, r3
 8008ce0:	4159      	adcs	r1, r3
 8008ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ce6:	e7eb      	b.n	8008cc0 <__swhatbuf_r+0x24>

08008ce8 <__smakebuf_r>:
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cec:	079d      	lsls	r5, r3, #30
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	d507      	bpl.n	8008d04 <__smakebuf_r+0x1c>
 8008cf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	6163      	str	r3, [r4, #20]
 8008d00:	b003      	add	sp, #12
 8008d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d04:	ab01      	add	r3, sp, #4
 8008d06:	466a      	mov	r2, sp
 8008d08:	f7ff ffc8 	bl	8008c9c <__swhatbuf_r>
 8008d0c:	9f00      	ldr	r7, [sp, #0]
 8008d0e:	4605      	mov	r5, r0
 8008d10:	4639      	mov	r1, r7
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7fd fbb8 	bl	8006488 <_malloc_r>
 8008d18:	b948      	cbnz	r0, 8008d2e <__smakebuf_r+0x46>
 8008d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d4ee      	bmi.n	8008d00 <__smakebuf_r+0x18>
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	f043 0302 	orr.w	r3, r3, #2
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	e7e2      	b.n	8008cf4 <__smakebuf_r+0xc>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	6020      	str	r0, [r4, #0]
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	9b01      	ldr	r3, [sp, #4]
 8008d3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d3e:	b15b      	cbz	r3, 8008d58 <__smakebuf_r+0x70>
 8008d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 f81d 	bl	8008d84 <_isatty_r>
 8008d4a:	b128      	cbz	r0, 8008d58 <__smakebuf_r+0x70>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	431d      	orrs	r5, r3
 8008d5c:	81a5      	strh	r5, [r4, #12]
 8008d5e:	e7cf      	b.n	8008d00 <__smakebuf_r+0x18>

08008d60 <_fstat_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d07      	ldr	r5, [pc, #28]	@ (8008d80 <_fstat_r+0x20>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	f7f8 fb23 	bl	80013b8 <_fstat>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d102      	bne.n	8008d7c <_fstat_r+0x1c>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	b103      	cbz	r3, 8008d7c <_fstat_r+0x1c>
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000434 	.word	0x20000434

08008d84 <_isatty_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4d06      	ldr	r5, [pc, #24]	@ (8008da0 <_isatty_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	f7f8 fb22 	bl	80013d8 <_isatty>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_isatty_r+0x1a>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_isatty_r+0x1a>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20000434 	.word	0x20000434

08008da4 <_init>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr

08008db0 <_fini>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	bf00      	nop
 8008db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db6:	bc08      	pop	{r3}
 8008db8:	469e      	mov	lr, r3
 8008dba:	4770      	bx	lr
